{"ast":null,"code":"'use strict';\n\nexports.name = 'removeViewBox';\nexports.description = 'removes viewBox attribute when possible';\nconst viewBoxElems = new Set(['pattern', 'svg', 'symbol']);\n\n/**\n * Remove viewBox attr which coincides with a width/height box.\n *\n * @see https://www.w3.org/TR/SVG11/coords.html#ViewBoxAttribute\n *\n * @example\n * <svg width=\"100\" height=\"50\" viewBox=\"0 0 100 50\">\n *             â¬‡\n * <svg width=\"100\" height=\"50\">\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'removeViewBox'>}\n */\nexports.fn = () => {\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        if (viewBoxElems.has(node.name) && node.attributes.viewBox != null && node.attributes.width != null && node.attributes.height != null) {\n          // TODO remove width/height for such case instead\n          if (node.name === 'svg' && parentNode.type !== 'root') {\n            return;\n          }\n          const nums = node.attributes.viewBox.split(/[ ,]+/g);\n          if (nums[0] === '0' && nums[1] === '0' && node.attributes.width.replace(/px$/, '') === nums[2] &&\n          // could use parseFloat too\n          node.attributes.height.replace(/px$/, '') === nums[3]) {\n            delete node.attributes.viewBox;\n          }\n        }\n      }\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}