{"ast":null,"code":"'use strict';\n\nconst OMIT_PLUSSIGN = /^(?:\\+|(-))?0*(\\d*)(?:\\.0*|(\\.\\d*?)0*)?$/;\nconst KEEP_PLUSSIGN = /^([\\+\\-])?0*(\\d*)(?:\\.0*|(\\.\\d*?)0*)?$/;\nconst unsafeToRemovePlusSignAfter = new Set(['Dimension', 'Hash', 'Identifier', 'Number', 'Raw', 'UnicodeRange']);\nfunction packNumber(value, item) {\n  // omit plus sign only if no prev or prev is safe type\n  const regexp = item && item.prev !== null && unsafeToRemovePlusSignAfter.has(item.prev.data.type) ? KEEP_PLUSSIGN : OMIT_PLUSSIGN;\n\n  // 100 -> '100'\n  // 00100 -> '100'\n  // +100 -> '100'\n  // -100 -> '-100'\n  // 0.123 -> '.123'\n  // 0.12300 -> '.123'\n  // 0.0 -> ''\n  // 0 -> ''\n  // -0 -> '-'\n  value = String(value).replace(regexp, '$1$2$3');\n  if (value === '' || value === '-') {\n    value = '0';\n  }\n  // FIXME: is it solution simplier?\n  // value = String(Number(value)).replace(/^(-?)0+\\./, '$1.');\n\n  return value;\n}\nfunction Number(node) {\n  node.value = packNumber(node.value);\n}\nexports.Number = Number;\nexports.packNumber = packNumber;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}