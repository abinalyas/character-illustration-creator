{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/abinalias/Documents/character-illustration-creator/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst os = require('os');\nconst fs = require('fs');\nconst {\n  pathToFileURL\n} = require('url');\nconst path = require('path');\nconst {\n  optimize: optimizeAgnostic\n} = require('./svgo.js');\nconst importConfig = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (configFile) {\n    let config;\n    // at the moment dynamic import may randomly fail with segfault\n    // to workaround this for some users .cjs extension is loaded\n    // exclusively with require\n    if (configFile.endsWith('.cjs')) {\n      config = require(configFile);\n    } else {\n      // dynamic import expects file url instead of path and may fail\n      // when windows path is provided\n      const {\n        default: imported\n      } = yield import(pathToFileURL(configFile));\n      config = imported;\n    }\n    if (config == null || typeof config !== 'object' || Array.isArray(config)) {\n      throw Error(`Invalid config file \"${configFile}\"`);\n    }\n    return config;\n  });\n  return function importConfig(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nconst isFile = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (file) {\n    try {\n      const stats = yield fs.promises.stat(file);\n      return stats.isFile();\n    } catch {\n      return false;\n    }\n  });\n  return function isFile(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nconst loadConfig = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(function* (configFile, cwd = process.cwd()) {\n    if (configFile != null) {\n      if (path.isAbsolute(configFile)) {\n        return yield importConfig(configFile);\n      } else {\n        return yield importConfig(path.join(cwd, configFile));\n      }\n    }\n    let dir = cwd;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const js = path.join(dir, 'svgo.config.js');\n      if (yield isFile(js)) {\n        return yield importConfig(js);\n      }\n      const mjs = path.join(dir, 'svgo.config.mjs');\n      if (yield isFile(mjs)) {\n        return yield importConfig(mjs);\n      }\n      const cjs = path.join(dir, 'svgo.config.cjs');\n      if (yield isFile(cjs)) {\n        return yield importConfig(cjs);\n      }\n      const parent = path.dirname(dir);\n      if (dir === parent) {\n        return null;\n      }\n      dir = parent;\n    }\n  });\n  return function loadConfig(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexports.loadConfig = loadConfig;\nconst optimize = (input, config) => {\n  if (config == null) {\n    config = {};\n  }\n  if (typeof config !== 'object') {\n    throw Error('Config should be an object');\n  }\n  return optimizeAgnostic(input, {\n    ...config,\n    js2svg: {\n      // platform specific default for end of line\n      eol: os.EOL === '\\r\\n' ? 'crlf' : 'lf',\n      ...config.js2svg\n    }\n  });\n};\nexports.optimize = optimize;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}