{"ast":null,"code":"'use strict';\n\nconst isTag = node => {\n  return node.type === 'element';\n};\nconst existsOne = (test, elems) => {\n  return elems.some(elem => {\n    if (isTag(elem)) {\n      return test(elem) || existsOne(test, getChildren(elem));\n    } else {\n      return false;\n    }\n  });\n};\nconst getAttributeValue = (elem, name) => {\n  return elem.attributes[name];\n};\nconst getChildren = node => {\n  return node.children || [];\n};\nconst getName = elemAst => {\n  return elemAst.name;\n};\nconst getParent = node => {\n  return node.parentNode || null;\n};\nconst getSiblings = elem => {\n  var parent = getParent(elem);\n  return parent ? getChildren(parent) : [];\n};\nconst getText = node => {\n  if (node.children[0].type === 'text' && node.children[0].type === 'cdata') {\n    return node.children[0].value;\n  }\n  return '';\n};\nconst hasAttrib = (elem, name) => {\n  return elem.attributes[name] !== undefined;\n};\nconst removeSubsets = nodes => {\n  let idx = nodes.length;\n  let node;\n  let ancestor;\n  let replace;\n  // Check if each node (or one of its ancestors) is already contained in the\n  // array.\n  while (--idx > -1) {\n    node = ancestor = nodes[idx];\n    // Temporarily remove the node under consideration\n    nodes[idx] = null;\n    replace = true;\n    while (ancestor) {\n      if (nodes.includes(ancestor)) {\n        replace = false;\n        nodes.splice(idx, 1);\n        break;\n      }\n      ancestor = getParent(ancestor);\n    }\n    // If the node has been found to be unique, re-insert it.\n    if (replace) {\n      nodes[idx] = node;\n    }\n  }\n  return nodes;\n};\nconst findAll = (test, elems) => {\n  const result = [];\n  for (const elem of elems) {\n    if (isTag(elem)) {\n      if (test(elem)) {\n        result.push(elem);\n      }\n      result.push(...findAll(test, getChildren(elem)));\n    }\n  }\n  return result;\n};\nconst findOne = (test, elems) => {\n  for (const elem of elems) {\n    if (isTag(elem)) {\n      if (test(elem)) {\n        return elem;\n      }\n      const result = findOne(test, getChildren(elem));\n      if (result) {\n        return result;\n      }\n    }\n  }\n  return null;\n};\nconst svgoCssSelectAdapter = {\n  isTag,\n  existsOne,\n  getAttributeValue,\n  getChildren,\n  getName,\n  getParent,\n  getSiblings,\n  getText,\n  hasAttrib,\n  removeSubsets,\n  findAll,\n  findOne\n};\nmodule.exports = svgoCssSelectAdapter;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}