{"ast":null,"code":"'use strict';\n\nconst types = require('./types.cjs');\nconst charCodeDefinitions = require('./char-code-definitions.cjs');\nconst utils = require('./utils.cjs');\nconst names = require('./names.cjs');\nconst OffsetToLocation = require('./OffsetToLocation.cjs');\nconst TokenStream = require('./TokenStream.cjs');\nfunction tokenize(source, onToken) {\n  function getCharCode(offset) {\n    return offset < sourceLength ? source.charCodeAt(offset) : 0;\n  }\n\n  // § 4.3.3. Consume a numeric token\n  function consumeNumericToken() {\n    // Consume a number and let number be the result.\n    offset = utils.consumeNumber(source, offset);\n\n    // If the next 3 input code points would start an identifier, then:\n    if (charCodeDefinitions.isIdentifierStart(getCharCode(offset), getCharCode(offset + 1), getCharCode(offset + 2))) {\n      // Create a <dimension-token> with the same value and type flag as number, and a unit set initially to the empty string.\n      // Consume a name. Set the <dimension-token>’s unit to the returned value.\n      // Return the <dimension-token>.\n      type = types.Dimension;\n      offset = utils.consumeName(source, offset);\n      return;\n    }\n\n    // Otherwise, if the next input code point is U+0025 PERCENTAGE SIGN (%), consume it.\n    if (getCharCode(offset) === 0x0025) {\n      // Create a <percentage-token> with the same value as number, and return it.\n      type = types.Percentage;\n      offset++;\n      return;\n    }\n\n    // Otherwise, create a <number-token> with the same value and type flag as number, and return it.\n    type = types.Number;\n  }\n\n  // § 4.3.4. Consume an ident-like token\n  function consumeIdentLikeToken() {\n    const nameStartOffset = offset;\n\n    // Consume a name, and let string be the result.\n    offset = utils.consumeName(source, offset);\n\n    // If string’s value is an ASCII case-insensitive match for \"url\",\n    // and the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.\n    if (utils.cmpStr(source, nameStartOffset, offset, 'url') && getCharCode(offset) === 0x0028) {\n      // While the next two input code points are whitespace, consume the next input code point.\n      offset = utils.findWhiteSpaceEnd(source, offset + 1);\n\n      // If the next one or two input code points are U+0022 QUOTATION MARK (\"), U+0027 APOSTROPHE ('),\n      // or whitespace followed by U+0022 QUOTATION MARK (\") or U+0027 APOSTROPHE ('),\n      // then create a <function-token> with its value set to string and return it.\n      if (getCharCode(offset) === 0x0022 || getCharCode(offset) === 0x0027) {\n        type = types.Function;\n        offset = nameStartOffset + 4;\n        return;\n      }\n\n      // Otherwise, consume a url token, and return it.\n      consumeUrlToken();\n      return;\n    }\n\n    // Otherwise, if the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.\n    // Create a <function-token> with its value set to string and return it.\n    if (getCharCode(offset) === 0x0028) {\n      type = types.Function;\n      offset++;\n      return;\n    }\n\n    // Otherwise, create an <ident-token> with its value set to string and return it.\n    type = types.Ident;\n  }\n\n  // § 4.3.5. Consume a string token\n  function consumeStringToken(endingCodePoint) {\n    // This algorithm may be called with an ending code point, which denotes the code point\n    // that ends the string. If an ending code point is not specified,\n    // the current input code point is used.\n    if (!endingCodePoint) {\n      endingCodePoint = getCharCode(offset++);\n    }\n\n    // Initially create a <string-token> with its value set to the empty string.\n    type = types.String;\n\n    // Repeatedly consume the next input code point from the stream:\n    for (; offset < source.length; offset++) {\n      const code = source.charCodeAt(offset);\n      switch (charCodeDefinitions.charCodeCategory(code)) {\n        // ending code point\n        case endingCodePoint:\n          // Return the <string-token>.\n          offset++;\n          return;\n\n        // EOF\n        // case EofCategory:\n        // This is a parse error. Return the <string-token>.\n        // return;\n\n        // newline\n        case charCodeDefinitions.WhiteSpaceCategory:\n          if (charCodeDefinitions.isNewline(code)) {\n            // This is a parse error. Reconsume the current input code point,\n            // create a <bad-string-token>, and return it.\n            offset += utils.getNewlineLength(source, offset, code);\n            type = types.BadString;\n            return;\n          }\n          break;\n\n        // U+005C REVERSE SOLIDUS (\\)\n        case 0x005C:\n          // If the next input code point is EOF, do nothing.\n          if (offset === source.length - 1) {\n            break;\n          }\n          const nextCode = getCharCode(offset + 1);\n\n          // Otherwise, if the next input code point is a newline, consume it.\n          if (charCodeDefinitions.isNewline(nextCode)) {\n            offset += utils.getNewlineLength(source, offset + 1, nextCode);\n          } else if (charCodeDefinitions.isValidEscape(code, nextCode)) {\n            // Otherwise, (the stream starts with a valid escape) consume\n            // an escaped code point and append the returned code point to\n            // the <string-token>’s value.\n            offset = utils.consumeEscaped(source, offset) - 1;\n          }\n          break;\n\n        // anything else\n        // Append the current input code point to the <string-token>’s value.\n      }\n    }\n  }\n\n  // § 4.3.6. Consume a url token\n  // Note: This algorithm assumes that the initial \"url(\" has already been consumed.\n  // This algorithm also assumes that it’s being called to consume an \"unquoted\" value, like url(foo).\n  // A quoted value, like url(\"foo\"), is parsed as a <function-token>. Consume an ident-like token\n  // automatically handles this distinction; this algorithm shouldn’t be called directly otherwise.\n  function consumeUrlToken() {\n    // Initially create a <url-token> with its value set to the empty string.\n    type = types.Url;\n\n    // Consume as much whitespace as possible.\n    offset = utils.findWhiteSpaceEnd(source, offset);\n\n    // Repeatedly consume the next input code point from the stream:\n    for (; offset < source.length; offset++) {\n      const code = source.charCodeAt(offset);\n      switch (charCodeDefinitions.charCodeCategory(code)) {\n        // U+0029 RIGHT PARENTHESIS ())\n        case 0x0029:\n          // Return the <url-token>.\n          offset++;\n          return;\n\n        // EOF\n        // case EofCategory:\n        // This is a parse error. Return the <url-token>.\n        // return;\n\n        // whitespace\n        case charCodeDefinitions.WhiteSpaceCategory:\n          // Consume as much whitespace as possible.\n          offset = utils.findWhiteSpaceEnd(source, offset);\n\n          // If the next input code point is U+0029 RIGHT PARENTHESIS ()) or EOF,\n          // consume it and return the <url-token>\n          // (if EOF was encountered, this is a parse error);\n          if (getCharCode(offset) === 0x0029 || offset >= source.length) {\n            if (offset < source.length) {\n              offset++;\n            }\n            return;\n          }\n\n          // otherwise, consume the remnants of a bad url, create a <bad-url-token>,\n          // and return it.\n          offset = utils.consumeBadUrlRemnants(source, offset);\n          type = types.BadUrl;\n          return;\n\n        // U+0022 QUOTATION MARK (\")\n        // U+0027 APOSTROPHE (')\n        // U+0028 LEFT PARENTHESIS (()\n        // non-printable code point\n        case 0x0022:\n        case 0x0027:\n        case 0x0028:\n        case charCodeDefinitions.NonPrintableCategory:\n          // This is a parse error. Consume the remnants of a bad url,\n          // create a <bad-url-token>, and return it.\n          offset = utils.consumeBadUrlRemnants(source, offset);\n          type = types.BadUrl;\n          return;\n\n        // U+005C REVERSE SOLIDUS (\\)\n        case 0x005C:\n          // If the stream starts with a valid escape, consume an escaped code point and\n          // append the returned code point to the <url-token>’s value.\n          if (charCodeDefinitions.isValidEscape(code, getCharCode(offset + 1))) {\n            offset = utils.consumeEscaped(source, offset) - 1;\n            break;\n          }\n\n          // Otherwise, this is a parse error. Consume the remnants of a bad url,\n          // create a <bad-url-token>, and return it.\n          offset = utils.consumeBadUrlRemnants(source, offset);\n          type = types.BadUrl;\n          return;\n\n        // anything else\n        // Append the current input code point to the <url-token>’s value.\n      }\n    }\n  }\n\n  // ensure source is a string\n  source = String(source || '');\n  const sourceLength = source.length;\n  let start = charCodeDefinitions.isBOM(getCharCode(0));\n  let offset = start;\n  let type;\n\n  // https://drafts.csswg.org/css-syntax-3/#consume-token\n  // § 4.3.1. Consume a token\n  while (offset < sourceLength) {\n    const code = source.charCodeAt(offset);\n    switch (charCodeDefinitions.charCodeCategory(code)) {\n      // whitespace\n      case charCodeDefinitions.WhiteSpaceCategory:\n        // Consume as much whitespace as possible. Return a <whitespace-token>.\n        type = types.WhiteSpace;\n        offset = utils.findWhiteSpaceEnd(source, offset + 1);\n        break;\n\n      // U+0022 QUOTATION MARK (\")\n      case 0x0022:\n        // Consume a string token and return it.\n        consumeStringToken();\n        break;\n\n      // U+0023 NUMBER SIGN (#)\n      case 0x0023:\n        // If the next input code point is a name code point or the next two input code points are a valid escape, then:\n        if (charCodeDefinitions.isName(getCharCode(offset + 1)) || charCodeDefinitions.isValidEscape(getCharCode(offset + 1), getCharCode(offset + 2))) {\n          // Create a <hash-token>.\n          type = types.Hash;\n\n          // If the next 3 input code points would start an identifier, set the <hash-token>’s type flag to \"id\".\n          // if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {\n          //     // TODO: set id flag\n          // }\n\n          // Consume a name, and set the <hash-token>’s value to the returned string.\n          offset = utils.consumeName(source, offset + 1);\n\n          // Return the <hash-token>.\n        } else {\n          // Otherwise, return a <delim-token> with its value set to the current input code point.\n          type = types.Delim;\n          offset++;\n        }\n        break;\n\n      // U+0027 APOSTROPHE (')\n      case 0x0027:\n        // Consume a string token and return it.\n        consumeStringToken();\n        break;\n\n      // U+0028 LEFT PARENTHESIS (()\n      case 0x0028:\n        // Return a <(-token>.\n        type = types.LeftParenthesis;\n        offset++;\n        break;\n\n      // U+0029 RIGHT PARENTHESIS ())\n      case 0x0029:\n        // Return a <)-token>.\n        type = types.RightParenthesis;\n        offset++;\n        break;\n\n      // U+002B PLUS SIGN (+)\n      case 0x002B:\n        // If the input stream starts with a number, ...\n        if (charCodeDefinitions.isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n          // ... reconsume the current input code point, consume a numeric token, and return it.\n          consumeNumericToken();\n        } else {\n          // Otherwise, return a <delim-token> with its value set to the current input code point.\n          type = types.Delim;\n          offset++;\n        }\n        break;\n\n      // U+002C COMMA (,)\n      case 0x002C:\n        // Return a <comma-token>.\n        type = types.Comma;\n        offset++;\n        break;\n\n      // U+002D HYPHEN-MINUS (-)\n      case 0x002D:\n        // If the input stream starts with a number, reconsume the current input code point, consume a numeric token, and return it.\n        if (charCodeDefinitions.isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n          consumeNumericToken();\n        } else {\n          // Otherwise, if the next 2 input code points are U+002D HYPHEN-MINUS U+003E GREATER-THAN SIGN (->), consume them and return a <CDC-token>.\n          if (getCharCode(offset + 1) === 0x002D && getCharCode(offset + 2) === 0x003E) {\n            type = types.CDC;\n            offset = offset + 3;\n          } else {\n            // Otherwise, if the input stream starts with an identifier, ...\n            if (charCodeDefinitions.isIdentifierStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n              // ... reconsume the current input code point, consume an ident-like token, and return it.\n              consumeIdentLikeToken();\n            } else {\n              // Otherwise, return a <delim-token> with its value set to the current input code point.\n              type = types.Delim;\n              offset++;\n            }\n          }\n        }\n        break;\n\n      // U+002E FULL STOP (.)\n      case 0x002E:\n        // If the input stream starts with a number, ...\n        if (charCodeDefinitions.isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n          // ... reconsume the current input code point, consume a numeric token, and return it.\n          consumeNumericToken();\n        } else {\n          // Otherwise, return a <delim-token> with its value set to the current input code point.\n          type = types.Delim;\n          offset++;\n        }\n        break;\n\n      // U+002F SOLIDUS (/)\n      case 0x002F:\n        // If the next two input code point are U+002F SOLIDUS (/) followed by a U+002A ASTERISK (*),\n        if (getCharCode(offset + 1) === 0x002A) {\n          // ... consume them and all following code points up to and including the first U+002A ASTERISK (*)\n          // followed by a U+002F SOLIDUS (/), or up to an EOF code point.\n          type = types.Comment;\n          offset = source.indexOf('*/', offset + 2);\n          offset = offset === -1 ? source.length : offset + 2;\n        } else {\n          type = types.Delim;\n          offset++;\n        }\n        break;\n\n      // U+003A COLON (:)\n      case 0x003A:\n        // Return a <colon-token>.\n        type = types.Colon;\n        offset++;\n        break;\n\n      // U+003B SEMICOLON (;)\n      case 0x003B:\n        // Return a <semicolon-token>.\n        type = types.Semicolon;\n        offset++;\n        break;\n\n      // U+003C LESS-THAN SIGN (<)\n      case 0x003C:\n        // If the next 3 input code points are U+0021 EXCLAMATION MARK U+002D HYPHEN-MINUS U+002D HYPHEN-MINUS (!--), ...\n        if (getCharCode(offset + 1) === 0x0021 && getCharCode(offset + 2) === 0x002D && getCharCode(offset + 3) === 0x002D) {\n          // ... consume them and return a <CDO-token>.\n          type = types.CDO;\n          offset = offset + 4;\n        } else {\n          // Otherwise, return a <delim-token> with its value set to the current input code point.\n          type = types.Delim;\n          offset++;\n        }\n        break;\n\n      // U+0040 COMMERCIAL AT (@)\n      case 0x0040:\n        // If the next 3 input code points would start an identifier, ...\n        if (charCodeDefinitions.isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {\n          // ... consume a name, create an <at-keyword-token> with its value set to the returned value, and return it.\n          type = types.AtKeyword;\n          offset = utils.consumeName(source, offset + 1);\n        } else {\n          // Otherwise, return a <delim-token> with its value set to the current input code point.\n          type = types.Delim;\n          offset++;\n        }\n        break;\n\n      // U+005B LEFT SQUARE BRACKET ([)\n      case 0x005B:\n        // Return a <[-token>.\n        type = types.LeftSquareBracket;\n        offset++;\n        break;\n\n      // U+005C REVERSE SOLIDUS (\\)\n      case 0x005C:\n        // If the input stream starts with a valid escape, ...\n        if (charCodeDefinitions.isValidEscape(code, getCharCode(offset + 1))) {\n          // ... reconsume the current input code point, consume an ident-like token, and return it.\n          consumeIdentLikeToken();\n        } else {\n          // Otherwise, this is a parse error. Return a <delim-token> with its value set to the current input code point.\n          type = types.Delim;\n          offset++;\n        }\n        break;\n\n      // U+005D RIGHT SQUARE BRACKET (])\n      case 0x005D:\n        // Return a <]-token>.\n        type = types.RightSquareBracket;\n        offset++;\n        break;\n\n      // U+007B LEFT CURLY BRACKET ({)\n      case 0x007B:\n        // Return a <{-token>.\n        type = types.LeftCurlyBracket;\n        offset++;\n        break;\n\n      // U+007D RIGHT CURLY BRACKET (})\n      case 0x007D:\n        // Return a <}-token>.\n        type = types.RightCurlyBracket;\n        offset++;\n        break;\n\n      // digit\n      case charCodeDefinitions.DigitCategory:\n        // Reconsume the current input code point, consume a numeric token, and return it.\n        consumeNumericToken();\n        break;\n\n      // name-start code point\n      case charCodeDefinitions.NameStartCategory:\n        // Reconsume the current input code point, consume an ident-like token, and return it.\n        consumeIdentLikeToken();\n        break;\n\n      // EOF\n      // case EofCategory:\n      // Return an <EOF-token>.\n      // break;\n\n      // anything else\n      default:\n        // Return a <delim-token> with its value set to the current input code point.\n        type = types.Delim;\n        offset++;\n    }\n\n    // put token to stream\n    onToken(type, start, start = offset);\n  }\n}\nexports.AtKeyword = types.AtKeyword;\nexports.BadString = types.BadString;\nexports.BadUrl = types.BadUrl;\nexports.CDC = types.CDC;\nexports.CDO = types.CDO;\nexports.Colon = types.Colon;\nexports.Comma = types.Comma;\nexports.Comment = types.Comment;\nexports.Delim = types.Delim;\nexports.Dimension = types.Dimension;\nexports.EOF = types.EOF;\nexports.Function = types.Function;\nexports.Hash = types.Hash;\nexports.Ident = types.Ident;\nexports.LeftCurlyBracket = types.LeftCurlyBracket;\nexports.LeftParenthesis = types.LeftParenthesis;\nexports.LeftSquareBracket = types.LeftSquareBracket;\nexports.Number = types.Number;\nexports.Percentage = types.Percentage;\nexports.RightCurlyBracket = types.RightCurlyBracket;\nexports.RightParenthesis = types.RightParenthesis;\nexports.RightSquareBracket = types.RightSquareBracket;\nexports.Semicolon = types.Semicolon;\nexports.String = types.String;\nexports.Url = types.Url;\nexports.WhiteSpace = types.WhiteSpace;\nexports.tokenTypes = types;\nexports.DigitCategory = charCodeDefinitions.DigitCategory;\nexports.EofCategory = charCodeDefinitions.EofCategory;\nexports.NameStartCategory = charCodeDefinitions.NameStartCategory;\nexports.NonPrintableCategory = charCodeDefinitions.NonPrintableCategory;\nexports.WhiteSpaceCategory = charCodeDefinitions.WhiteSpaceCategory;\nexports.charCodeCategory = charCodeDefinitions.charCodeCategory;\nexports.isBOM = charCodeDefinitions.isBOM;\nexports.isDigit = charCodeDefinitions.isDigit;\nexports.isHexDigit = charCodeDefinitions.isHexDigit;\nexports.isIdentifierStart = charCodeDefinitions.isIdentifierStart;\nexports.isLetter = charCodeDefinitions.isLetter;\nexports.isLowercaseLetter = charCodeDefinitions.isLowercaseLetter;\nexports.isName = charCodeDefinitions.isName;\nexports.isNameStart = charCodeDefinitions.isNameStart;\nexports.isNewline = charCodeDefinitions.isNewline;\nexports.isNonAscii = charCodeDefinitions.isNonAscii;\nexports.isNonPrintable = charCodeDefinitions.isNonPrintable;\nexports.isNumberStart = charCodeDefinitions.isNumberStart;\nexports.isUppercaseLetter = charCodeDefinitions.isUppercaseLetter;\nexports.isValidEscape = charCodeDefinitions.isValidEscape;\nexports.isWhiteSpace = charCodeDefinitions.isWhiteSpace;\nexports.cmpChar = utils.cmpChar;\nexports.cmpStr = utils.cmpStr;\nexports.consumeBadUrlRemnants = utils.consumeBadUrlRemnants;\nexports.consumeEscaped = utils.consumeEscaped;\nexports.consumeName = utils.consumeName;\nexports.consumeNumber = utils.consumeNumber;\nexports.decodeEscaped = utils.decodeEscaped;\nexports.findDecimalNumberEnd = utils.findDecimalNumberEnd;\nexports.findWhiteSpaceEnd = utils.findWhiteSpaceEnd;\nexports.findWhiteSpaceStart = utils.findWhiteSpaceStart;\nexports.getNewlineLength = utils.getNewlineLength;\nexports.tokenNames = names;\nexports.OffsetToLocation = OffsetToLocation.OffsetToLocation;\nexports.TokenStream = TokenStream.TokenStream;\nexports.tokenize = tokenize;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}