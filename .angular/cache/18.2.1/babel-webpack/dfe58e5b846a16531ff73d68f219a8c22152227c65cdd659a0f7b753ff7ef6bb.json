{"ast":null,"code":"'use strict';\n\nconst types = require('../tokenizer/types.cjs');\nconst PLUSSIGN = 0x002B; // U+002B PLUS SIGN (+)\nconst HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\n\nconst code = (type, value) => {\n  if (type === types.Delim) {\n    type = value;\n  }\n  if (typeof type === 'string') {\n    const charCode = type.charCodeAt(0);\n    return charCode > 0x7F ? 0x8000 : charCode << 8;\n  }\n  return type;\n};\n\n// https://www.w3.org/TR/css-syntax-3/#serialization\n// The only requirement for serialization is that it must \"round-trip\" with parsing,\n// that is, parsing the stylesheet must produce the same data structures as parsing,\n// serializing, and parsing again, except for consecutive <whitespace-token>s,\n// which may be collapsed into a single token.\n\nconst specPairs = [[types.Ident, types.Ident], [types.Ident, types.Function], [types.Ident, types.Url], [types.Ident, types.BadUrl], [types.Ident, '-'], [types.Ident, types.Number], [types.Ident, types.Percentage], [types.Ident, types.Dimension], [types.Ident, types.CDC], [types.Ident, types.LeftParenthesis], [types.AtKeyword, types.Ident], [types.AtKeyword, types.Function], [types.AtKeyword, types.Url], [types.AtKeyword, types.BadUrl], [types.AtKeyword, '-'], [types.AtKeyword, types.Number], [types.AtKeyword, types.Percentage], [types.AtKeyword, types.Dimension], [types.AtKeyword, types.CDC], [types.Hash, types.Ident], [types.Hash, types.Function], [types.Hash, types.Url], [types.Hash, types.BadUrl], [types.Hash, '-'], [types.Hash, types.Number], [types.Hash, types.Percentage], [types.Hash, types.Dimension], [types.Hash, types.CDC], [types.Dimension, types.Ident], [types.Dimension, types.Function], [types.Dimension, types.Url], [types.Dimension, types.BadUrl], [types.Dimension, '-'], [types.Dimension, types.Number], [types.Dimension, types.Percentage], [types.Dimension, types.Dimension], [types.Dimension, types.CDC], ['#', types.Ident], ['#', types.Function], ['#', types.Url], ['#', types.BadUrl], ['#', '-'], ['#', types.Number], ['#', types.Percentage], ['#', types.Dimension], ['#', types.CDC],\n// https://github.com/w3c/csswg-drafts/pull/6874\n\n['-', types.Ident], ['-', types.Function], ['-', types.Url], ['-', types.BadUrl], ['-', '-'], ['-', types.Number], ['-', types.Percentage], ['-', types.Dimension], ['-', types.CDC],\n// https://github.com/w3c/csswg-drafts/pull/6874\n\n[types.Number, types.Ident], [types.Number, types.Function], [types.Number, types.Url], [types.Number, types.BadUrl], [types.Number, types.Number], [types.Number, types.Percentage], [types.Number, types.Dimension], [types.Number, '%'], [types.Number, types.CDC],\n// https://github.com/w3c/csswg-drafts/pull/6874\n\n['@', types.Ident], ['@', types.Function], ['@', types.Url], ['@', types.BadUrl], ['@', '-'], ['@', types.CDC],\n// https://github.com/w3c/csswg-drafts/pull/6874\n\n['.', types.Number], ['.', types.Percentage], ['.', types.Dimension], ['+', types.Number], ['+', types.Percentage], ['+', types.Dimension], ['/', '*']];\n// validate with scripts/generate-safe\nconst safePairs = specPairs.concat([[types.Ident, types.Hash], [types.Dimension, types.Hash], [types.Hash, types.Hash], [types.AtKeyword, types.LeftParenthesis], [types.AtKeyword, types.String], [types.AtKeyword, types.Colon], [types.Percentage, types.Percentage], [types.Percentage, types.Dimension], [types.Percentage, types.Function], [types.Percentage, '-'], [types.RightParenthesis, types.Ident], [types.RightParenthesis, types.Function], [types.RightParenthesis, types.Percentage], [types.RightParenthesis, types.Dimension], [types.RightParenthesis, types.Hash], [types.RightParenthesis, '-']]);\nfunction createMap(pairs) {\n  const isWhiteSpaceRequired = new Set(pairs.map(([prev, next]) => code(prev) << 16 | code(next)));\n  return function (prevCode, type, value) {\n    const nextCode = code(type, value);\n    const nextCharCode = value.charCodeAt(0);\n    const emitWs = nextCharCode === HYPHENMINUS && type !== types.Ident && type !== types.Function && type !== types.CDC || nextCharCode === PLUSSIGN ? isWhiteSpaceRequired.has(prevCode << 16 | nextCharCode << 8) : isWhiteSpaceRequired.has(prevCode << 16 | nextCode);\n    if (emitWs) {\n      this.emit(' ', types.WhiteSpace, true);\n    }\n    return nextCode;\n  };\n}\nconst spec = createMap(specPairs);\nconst safe = createMap(safePairs);\nexports.safe = safe;\nexports.spec = spec;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}