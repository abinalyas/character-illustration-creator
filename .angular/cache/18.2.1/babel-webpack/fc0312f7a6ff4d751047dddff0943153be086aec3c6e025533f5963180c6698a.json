{"ast":null,"code":"'use strict';\n\nconst {\n  toFixed\n} = require('../lib/svgo/tools');\n\n/**\n * @typedef {{ name: string, data: number[] }} TransformItem\n * @typedef {{\n *   convertToShorts: boolean,\n *   floatPrecision: number,\n *   transformPrecision: number,\n *   matrixToTransform: boolean,\n *   shortTranslate: boolean,\n *   shortScale: boolean,\n *   shortRotate: boolean,\n *   removeUseless: boolean,\n *   collapseIntoOne: boolean,\n *   leadingZero: boolean,\n *   negativeExtraSpace: boolean,\n * }} TransformParams\n */\n\nconst transformTypes = new Set(['matrix', 'rotate', 'scale', 'skewX', 'skewY', 'translate']);\nconst regTransformSplit = /\\s*(matrix|translate|scale|rotate|skewX|skewY)\\s*\\(\\s*(.+?)\\s*\\)[\\s,]*/;\nconst regNumericValues = /[-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?/g;\n\n/**\n * Convert transform string to JS representation.\n *\n * @param {string} transformString\n * @returns {TransformItem[]} Object representation of transform, or an empty array if it was malformed.\n */\nexports.transform2js = transformString => {\n  /** @type {TransformItem[]} */\n  const transforms = [];\n  /** @type {?TransformItem} */\n  let currentTransform = null;\n\n  // split value into ['', 'translate', '10 50', '', 'scale', '2', '', 'rotate', '-45', '']\n  for (const item of transformString.split(regTransformSplit)) {\n    if (!item) {\n      continue;\n    }\n    if (transformTypes.has(item)) {\n      currentTransform = {\n        name: item,\n        data: []\n      };\n      transforms.push(currentTransform);\n    } else {\n      let num;\n      // then split it into [10, 50] and collect as context.data\n      while (num = regNumericValues.exec(item)) {\n        num = Number(num);\n        if (currentTransform != null) {\n          currentTransform.data.push(num);\n        }\n      }\n    }\n  }\n  return currentTransform == null || currentTransform.data.length == 0 ? [] : transforms;\n};\n\n/**\n * Multiply transforms into one.\n *\n * @param {TransformItem[]} transforms\n * @returns {TransformItem}\n */\nexports.transformsMultiply = transforms => {\n  const matrixData = transforms.map(transform => {\n    if (transform.name === 'matrix') {\n      return transform.data;\n    }\n    return transformToMatrix(transform);\n  });\n  const matrixTransform = {\n    name: 'matrix',\n    data: matrixData.length > 0 ? matrixData.reduce(multiplyTransformMatrices) : []\n  };\n  return matrixTransform;\n};\n\n/**\n * Math utilities in radians.\n */\nconst mth = {\n  /**\n   * @param {number} deg\n   * @returns {number}\n   */\n  rad: deg => {\n    return deg * Math.PI / 180;\n  },\n  /**\n   * @param {number} rad\n   * @returns {number}\n   */\n  deg: rad => {\n    return rad * 180 / Math.PI;\n  },\n  /**\n   * @param {number} deg\n   * @returns {number}\n   */\n  cos: deg => {\n    return Math.cos(mth.rad(deg));\n  },\n  /**\n   * @param {number} val\n   * @param {number} floatPrecision\n   * @returns {number}\n   */\n  acos: (val, floatPrecision) => {\n    return toFixed(mth.deg(Math.acos(val)), floatPrecision);\n  },\n  /**\n   * @param {number} deg\n   * @returns {number}\n   */\n  sin: deg => {\n    return Math.sin(mth.rad(deg));\n  },\n  /**\n   * @param {number} val\n   * @param {number} floatPrecision\n   * @returns {number}\n   */\n  asin: (val, floatPrecision) => {\n    return toFixed(mth.deg(Math.asin(val)), floatPrecision);\n  },\n  /**\n   * @param {number} deg\n   * @returns {number}\n   */\n  tan: deg => {\n    return Math.tan(mth.rad(deg));\n  },\n  /**\n   * @param {number} val\n   * @param {number} floatPrecision\n   * @returns {number}\n   */\n  atan: (val, floatPrecision) => {\n    return toFixed(mth.deg(Math.atan(val)), floatPrecision);\n  }\n};\n\n/**\n * Decompose matrix into simple transforms.\n *\n * @param {TransformItem} transform\n * @param {TransformParams} params\n * @returns {TransformItem[]}\n * @see https://frederic-wang.fr/decomposition-of-2d-transform-matrices.html\n */\nexports.matrixToTransform = (transform, params) => {\n  const floatPrecision = params.floatPrecision;\n  const data = transform.data;\n  const transforms = [];\n\n  // [..., ..., ..., ..., tx, ty] → translate(tx, ty)\n  if (data[4] || data[5]) {\n    transforms.push({\n      name: 'translate',\n      data: data.slice(4, data[5] ? 6 : 5)\n    });\n  }\n  let sx = toFixed(Math.hypot(data[0], data[1]), params.transformPrecision);\n  let sy = toFixed((data[0] * data[3] - data[1] * data[2]) / sx, params.transformPrecision);\n  const colsSum = data[0] * data[2] + data[1] * data[3];\n  const rowsSum = data[0] * data[1] + data[2] * data[3];\n  const scaleBefore = rowsSum !== 0 || sx === sy;\n\n  // [sx, 0, tan(a)·sy, sy, 0, 0] → skewX(a)·scale(sx, sy)\n  if (!data[1] && data[2]) {\n    transforms.push({\n      name: 'skewX',\n      data: [mth.atan(data[2] / sy, floatPrecision)]\n    });\n\n    // [sx, sx·tan(a), 0, sy, 0, 0] → skewY(a)·scale(sx, sy)\n  } else if (data[1] && !data[2]) {\n    transforms.push({\n      name: 'skewY',\n      data: [mth.atan(data[1] / data[0], floatPrecision)]\n    });\n    sx = data[0];\n    sy = data[3];\n\n    // [sx·cos(a), sx·sin(a), sy·-sin(a), sy·cos(a), x, y] → rotate(a[, cx, cy])·(scale or skewX) or\n    // [sx·cos(a), sy·sin(a), sx·-sin(a), sy·cos(a), x, y] → scale(sx, sy)·rotate(a[, cx, cy]) (if !scaleBefore)\n  } else if (!colsSum || sx === 1 && sy === 1 || !scaleBefore) {\n    if (!scaleBefore) {\n      sx = Math.hypot(data[0], data[2]);\n      sy = Math.hypot(data[1], data[3]);\n      if (toFixed(data[0], params.transformPrecision) < 0) {\n        sx = -sx;\n      }\n      if (data[3] < 0 || Math.sign(data[1]) === Math.sign(data[2]) && toFixed(data[3], params.transformPrecision) === 0) {\n        sy = -sy;\n      }\n      transforms.push({\n        name: 'scale',\n        data: [sx, sy]\n      });\n    }\n    const angle = Math.min(Math.max(-1, data[0] / sx), 1);\n    const rotate = [mth.acos(angle, floatPrecision) * ((scaleBefore ? 1 : sy) * data[1] < 0 ? -1 : 1)];\n    if (rotate[0]) {\n      transforms.push({\n        name: 'rotate',\n        data: rotate\n      });\n    }\n    if (rowsSum && colsSum) transforms.push({\n      name: 'skewX',\n      data: [mth.atan(colsSum / (sx * sx), floatPrecision)]\n    });\n\n    // rotate(a, cx, cy) can consume translate() within optional arguments cx, cy (rotation point)\n    if (rotate[0] && (data[4] || data[5])) {\n      transforms.shift();\n      const oneOverCos = 1 - data[0] / sx;\n      const sin = data[1] / (scaleBefore ? sx : sy);\n      const x = data[4] * (scaleBefore ? 1 : sy);\n      const y = data[5] * (scaleBefore ? 1 : sx);\n      const denom = (oneOverCos ** 2 + sin ** 2) * (scaleBefore ? 1 : sx * sy);\n      rotate.push((oneOverCos * x - sin * y) / denom, (oneOverCos * y + sin * x) / denom);\n    }\n\n    // Too many transformations, return original matrix if it isn't just a scale/translate\n  } else if (data[1] || data[2]) {\n    return [transform];\n  }\n  if (scaleBefore && (sx != 1 || sy != 1) || !transforms.length) {\n    transforms.push({\n      name: 'scale',\n      data: sx == sy ? [sx] : [sx, sy]\n    });\n  }\n  return transforms;\n};\n\n/**\n * Convert transform to the matrix data.\n *\n * @type {(transform: TransformItem) => number[] }\n */\nconst transformToMatrix = transform => {\n  if (transform.name === 'matrix') {\n    return transform.data;\n  }\n  switch (transform.name) {\n    case 'translate':\n      // [1, 0, 0, 1, tx, ty]\n      return [1, 0, 0, 1, transform.data[0], transform.data[1] || 0];\n    case 'scale':\n      // [sx, 0, 0, sy, 0, 0]\n      return [transform.data[0], 0, 0, transform.data[1] || transform.data[0], 0, 0];\n    case 'rotate':\n      // [cos(a), sin(a), -sin(a), cos(a), x, y]\n      var cos = mth.cos(transform.data[0]),\n        sin = mth.sin(transform.data[0]),\n        cx = transform.data[1] || 0,\n        cy = transform.data[2] || 0;\n      return [cos, sin, -sin, cos, (1 - cos) * cx + sin * cy, (1 - cos) * cy - sin * cx];\n    case 'skewX':\n      // [1, 0, tan(a), 1, 0, 0]\n      return [1, 0, mth.tan(transform.data[0]), 1, 0, 0];\n    case 'skewY':\n      // [1, tan(a), 0, 1, 0, 0]\n      return [1, mth.tan(transform.data[0]), 0, 1, 0, 0];\n    default:\n      throw Error(`Unknown transform ${transform.name}`);\n  }\n};\n\n/**\n * Applies transformation to an arc. To do so, we represent ellipse as a matrix, multiply it\n * by the transformation matrix and use a singular value decomposition to represent in a form\n * rotate(θ)·scale(a b)·rotate(φ). This gives us new ellipse params a, b and θ.\n * SVD is being done with the formulae provided by Wolffram|Alpha (svd {{m0, m2}, {m1, m3}})\n *\n * @type {(\n *   cursor: [x: number, y: number],\n *   arc: number[],\n *   transform: number[]\n * ) => number[]}\n */\nexports.transformArc = (cursor, arc, transform) => {\n  const x = arc[5] - cursor[0];\n  const y = arc[6] - cursor[1];\n  let a = arc[0];\n  let b = arc[1];\n  const rot = arc[2] * Math.PI / 180;\n  const cos = Math.cos(rot);\n  const sin = Math.sin(rot);\n  // skip if radius is 0\n  if (a > 0 && b > 0) {\n    let h = Math.pow(x * cos + y * sin, 2) / (4 * a * a) + Math.pow(y * cos - x * sin, 2) / (4 * b * b);\n    if (h > 1) {\n      h = Math.sqrt(h);\n      a *= h;\n      b *= h;\n    }\n  }\n  const ellipse = [a * cos, a * sin, -b * sin, b * cos, 0, 0];\n  const m = multiplyTransformMatrices(transform, ellipse);\n  // Decompose the new ellipse matrix\n  const lastCol = m[2] * m[2] + m[3] * m[3];\n  const squareSum = m[0] * m[0] + m[1] * m[1] + lastCol;\n  const root = Math.hypot(m[0] - m[3], m[1] + m[2]) * Math.hypot(m[0] + m[3], m[1] - m[2]);\n  if (!root) {\n    // circle\n    arc[0] = arc[1] = Math.sqrt(squareSum / 2);\n    arc[2] = 0;\n  } else {\n    const majorAxisSqr = (squareSum + root) / 2;\n    const minorAxisSqr = (squareSum - root) / 2;\n    const major = Math.abs(majorAxisSqr - lastCol) > 1e-6;\n    const sub = (major ? majorAxisSqr : minorAxisSqr) - lastCol;\n    const rowsSum = m[0] * m[2] + m[1] * m[3];\n    const term1 = m[0] * sub + m[2] * rowsSum;\n    const term2 = m[1] * sub + m[3] * rowsSum;\n    arc[0] = Math.sqrt(majorAxisSqr);\n    arc[1] = Math.sqrt(minorAxisSqr);\n    arc[2] = ((major ? term2 < 0 : term1 > 0) ? -1 : 1) * Math.acos((major ? term1 : term2) / Math.hypot(term1, term2)) * 180 / Math.PI;\n  }\n  if (transform[0] < 0 !== transform[3] < 0) {\n    // Flip the sweep flag if coordinates are being flipped horizontally XOR vertically\n    arc[4] = 1 - arc[4];\n  }\n  return arc;\n};\n\n/**\n * Multiply transformation matrices.\n *\n * @type {(a: number[], b: number[]) => number[]}\n */\nconst multiplyTransformMatrices = (a, b) => {\n  return [a[0] * b[0] + a[2] * b[1], a[1] * b[0] + a[3] * b[1], a[0] * b[2] + a[2] * b[3], a[1] * b[2] + a[3] * b[3], a[0] * b[4] + a[2] * b[5] + a[4], a[1] * b[4] + a[3] * b[5] + a[5]];\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}