{"ast":null,"code":"'use strict';\n\nconst types = require('../../tokenizer/types.cjs');\nconst DOLLARSIGN = 0x0024; // U+0024 DOLLAR SIGN ($)\nconst ASTERISK = 0x002A; // U+002A ASTERISK (*)\nconst EQUALSSIGN = 0x003D; // U+003D EQUALS SIGN (=)\nconst CIRCUMFLEXACCENT = 0x005E; // U+005E (^)\nconst VERTICALLINE = 0x007C; // U+007C VERTICAL LINE (|)\nconst TILDE = 0x007E; // U+007E TILDE (~)\n\nfunction getAttributeName() {\n  if (this.eof) {\n    this.error('Unexpected end of input');\n  }\n  const start = this.tokenStart;\n  let expectIdent = false;\n  if (this.isDelim(ASTERISK)) {\n    expectIdent = true;\n    this.next();\n  } else if (!this.isDelim(VERTICALLINE)) {\n    this.eat(types.Ident);\n  }\n  if (this.isDelim(VERTICALLINE)) {\n    if (this.charCodeAt(this.tokenStart + 1) !== EQUALSSIGN) {\n      this.next();\n      this.eat(types.Ident);\n    } else if (expectIdent) {\n      this.error('Identifier is expected', this.tokenEnd);\n    }\n  } else if (expectIdent) {\n    this.error('Vertical line is expected');\n  }\n  return {\n    type: 'Identifier',\n    loc: this.getLocation(start, this.tokenStart),\n    name: this.substrToCursor(start)\n  };\n}\nfunction getOperator() {\n  const start = this.tokenStart;\n  const code = this.charCodeAt(start);\n  if (code !== EQUALSSIGN &&\n  // =\n  code !== TILDE &&\n  // ~=\n  code !== CIRCUMFLEXACCENT &&\n  // ^=\n  code !== DOLLARSIGN &&\n  // $=\n  code !== ASTERISK &&\n  // *=\n  code !== VERTICALLINE // |=\n  ) {\n    this.error('Attribute selector (=, ~=, ^=, $=, *=, |=) is expected');\n  }\n  this.next();\n  if (code !== EQUALSSIGN) {\n    if (!this.isDelim(EQUALSSIGN)) {\n      this.error('Equal sign is expected');\n    }\n    this.next();\n  }\n  return this.substrToCursor(start);\n}\n\n// '[' <wq-name> ']'\n// '[' <wq-name> <attr-matcher> [ <string-token> | <ident-token> ] <attr-modifier>? ']'\nconst name = 'AttributeSelector';\nconst structure = {\n  name: 'Identifier',\n  matcher: [String, null],\n  value: ['String', 'Identifier', null],\n  flags: [String, null]\n};\nfunction parse() {\n  const start = this.tokenStart;\n  let name;\n  let matcher = null;\n  let value = null;\n  let flags = null;\n  this.eat(types.LeftSquareBracket);\n  this.skipSC();\n  name = getAttributeName.call(this);\n  this.skipSC();\n  if (this.tokenType !== types.RightSquareBracket) {\n    // avoid case `[name i]`\n    if (this.tokenType !== types.Ident) {\n      matcher = getOperator.call(this);\n      this.skipSC();\n      value = this.tokenType === types.String ? this.String() : this.Identifier();\n      this.skipSC();\n    }\n\n    // attribute flags\n    if (this.tokenType === types.Ident) {\n      flags = this.consume(types.Ident);\n      this.skipSC();\n    }\n  }\n  this.eat(types.RightSquareBracket);\n  return {\n    type: 'AttributeSelector',\n    loc: this.getLocation(start, this.tokenStart),\n    name,\n    matcher,\n    value,\n    flags\n  };\n}\nfunction generate(node) {\n  this.token(types.Delim, '[');\n  this.node(node.name);\n  if (node.matcher !== null) {\n    this.tokenize(node.matcher);\n    this.node(node.value);\n  }\n  if (node.flags !== null) {\n    this.token(types.Ident, node.flags);\n  }\n  this.token(types.Delim, ']');\n}\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}