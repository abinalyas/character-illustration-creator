{"ast":null,"code":"'use strict';\n\nconst error = require('./error.cjs');\nconst names = require('../utils/names.cjs');\nconst genericConst = require('./generic-const.cjs');\nconst generic = require('./generic.cjs');\nconst prepareTokens = require('./prepare-tokens.cjs');\nconst matchGraph = require('./match-graph.cjs');\nconst match = require('./match.cjs');\nconst trace = require('./trace.cjs');\nconst search = require('./search.cjs');\nconst structure = require('./structure.cjs');\nconst parse = require('../definition-syntax/parse.cjs');\nconst generate = require('../definition-syntax/generate.cjs');\nconst walk = require('../definition-syntax/walk.cjs');\nconst cssWideKeywordsSyntax = matchGraph.buildMatchGraph(genericConst.cssWideKeywords.join(' | '));\nfunction dumpMapSyntax(map, compact, syntaxAsAst) {\n  const result = {};\n  for (const name in map) {\n    if (map[name].syntax) {\n      result[name] = syntaxAsAst ? map[name].syntax : generate.generate(map[name].syntax, {\n        compact\n      });\n    }\n  }\n  return result;\n}\nfunction dumpAtruleMapSyntax(map, compact, syntaxAsAst) {\n  const result = {};\n  for (const [name, atrule] of Object.entries(map)) {\n    result[name] = {\n      prelude: atrule.prelude && (syntaxAsAst ? atrule.prelude.syntax : generate.generate(atrule.prelude.syntax, {\n        compact\n      })),\n      descriptors: atrule.descriptors && dumpMapSyntax(atrule.descriptors, compact, syntaxAsAst)\n    };\n  }\n  return result;\n}\nfunction valueHasVar(tokens) {\n  for (let i = 0; i < tokens.length; i++) {\n    if (tokens[i].value.toLowerCase() === 'var(') {\n      return true;\n    }\n  }\n  return false;\n}\nfunction buildMatchResult(matched, error, iterations) {\n  return {\n    matched,\n    iterations,\n    error,\n    ...trace\n  };\n}\nfunction matchSyntax(lexer, syntax, value, useCssWideKeywords) {\n  const tokens = prepareTokens(value, lexer.syntax);\n  let result;\n  if (valueHasVar(tokens)) {\n    return buildMatchResult(null, new Error('Matching for a tree with var() is not supported'));\n  }\n  if (useCssWideKeywords) {\n    result = match.matchAsTree(tokens, lexer.cssWideKeywordsSyntax, lexer);\n  }\n  if (!useCssWideKeywords || !result.match) {\n    result = match.matchAsTree(tokens, syntax.match, lexer);\n    if (!result.match) {\n      return buildMatchResult(null, new error.SyntaxMatchError(result.reason, syntax.syntax, value, result), result.iterations);\n    }\n  }\n  return buildMatchResult(result.match, null, result.iterations);\n}\nclass Lexer {\n  constructor(config, syntax, structure$1) {\n    this.cssWideKeywordsSyntax = cssWideKeywordsSyntax;\n    this.syntax = syntax;\n    this.generic = false;\n    this.atrules = Object.create(null);\n    this.properties = Object.create(null);\n    this.types = Object.create(null);\n    this.structure = structure$1 || structure.getStructureFromConfig(config);\n    if (config) {\n      if (config.types) {\n        for (const name in config.types) {\n          this.addType_(name, config.types[name]);\n        }\n      }\n      if (config.generic) {\n        this.generic = true;\n        for (const name in generic) {\n          this.addType_(name, generic[name]);\n        }\n      }\n      if (config.atrules) {\n        for (const name in config.atrules) {\n          this.addAtrule_(name, config.atrules[name]);\n        }\n      }\n      if (config.properties) {\n        for (const name in config.properties) {\n          this.addProperty_(name, config.properties[name]);\n        }\n      }\n    }\n  }\n  checkStructure(ast) {\n    function collectWarning(node, message) {\n      warns.push({\n        node,\n        message\n      });\n    }\n    const structure = this.structure;\n    const warns = [];\n    this.syntax.walk(ast, function (node) {\n      if (structure.hasOwnProperty(node.type)) {\n        structure[node.type].check(node, collectWarning);\n      } else {\n        collectWarning(node, 'Unknown node type `' + node.type + '`');\n      }\n    });\n    return warns.length ? warns : false;\n  }\n  createDescriptor(syntax, type, name, parent = null) {\n    const ref = {\n      type,\n      name\n    };\n    const descriptor = {\n      type,\n      name,\n      parent,\n      serializable: typeof syntax === 'string' || syntax && typeof syntax.type === 'string',\n      syntax: null,\n      match: null\n    };\n    if (typeof syntax === 'function') {\n      descriptor.match = matchGraph.buildMatchGraph(syntax, ref);\n    } else {\n      if (typeof syntax === 'string') {\n        // lazy parsing on first access\n        Object.defineProperty(descriptor, 'syntax', {\n          get() {\n            Object.defineProperty(descriptor, 'syntax', {\n              value: parse.parse(syntax)\n            });\n            return descriptor.syntax;\n          }\n        });\n      } else {\n        descriptor.syntax = syntax;\n      }\n\n      // lazy graph build on first access\n      Object.defineProperty(descriptor, 'match', {\n        get() {\n          Object.defineProperty(descriptor, 'match', {\n            value: matchGraph.buildMatchGraph(descriptor.syntax, ref)\n          });\n          return descriptor.match;\n        }\n      });\n    }\n    return descriptor;\n  }\n  addAtrule_(name, syntax) {\n    if (!syntax) {\n      return;\n    }\n    this.atrules[name] = {\n      type: 'Atrule',\n      name: name,\n      prelude: syntax.prelude ? this.createDescriptor(syntax.prelude, 'AtrulePrelude', name) : null,\n      descriptors: syntax.descriptors ? Object.keys(syntax.descriptors).reduce((map, descName) => {\n        map[descName] = this.createDescriptor(syntax.descriptors[descName], 'AtruleDescriptor', descName, name);\n        return map;\n      }, Object.create(null)) : null\n    };\n  }\n  addProperty_(name, syntax) {\n    if (!syntax) {\n      return;\n    }\n    this.properties[name] = this.createDescriptor(syntax, 'Property', name);\n  }\n  addType_(name, syntax) {\n    if (!syntax) {\n      return;\n    }\n    this.types[name] = this.createDescriptor(syntax, 'Type', name);\n  }\n  checkAtruleName(atruleName) {\n    if (!this.getAtrule(atruleName)) {\n      return new error.SyntaxReferenceError('Unknown at-rule', '@' + atruleName);\n    }\n  }\n  checkAtrulePrelude(atruleName, prelude) {\n    const error = this.checkAtruleName(atruleName);\n    if (error) {\n      return error;\n    }\n    const atrule = this.getAtrule(atruleName);\n    if (!atrule.prelude && prelude) {\n      return new SyntaxError('At-rule `@' + atruleName + '` should not contain a prelude');\n    }\n    if (atrule.prelude && !prelude) {\n      if (!matchSyntax(this, atrule.prelude, '', false).matched) {\n        return new SyntaxError('At-rule `@' + atruleName + '` should contain a prelude');\n      }\n    }\n  }\n  checkAtruleDescriptorName(atruleName, descriptorName) {\n    const error$1 = this.checkAtruleName(atruleName);\n    if (error$1) {\n      return error$1;\n    }\n    const atrule = this.getAtrule(atruleName);\n    const descriptor = names.keyword(descriptorName);\n    if (!atrule.descriptors) {\n      return new SyntaxError('At-rule `@' + atruleName + '` has no known descriptors');\n    }\n    if (!atrule.descriptors[descriptor.name] && !atrule.descriptors[descriptor.basename]) {\n      return new error.SyntaxReferenceError('Unknown at-rule descriptor', descriptorName);\n    }\n  }\n  checkPropertyName(propertyName) {\n    if (!this.getProperty(propertyName)) {\n      return new error.SyntaxReferenceError('Unknown property', propertyName);\n    }\n  }\n  matchAtrulePrelude(atruleName, prelude) {\n    const error = this.checkAtrulePrelude(atruleName, prelude);\n    if (error) {\n      return buildMatchResult(null, error);\n    }\n    const atrule = this.getAtrule(atruleName);\n    if (!atrule.prelude) {\n      return buildMatchResult(null, null);\n    }\n    return matchSyntax(this, atrule.prelude, prelude || '', false);\n  }\n  matchAtruleDescriptor(atruleName, descriptorName, value) {\n    const error = this.checkAtruleDescriptorName(atruleName, descriptorName);\n    if (error) {\n      return buildMatchResult(null, error);\n    }\n    const atrule = this.getAtrule(atruleName);\n    const descriptor = names.keyword(descriptorName);\n    return matchSyntax(this, atrule.descriptors[descriptor.name] || atrule.descriptors[descriptor.basename], value, false);\n  }\n  matchDeclaration(node) {\n    if (node.type !== 'Declaration') {\n      return buildMatchResult(null, new Error('Not a Declaration node'));\n    }\n    return this.matchProperty(node.property, node.value);\n  }\n  matchProperty(propertyName, value) {\n    // don't match syntax for a custom property at the moment\n    if (names.property(propertyName).custom) {\n      return buildMatchResult(null, new Error('Lexer matching doesn\\'t applicable for custom properties'));\n    }\n    const error = this.checkPropertyName(propertyName);\n    if (error) {\n      return buildMatchResult(null, error);\n    }\n    return matchSyntax(this, this.getProperty(propertyName), value, true);\n  }\n  matchType(typeName, value) {\n    const typeSyntax = this.getType(typeName);\n    if (!typeSyntax) {\n      return buildMatchResult(null, new error.SyntaxReferenceError('Unknown type', typeName));\n    }\n    return matchSyntax(this, typeSyntax, value, false);\n  }\n  match(syntax, value) {\n    if (typeof syntax !== 'string' && (!syntax || !syntax.type)) {\n      return buildMatchResult(null, new error.SyntaxReferenceError('Bad syntax'));\n    }\n    if (typeof syntax === 'string' || !syntax.match) {\n      syntax = this.createDescriptor(syntax, 'Type', 'anonymous');\n    }\n    return matchSyntax(this, syntax, value, false);\n  }\n  findValueFragments(propertyName, value, type, name) {\n    return search.matchFragments(this, value, this.matchProperty(propertyName, value), type, name);\n  }\n  findDeclarationValueFragments(declaration, type, name) {\n    return search.matchFragments(this, declaration.value, this.matchDeclaration(declaration), type, name);\n  }\n  findAllFragments(ast, type, name) {\n    const result = [];\n    this.syntax.walk(ast, {\n      visit: 'Declaration',\n      enter: declaration => {\n        result.push.apply(result, this.findDeclarationValueFragments(declaration, type, name));\n      }\n    });\n    return result;\n  }\n  getAtrule(atruleName, fallbackBasename = true) {\n    const atrule = names.keyword(atruleName);\n    const atruleEntry = atrule.vendor && fallbackBasename ? this.atrules[atrule.name] || this.atrules[atrule.basename] : this.atrules[atrule.name];\n    return atruleEntry || null;\n  }\n  getAtrulePrelude(atruleName, fallbackBasename = true) {\n    const atrule = this.getAtrule(atruleName, fallbackBasename);\n    return atrule && atrule.prelude || null;\n  }\n  getAtruleDescriptor(atruleName, name) {\n    return this.atrules.hasOwnProperty(atruleName) && this.atrules.declarators ? this.atrules[atruleName].declarators[name] || null : null;\n  }\n  getProperty(propertyName, fallbackBasename = true) {\n    const property = names.property(propertyName);\n    const propertyEntry = property.vendor && fallbackBasename ? this.properties[property.name] || this.properties[property.basename] : this.properties[property.name];\n    return propertyEntry || null;\n  }\n  getType(name) {\n    return hasOwnProperty.call(this.types, name) ? this.types[name] : null;\n  }\n  validate() {\n    function validate(syntax, name, broken, descriptor) {\n      if (broken.has(name)) {\n        return broken.get(name);\n      }\n      broken.set(name, false);\n      if (descriptor.syntax !== null) {\n        walk.walk(descriptor.syntax, function (node) {\n          if (node.type !== 'Type' && node.type !== 'Property') {\n            return;\n          }\n          const map = node.type === 'Type' ? syntax.types : syntax.properties;\n          const brokenMap = node.type === 'Type' ? brokenTypes : brokenProperties;\n          if (!hasOwnProperty.call(map, node.name) || validate(syntax, node.name, brokenMap, map[node.name])) {\n            broken.set(name, true);\n          }\n        }, this);\n      }\n    }\n    let brokenTypes = new Map();\n    let brokenProperties = new Map();\n    for (const key in this.types) {\n      validate(this, key, brokenTypes, this.types[key]);\n    }\n    for (const key in this.properties) {\n      validate(this, key, brokenProperties, this.properties[key]);\n    }\n    brokenTypes = [...brokenTypes.keys()].filter(name => brokenTypes.get(name));\n    brokenProperties = [...brokenProperties.keys()].filter(name => brokenProperties.get(name));\n    if (brokenTypes.length || brokenProperties.length) {\n      return {\n        types: brokenTypes,\n        properties: brokenProperties\n      };\n    }\n    return null;\n  }\n  dump(syntaxAsAst, pretty) {\n    return {\n      generic: this.generic,\n      types: dumpMapSyntax(this.types, !pretty, syntaxAsAst),\n      properties: dumpMapSyntax(this.properties, !pretty, syntaxAsAst),\n      atrules: dumpAtruleMapSyntax(this.atrules, !pretty, syntaxAsAst)\n    };\n  }\n  toString() {\n    return JSON.stringify(this.dump());\n  }\n}\nexports.Lexer = Lexer;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}