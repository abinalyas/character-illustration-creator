{"ast":null,"code":"'use strict';\n\nconst types = require('../../tokenizer/types.cjs');\nconst name = 'Function';\nconst walkContext = 'function';\nconst structure = {\n  name: String,\n  children: [[]]\n};\n\n// <function-token> <sequence> )\nfunction parse(readSequence, recognizer) {\n  const start = this.tokenStart;\n  const name = this.consumeFunctionName();\n  const nameLowerCase = name.toLowerCase();\n  let children;\n  children = recognizer.hasOwnProperty(nameLowerCase) ? recognizer[nameLowerCase].call(this, recognizer) : readSequence.call(this, recognizer);\n  if (!this.eof) {\n    this.eat(types.RightParenthesis);\n  }\n  return {\n    type: 'Function',\n    loc: this.getLocation(start, this.tokenStart),\n    name,\n    children\n  };\n}\nfunction generate(node) {\n  this.token(types.Function, node.name + '(');\n  this.children(node);\n  this.token(types.RightParenthesis, ')');\n}\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\nexports.walkContext = walkContext;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}