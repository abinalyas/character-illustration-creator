{"ast":null,"code":"'use strict';\n\n/**\n * @typedef {import('../lib/types').XastElement} XastElement\n * @typedef {import('../lib/types').XastParent} XastParent\n */\nconst csso = require('csso');\nconst {\n  detachNodeFromParent\n} = require('../lib/xast');\nconst {\n  hasScripts\n} = require('../lib/svgo/tools');\nexports.name = 'minifyStyles';\nexports.description = 'minifies styles and removes unused styles';\n\n/**\n * Minifies styles (<style> element + style attribute) using CSSO.\n *\n * @author strarsis <strarsis@gmail.com>\n * @type {import('./plugins-types').Plugin<'minifyStyles'>}\n */\nexports.fn = (_root, {\n  usage,\n  ...params\n}) => {\n  /** @type {Map<XastElement, XastParent>} */\n  const styleElements = new Map();\n\n  /** @type {XastElement[]} */\n  const elementsWithStyleAttributes = [];\n\n  /** @type {Set<string>} */\n  const tagsUsage = new Set();\n\n  /** @type {Set<string>} */\n  const idsUsage = new Set();\n\n  /** @type {Set<string>} */\n  const classesUsage = new Set();\n  let enableTagsUsage = true;\n  let enableIdsUsage = true;\n  let enableClassesUsage = true;\n\n  /**\n   * Force to use usage data even if it unsafe. For example, the document\n   * contains scripts or in attributes..\n   */\n  let forceUsageDeoptimized = false;\n  if (typeof usage === 'boolean') {\n    enableTagsUsage = usage;\n    enableIdsUsage = usage;\n    enableClassesUsage = usage;\n  } else if (usage) {\n    enableTagsUsage = usage.tags == null ? true : usage.tags;\n    enableIdsUsage = usage.ids == null ? true : usage.ids;\n    enableClassesUsage = usage.classes == null ? true : usage.classes;\n    forceUsageDeoptimized = usage.force == null ? false : usage.force;\n  }\n  let deoptimized = false;\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        // detect deoptimisations\n        if (hasScripts(node)) {\n          deoptimized = true;\n        }\n\n        // collect tags, ids and classes usage\n        tagsUsage.add(node.name);\n        if (node.attributes.id != null) {\n          idsUsage.add(node.attributes.id);\n        }\n        if (node.attributes.class != null) {\n          for (const className of node.attributes.class.split(/\\s+/)) {\n            classesUsage.add(className);\n          }\n        }\n        // collect style elements or elements with style attribute\n        if (node.name === 'style' && node.children.length !== 0) {\n          styleElements.set(node, parentNode);\n        } else if (node.attributes.style != null) {\n          elementsWithStyleAttributes.push(node);\n        }\n      }\n    },\n    root: {\n      exit: () => {\n        /** @type {csso.Usage} */\n        const cssoUsage = {};\n        if (!deoptimized || forceUsageDeoptimized) {\n          if (enableTagsUsage) {\n            cssoUsage.tags = Array.from(tagsUsage);\n          }\n          if (enableIdsUsage) {\n            cssoUsage.ids = Array.from(idsUsage);\n          }\n          if (enableClassesUsage) {\n            cssoUsage.classes = Array.from(classesUsage);\n          }\n        }\n        // minify style elements\n        for (const [styleNode, styleNodeParent] of styleElements.entries()) {\n          if (styleNode.children[0].type === 'text' || styleNode.children[0].type === 'cdata') {\n            const cssText = styleNode.children[0].value;\n            const minified = csso.minify(cssText, {\n              ...params,\n              usage: cssoUsage\n            }).css;\n            if (minified.length === 0) {\n              detachNodeFromParent(styleNode, styleNodeParent);\n              continue;\n            }\n\n            // preserve cdata if necessary\n            // TODO split cdata -> text optimisation into separate plugin\n            if (cssText.indexOf('>') >= 0 || cssText.indexOf('<') >= 0) {\n              styleNode.children[0].type = 'cdata';\n              styleNode.children[0].value = minified;\n            } else {\n              styleNode.children[0].type = 'text';\n              styleNode.children[0].value = minified;\n            }\n          }\n        }\n        // minify style attributes\n        for (const node of elementsWithStyleAttributes) {\n          // style attribute\n          const elemStyle = node.attributes.style;\n          node.attributes.style = csso.minifyBlock(elemStyle, {\n            ...params\n          }).css;\n        }\n      }\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}