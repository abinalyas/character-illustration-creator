{"ast":null,"code":"'use strict';\n\nconst types = require('../../tokenizer/types.cjs');\nconst name = 'AtrulePrelude';\nconst walkContext = 'atrulePrelude';\nconst structure = {\n  children: [[]]\n};\nfunction parse(name) {\n  let children = null;\n  if (name !== null) {\n    name = name.toLowerCase();\n  }\n  this.skipSC();\n  if (hasOwnProperty.call(this.atrule, name) && typeof this.atrule[name].prelude === 'function') {\n    // custom consumer\n    children = this.atrule[name].prelude.call(this);\n  } else {\n    // default consumer\n    children = this.readSequence(this.scope.AtrulePrelude);\n  }\n  this.skipSC();\n  if (this.eof !== true && this.tokenType !== types.LeftCurlyBracket && this.tokenType !== types.Semicolon) {\n    this.error('Semicolon or block is expected');\n  }\n  return {\n    type: 'AtrulePrelude',\n    loc: this.getLocationFromList(children),\n    children\n  };\n}\nfunction generate(node) {\n  this.children(node);\n}\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\nexports.walkContext = walkContext;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}