{"ast":null,"code":"'use strict';\n\nconst {\n  removeLeadingZero\n} = require('../lib/svgo/tools.js');\nexports.name = 'cleanupListOfValues';\nexports.description = 'rounds list of values to the fixed precision';\nconst regNumericValues = /^([-+]?\\d*\\.?\\d+([eE][-+]?\\d+)?)(px|pt|pc|mm|cm|m|in|ft|em|ex|%)?$/;\nconst regSeparator = /\\s+,?\\s*|,\\s*/;\nconst absoluteLengths = {\n  // relative to px\n  cm: 96 / 2.54,\n  mm: 96 / 25.4,\n  in: 96,\n  pt: 4 / 3,\n  pc: 16,\n  px: 1\n};\n\n/**\n * Round list of values to the fixed precision.\n *\n * @example\n * <svg viewBox=\"0 0 200.28423 200.28423\" enable-background=\"new 0 0 200.28423 200.28423\">\n *         ⬇\n * <svg viewBox=\"0 0 200.284 200.284\" enable-background=\"new 0 0 200.284 200.284\">\n *\n * <polygon points=\"208.250977 77.1308594 223.069336 ... \"/>\n *         ⬇\n * <polygon points=\"208.251 77.131 223.069 ... \"/>\n *\n * @author kiyopikko\n *\n * @type {import('./plugins-types').Plugin<'cleanupListOfValues'>}\n */\nexports.fn = (_root, params) => {\n  const {\n    floatPrecision = 3,\n    leadingZero = true,\n    defaultPx = true,\n    convertToPx = true\n  } = params;\n\n  /**\n   * @type {(lists: string) => string}\n   */\n  const roundValues = lists => {\n    const roundedList = [];\n    for (const elem of lists.split(regSeparator)) {\n      const match = elem.match(regNumericValues);\n      const matchNew = elem.match(/new/);\n\n      // if attribute value matches regNumericValues\n      if (match) {\n        // round it to the fixed precision\n        let num = Number(Number(match[1]).toFixed(floatPrecision));\n        /**\n         * @type {any}\n         */\n        let matchedUnit = match[3] || '';\n        /**\n         * @type{'' | keyof typeof absoluteLengths}\n         */\n        let units = matchedUnit;\n\n        // convert absolute values to pixels\n        if (convertToPx && units && units in absoluteLengths) {\n          const pxNum = Number((absoluteLengths[units] * Number(match[1])).toFixed(floatPrecision));\n          if (pxNum.toString().length < match[0].length) {\n            num = pxNum;\n            units = 'px';\n          }\n        }\n\n        // and remove leading zero\n        let str;\n        if (leadingZero) {\n          str = removeLeadingZero(num);\n        } else {\n          str = num.toString();\n        }\n\n        // remove default 'px' units\n        if (defaultPx && units === 'px') {\n          units = '';\n        }\n        roundedList.push(str + units);\n      }\n      // if attribute value is \"new\"(only enable-background).\n      else if (matchNew) {\n        roundedList.push('new');\n      } else if (elem) {\n        roundedList.push(elem);\n      }\n    }\n    return roundedList.join(' ');\n  };\n  return {\n    element: {\n      enter: node => {\n        if (node.attributes.points != null) {\n          node.attributes.points = roundValues(node.attributes.points);\n        }\n        if (node.attributes['enable-background'] != null) {\n          node.attributes['enable-background'] = roundValues(node.attributes['enable-background']);\n        }\n        if (node.attributes.viewBox != null) {\n          node.attributes.viewBox = roundValues(node.attributes.viewBox);\n        }\n        if (node.attributes['stroke-dasharray'] != null) {\n          node.attributes['stroke-dasharray'] = roundValues(node.attributes['stroke-dasharray']);\n        }\n        if (node.attributes.dx != null) {\n          node.attributes.dx = roundValues(node.attributes.dx);\n        }\n        if (node.attributes.dy != null) {\n          node.attributes.dy = roundValues(node.attributes.dy);\n        }\n        if (node.attributes.x != null) {\n          node.attributes.x = roundValues(node.attributes.x);\n        }\n        if (node.attributes.y != null) {\n          node.attributes.y = roundValues(node.attributes.y);\n        }\n      }\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}