{"ast":null,"code":"'use strict';\n\nconst types = require('../../tokenizer/types.cjs');\nconst AMPERSAND = 0x0026; // U+0026 AMPERSAND (&)\n\nfunction consumeRaw(startToken) {\n  return this.Raw(startToken, null, true);\n}\nfunction consumeRule() {\n  return this.parseWithFallback(this.Rule, consumeRaw);\n}\nfunction consumeRawDeclaration(startToken) {\n  return this.Raw(startToken, this.consumeUntilSemicolonIncluded, true);\n}\nfunction consumeDeclaration() {\n  if (this.tokenType === types.Semicolon) {\n    return consumeRawDeclaration.call(this, this.tokenIndex);\n  }\n  const node = this.parseWithFallback(this.Declaration, consumeRawDeclaration);\n  if (this.tokenType === types.Semicolon) {\n    this.next();\n  }\n  return node;\n}\nconst name = 'Block';\nconst walkContext = 'block';\nconst structure = {\n  children: [['Atrule', 'Rule', 'Declaration']]\n};\nfunction parse(isStyleBlock) {\n  const consumer = isStyleBlock ? consumeDeclaration : consumeRule;\n  const start = this.tokenStart;\n  let children = this.createList();\n  this.eat(types.LeftCurlyBracket);\n  scan: while (!this.eof) {\n    switch (this.tokenType) {\n      case types.RightCurlyBracket:\n        break scan;\n      case types.WhiteSpace:\n      case types.Comment:\n        this.next();\n        break;\n      case types.AtKeyword:\n        children.push(this.parseWithFallback(this.Atrule.bind(this, isStyleBlock), consumeRaw));\n        break;\n      default:\n        if (isStyleBlock && this.isDelim(AMPERSAND)) {\n          children.push(consumeRule.call(this));\n        } else {\n          children.push(consumer.call(this));\n        }\n    }\n  }\n  if (!this.eof) {\n    this.eat(types.RightCurlyBracket);\n  }\n  return {\n    type: 'Block',\n    loc: this.getLocation(start, this.tokenStart),\n    children\n  };\n}\nfunction generate(node) {\n  this.token(types.LeftCurlyBracket, '{');\n  this.children(node, prev => {\n    if (prev.type === 'Declaration') {\n      this.token(types.Semicolon, ';');\n    }\n  });\n  this.token(types.RightCurlyBracket, '}');\n}\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\nexports.walkContext = walkContext;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}