{"ast":null,"code":"'use strict';\n\nconst createCustomError = require('../utils/create-custom-error.cjs');\nconst MAX_LINE_LENGTH = 100;\nconst OFFSET_CORRECTION = 60;\nconst TAB_REPLACEMENT = '    ';\nfunction sourceFragment({\n  source,\n  line,\n  column\n}, extraLines) {\n  function processLines(start, end) {\n    return lines.slice(start, end).map((line, idx) => String(start + idx + 1).padStart(maxNumLength) + ' |' + line).join('\\n');\n  }\n  const lines = source.split(/\\r\\n?|\\n|\\f/);\n  const startLine = Math.max(1, line - extraLines) - 1;\n  const endLine = Math.min(line + extraLines, lines.length + 1);\n  const maxNumLength = Math.max(4, String(endLine).length) + 1;\n  let cutLeft = 0;\n\n  // column correction according to replaced tab before column\n  column += (TAB_REPLACEMENT.length - 1) * (lines[line - 1].substr(0, column - 1).match(/\\t/g) || []).length;\n  if (column > MAX_LINE_LENGTH) {\n    cutLeft = column - OFFSET_CORRECTION + 3;\n    column = OFFSET_CORRECTION - 2;\n  }\n  for (let i = startLine; i <= endLine; i++) {\n    if (i >= 0 && i < lines.length) {\n      lines[i] = lines[i].replace(/\\t/g, TAB_REPLACEMENT);\n      lines[i] = (cutLeft > 0 && lines[i].length > cutLeft ? '\\u2026' : '') + lines[i].substr(cutLeft, MAX_LINE_LENGTH - 2) + (lines[i].length > cutLeft + MAX_LINE_LENGTH - 1 ? '\\u2026' : '');\n    }\n  }\n  return [processLines(startLine, line), new Array(column + maxNumLength + 2).join('-') + '^', processLines(line, endLine)].filter(Boolean).join('\\n');\n}\nfunction SyntaxError(message, source, offset, line, column) {\n  const error = Object.assign(createCustomError.createCustomError('SyntaxError', message), {\n    source,\n    offset,\n    line,\n    column,\n    sourceFragment(extraLines) {\n      return sourceFragment({\n        source,\n        line,\n        column\n      }, isNaN(extraLines) ? 0 : extraLines);\n    },\n    get formattedMessage() {\n      return `Parse error: ${message}\\n` + sourceFragment({\n        source,\n        line,\n        column\n      }, 2);\n    }\n  });\n  return error;\n}\nexports.SyntaxError = SyntaxError;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}