{"ast":null,"code":"'use strict';\n\nconst types = require('../../tokenizer/types.cjs');\nconst NUMBERSIGN = 0x0023; // U+0023 NUMBER SIGN (#)\nconst AMPERSAND = 0x0026; // U+0026 AMPERSAND (&)\nconst ASTERISK = 0x002A; // U+002A ASTERISK (*)\nconst PLUSSIGN = 0x002B; // U+002B PLUS SIGN (+)\nconst SOLIDUS = 0x002F; // U+002F SOLIDUS (/)\nconst FULLSTOP = 0x002E; // U+002E FULL STOP (.)\nconst GREATERTHANSIGN = 0x003E; // U+003E GREATER-THAN SIGN (>)\nconst VERTICALLINE = 0x007C; // U+007C VERTICAL LINE (|)\nconst TILDE = 0x007E; // U+007E TILDE (~)\n\nfunction onWhiteSpace(next, children) {\n  if (children.last !== null && children.last.type !== 'Combinator' && next !== null && next.type !== 'Combinator') {\n    children.push({\n      // FIXME: this.Combinator() should be used instead\n      type: 'Combinator',\n      loc: null,\n      name: ' '\n    });\n  }\n}\nfunction getNode() {\n  switch (this.tokenType) {\n    case types.LeftSquareBracket:\n      return this.AttributeSelector();\n    case types.Hash:\n      return this.IdSelector();\n    case types.Colon:\n      if (this.lookupType(1) === types.Colon) {\n        return this.PseudoElementSelector();\n      } else {\n        return this.PseudoClassSelector();\n      }\n    case types.Ident:\n      return this.TypeSelector();\n    case types.Number:\n    case types.Percentage:\n      return this.Percentage();\n    case types.Dimension:\n      // throws when .123ident\n      if (this.charCodeAt(this.tokenStart) === FULLSTOP) {\n        this.error('Identifier is expected', this.tokenStart + 1);\n      }\n      break;\n    case types.Delim:\n      {\n        const code = this.charCodeAt(this.tokenStart);\n        switch (code) {\n          case PLUSSIGN:\n          case GREATERTHANSIGN:\n          case TILDE:\n          case SOLIDUS:\n            // /deep/\n            return this.Combinator();\n          case FULLSTOP:\n            return this.ClassSelector();\n          case ASTERISK:\n          case VERTICALLINE:\n            return this.TypeSelector();\n          case NUMBERSIGN:\n            return this.IdSelector();\n          case AMPERSAND:\n            return this.NestingSelector();\n        }\n        break;\n      }\n  }\n}\nconst Selector = {\n  onWhiteSpace,\n  getNode\n};\nmodule.exports = Selector;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}