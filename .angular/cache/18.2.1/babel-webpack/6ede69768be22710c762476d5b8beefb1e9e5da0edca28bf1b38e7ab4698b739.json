{"ast":null,"code":"'use strict';\n\nconst types = require('../../tokenizer/types.cjs');\nconst name = 'PseudoElementSelector';\nconst walkContext = 'function';\nconst structure = {\n  name: String,\n  children: [['Raw'], null]\n};\n\n// :: [ <ident> | <function-token> <any-value>? ) ]\nfunction parse() {\n  const start = this.tokenStart;\n  let children = null;\n  let name;\n  let nameLowerCase;\n  this.eat(types.Colon);\n  this.eat(types.Colon);\n  if (this.tokenType === types.Function) {\n    name = this.consumeFunctionName();\n    nameLowerCase = name.toLowerCase();\n    if (hasOwnProperty.call(this.pseudo, nameLowerCase)) {\n      this.skipSC();\n      children = this.pseudo[nameLowerCase].call(this);\n      this.skipSC();\n    } else {\n      children = this.createList();\n      children.push(this.Raw(this.tokenIndex, null, false));\n    }\n    this.eat(types.RightParenthesis);\n  } else {\n    name = this.consume(types.Ident);\n  }\n  return {\n    type: 'PseudoElementSelector',\n    loc: this.getLocation(start, this.tokenStart),\n    name,\n    children\n  };\n}\nfunction generate(node) {\n  this.token(types.Colon, ':');\n  this.token(types.Colon, ':');\n  if (node.children === null) {\n    this.token(types.Ident, node.name);\n  } else {\n    this.token(types.Function, node.name + '(');\n    this.children(node);\n    this.token(types.RightParenthesis, ')');\n  }\n}\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\nexports.walkContext = walkContext;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}