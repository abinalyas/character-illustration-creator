{"ast":null,"code":"'use strict';\n\nconst cssTree = require('css-tree');\nconst utils = require('./utils.cjs');\n\n/*\n    At this step all rules has single simple selector. We try to join by equal\n    declaration blocks to first rule, e.g.\n\n    .a { color: red }\n    b { ... }\n    .b { color: red }\n    ->\n    .a, .b { color: red }\n    b { ... }\n*/\n\nfunction processRule(node, item, list) {\n  const selectors = node.prelude.children;\n  const declarations = node.block.children;\n  const nodeCompareMarker = selectors.first.compareMarker;\n  const skippedCompareMarkers = {};\n  list.nextUntil(item.next, function (next, nextItem) {\n    // skip non-ruleset node if safe\n    if (next.type !== 'Rule') {\n      return utils.unsafeToSkipNode.call(selectors, next);\n    }\n    if (node.pseudoSignature !== next.pseudoSignature) {\n      return true;\n    }\n    const nextFirstSelector = next.prelude.children.head;\n    const nextDeclarations = next.block.children;\n    const nextCompareMarker = nextFirstSelector.data.compareMarker;\n\n    // if next ruleset has same marked as one of skipped then stop joining\n    if (nextCompareMarker in skippedCompareMarkers) {\n      return true;\n    }\n\n    // try to join by selectors\n    if (selectors.head === selectors.tail) {\n      if (selectors.first.id === nextFirstSelector.data.id) {\n        declarations.appendList(nextDeclarations);\n        list.remove(nextItem);\n        return;\n      }\n    }\n\n    // try to join by properties\n    if (utils.isEqualDeclarations(declarations, nextDeclarations)) {\n      const nextStr = nextFirstSelector.data.id;\n      selectors.some((data, item) => {\n        const curStr = data.id;\n        if (nextStr < curStr) {\n          selectors.insert(nextFirstSelector, item);\n          return true;\n        }\n        if (!item.next) {\n          selectors.insert(nextFirstSelector);\n          return true;\n        }\n      });\n      list.remove(nextItem);\n      return;\n    }\n\n    // go to next ruleset if current one can be skipped (has no equal specificity nor element selector)\n    if (nextCompareMarker === nodeCompareMarker) {\n      return true;\n    }\n    skippedCompareMarkers[nextCompareMarker] = true;\n  });\n}\nfunction mergeRule(ast) {\n  cssTree.walk(ast, {\n    visit: 'Rule',\n    enter: processRule\n  });\n}\nmodule.exports = mergeRule;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}