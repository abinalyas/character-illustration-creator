{"ast":null,"code":"'use strict';\n\n/**\n * @typedef {import('../lib//types').PathDataItem} PathDataItem\n */\nconst {\n  collectStylesheet,\n  computeStyle\n} = require('../lib/style.js');\nconst {\n  visit\n} = require('../lib/xast.js');\nconst {\n  pathElems\n} = require('./_collections.js');\nconst {\n  path2js,\n  js2path\n} = require('./_path.js');\nconst {\n  applyTransforms\n} = require('./applyTransforms.js');\nconst {\n  cleanupOutData,\n  toFixed\n} = require('../lib/svgo/tools');\nexports.name = 'convertPathData';\nexports.description = 'optimizes path data: writes in shorter form, applies transformations';\n\n/** @type {(data: number[]) => number[]} */\nlet roundData;\n/** @type {number | false} */\nlet precision;\n/** @type {number} */\nlet error;\n/** @type {number} */\nlet arcThreshold;\n/** @type {number} */\nlet arcTolerance;\n\n/**\n * @typedef {{\n *   applyTransforms: boolean,\n *   applyTransformsStroked: boolean,\n *   makeArcs: {\n *     threshold: number,\n *     tolerance: number,\n *   },\n *   straightCurves: boolean,\n *   convertToQ: boolean,\n *   lineShorthands: boolean,\n *   convertToZ: boolean,\n *   curveSmoothShorthands: boolean,\n *   floatPrecision: number | false,\n *   transformPrecision: number,\n *   smartArcRounding: boolean,\n *   removeUseless: boolean,\n *   collapseRepeated: boolean,\n *   utilizeAbsolute: boolean,\n *   leadingZero: boolean,\n *   negativeExtraSpace: boolean,\n *   noSpaceAfterFlags: boolean,\n *   forceAbsolutePath: boolean,\n * }} InternalParams\n */\n\n/**\n * @typedef {[number, number]} Point\n */\n\n/**\n * @typedef {{\n *   center: Point,\n *   radius: number\n * }} Circle\n */\n\n/**\n * Convert absolute Path to relative,\n * collapse repeated instructions,\n * detect and convert Lineto shorthands,\n * remove useless instructions like \"l0,0\",\n * trim useless delimiters and leading zeros,\n * decrease accuracy of floating-point numbers.\n *\n * @see https://www.w3.org/TR/SVG11/paths.html#PathData\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'convertPathData'>}\n */\nexports.fn = (root, params) => {\n  const {\n    // TODO convert to separate plugin in v3\n    applyTransforms: _applyTransforms = true,\n    applyTransformsStroked = true,\n    makeArcs = {\n      threshold: 2.5,\n      // coefficient of rounding error\n      tolerance: 0.5 // percentage of radius\n    },\n    straightCurves = true,\n    convertToQ = true,\n    lineShorthands = true,\n    convertToZ = true,\n    curveSmoothShorthands = true,\n    floatPrecision = 3,\n    transformPrecision = 5,\n    smartArcRounding = true,\n    removeUseless = true,\n    collapseRepeated = true,\n    utilizeAbsolute = true,\n    leadingZero = true,\n    negativeExtraSpace = true,\n    noSpaceAfterFlags = false,\n    // a20 60 45 0 1 30 20 → a20 60 45 0130 20\n    forceAbsolutePath = false\n  } = params;\n\n  /**\n   * @type {InternalParams}\n   */\n  const newParams = {\n    applyTransforms: _applyTransforms,\n    applyTransformsStroked,\n    makeArcs,\n    straightCurves,\n    convertToQ,\n    lineShorthands,\n    convertToZ,\n    curveSmoothShorthands,\n    floatPrecision,\n    transformPrecision,\n    smartArcRounding,\n    removeUseless,\n    collapseRepeated,\n    utilizeAbsolute,\n    leadingZero,\n    negativeExtraSpace,\n    noSpaceAfterFlags,\n    forceAbsolutePath\n  };\n\n  // invoke applyTransforms plugin\n  if (_applyTransforms) {\n    visit(root,\n    // @ts-ignore\n    applyTransforms(root, {\n      transformPrecision,\n      applyTransformsStroked\n    }));\n  }\n  const stylesheet = collectStylesheet(root);\n  return {\n    element: {\n      enter: node => {\n        if (pathElems.has(node.name) && node.attributes.d != null) {\n          const computedStyle = computeStyle(stylesheet, node);\n          precision = floatPrecision;\n          error = precision !== false ? +Math.pow(0.1, precision).toFixed(precision) : 1e-2;\n          roundData = precision && precision > 0 && precision < 20 ? strongRound : round;\n          if (makeArcs) {\n            arcThreshold = makeArcs.threshold;\n            arcTolerance = makeArcs.tolerance;\n          }\n          const hasMarkerMid = computedStyle['marker-mid'] != null;\n          const maybeHasStroke = computedStyle.stroke && (computedStyle.stroke.type === 'dynamic' || computedStyle.stroke.value !== 'none');\n          const maybeHasLinecap = computedStyle['stroke-linecap'] && (computedStyle['stroke-linecap'].type === 'dynamic' || computedStyle['stroke-linecap'].value !== 'butt');\n          const maybeHasStrokeAndLinecap = maybeHasStroke && maybeHasLinecap;\n          const isSafeToUseZ = maybeHasStroke ? computedStyle['stroke-linecap']?.type === 'static' && computedStyle['stroke-linecap'].value === 'round' && computedStyle['stroke-linejoin']?.type === 'static' && computedStyle['stroke-linejoin'].value === 'round' : true;\n          var data = path2js(node);\n\n          // TODO: get rid of functions returns\n          if (data.length) {\n            convertToRelative(data);\n            data = filters(data, newParams, {\n              isSafeToUseZ,\n              maybeHasStrokeAndLinecap,\n              hasMarkerMid\n            });\n            if (utilizeAbsolute) {\n              data = convertToMixed(data, newParams);\n            }\n\n            // @ts-ignore\n            js2path(node, data, newParams);\n          }\n        }\n      }\n    }\n  };\n};\n\n/**\n * Convert absolute path data coordinates to relative.\n *\n * @type {(pathData: PathDataItem[]) => PathDataItem[]}\n */\nconst convertToRelative = pathData => {\n  let start = [0, 0];\n  let cursor = [0, 0];\n  let prevCoords = [0, 0];\n  for (let i = 0; i < pathData.length; i += 1) {\n    const pathItem = pathData[i];\n    let {\n      command,\n      args\n    } = pathItem;\n\n    // moveto (x y)\n    if (command === 'm') {\n      // update start and cursor\n      cursor[0] += args[0];\n      cursor[1] += args[1];\n      start[0] = cursor[0];\n      start[1] = cursor[1];\n    }\n    if (command === 'M') {\n      // M → m\n      // skip first moveto\n      if (i !== 0) {\n        command = 'm';\n      }\n      args[0] -= cursor[0];\n      args[1] -= cursor[1];\n      // update start and cursor\n      cursor[0] += args[0];\n      cursor[1] += args[1];\n      start[0] = cursor[0];\n      start[1] = cursor[1];\n    }\n\n    // lineto (x y)\n    if (command === 'l') {\n      cursor[0] += args[0];\n      cursor[1] += args[1];\n    }\n    if (command === 'L') {\n      // L → l\n      command = 'l';\n      args[0] -= cursor[0];\n      args[1] -= cursor[1];\n      cursor[0] += args[0];\n      cursor[1] += args[1];\n    }\n\n    // horizontal lineto (x)\n    if (command === 'h') {\n      cursor[0] += args[0];\n    }\n    if (command === 'H') {\n      // H → h\n      command = 'h';\n      args[0] -= cursor[0];\n      cursor[0] += args[0];\n    }\n\n    // vertical lineto (y)\n    if (command === 'v') {\n      cursor[1] += args[0];\n    }\n    if (command === 'V') {\n      // V → v\n      command = 'v';\n      args[0] -= cursor[1];\n      cursor[1] += args[0];\n    }\n\n    // curveto (x1 y1 x2 y2 x y)\n    if (command === 'c') {\n      cursor[0] += args[4];\n      cursor[1] += args[5];\n    }\n    if (command === 'C') {\n      // C → c\n      command = 'c';\n      args[0] -= cursor[0];\n      args[1] -= cursor[1];\n      args[2] -= cursor[0];\n      args[3] -= cursor[1];\n      args[4] -= cursor[0];\n      args[5] -= cursor[1];\n      cursor[0] += args[4];\n      cursor[1] += args[5];\n    }\n\n    // smooth curveto (x2 y2 x y)\n    if (command === 's') {\n      cursor[0] += args[2];\n      cursor[1] += args[3];\n    }\n    if (command === 'S') {\n      // S → s\n      command = 's';\n      args[0] -= cursor[0];\n      args[1] -= cursor[1];\n      args[2] -= cursor[0];\n      args[3] -= cursor[1];\n      cursor[0] += args[2];\n      cursor[1] += args[3];\n    }\n\n    // quadratic Bézier curveto (x1 y1 x y)\n    if (command === 'q') {\n      cursor[0] += args[2];\n      cursor[1] += args[3];\n    }\n    if (command === 'Q') {\n      // Q → q\n      command = 'q';\n      args[0] -= cursor[0];\n      args[1] -= cursor[1];\n      args[2] -= cursor[0];\n      args[3] -= cursor[1];\n      cursor[0] += args[2];\n      cursor[1] += args[3];\n    }\n\n    // smooth quadratic Bézier curveto (x y)\n    if (command === 't') {\n      cursor[0] += args[0];\n      cursor[1] += args[1];\n    }\n    if (command === 'T') {\n      // T → t\n      command = 't';\n      args[0] -= cursor[0];\n      args[1] -= cursor[1];\n      cursor[0] += args[0];\n      cursor[1] += args[1];\n    }\n\n    // elliptical arc (rx ry x-axis-rotation large-arc-flag sweep-flag x y)\n    if (command === 'a') {\n      cursor[0] += args[5];\n      cursor[1] += args[6];\n    }\n    if (command === 'A') {\n      // A → a\n      command = 'a';\n      args[5] -= cursor[0];\n      args[6] -= cursor[1];\n      cursor[0] += args[5];\n      cursor[1] += args[6];\n    }\n\n    // closepath\n    if (command === 'Z' || command === 'z') {\n      // reset cursor\n      cursor[0] = start[0];\n      cursor[1] = start[1];\n    }\n    pathItem.command = command;\n    pathItem.args = args;\n    // store absolute coordinates for later use\n    // base should preserve reference from other element\n    // @ts-ignore\n    pathItem.base = prevCoords;\n    // @ts-ignore\n    pathItem.coords = [cursor[0], cursor[1]];\n    // @ts-ignore\n    prevCoords = pathItem.coords;\n  }\n  return pathData;\n};\n\n/**\n * Main filters loop.\n *\n * @type {(\n *   path: PathDataItem[],\n *   params: InternalParams,\n *   aux: { isSafeToUseZ: boolean, maybeHasStrokeAndLinecap: boolean, hasMarkerMid: boolean }\n * ) => PathDataItem[]}\n */\nfunction filters(path, params, {\n  isSafeToUseZ,\n  maybeHasStrokeAndLinecap,\n  hasMarkerMid\n}) {\n  const stringify = data2Path.bind(null, params);\n  const relSubpoint = [0, 0];\n  const pathBase = [0, 0];\n  /** @type {any} */\n  let prev = {};\n  /** @type {Point | undefined} */\n  let prevQControlPoint;\n  path = path.filter(function (item, index, path) {\n    const qControlPoint = prevQControlPoint;\n    prevQControlPoint = undefined;\n    let command = item.command;\n    let data = item.args;\n    let next = path[index + 1];\n    if (command !== 'Z' && command !== 'z') {\n      var sdata = data,\n        circle;\n      if (command === 's') {\n        sdata = [0, 0].concat(data);\n        const pdata = prev.args;\n        const n = pdata.length;\n\n        // (-x, -y) of the prev tangent point relative to the current point\n        sdata[0] = pdata[n - 2] - pdata[n - 4];\n        sdata[1] = pdata[n - 1] - pdata[n - 3];\n      }\n\n      // convert curves to arcs if possible\n      if (params.makeArcs && (command == 'c' || command == 's') && isConvex(sdata) && (circle = findCircle(sdata))) {\n        var r = roundData([circle.radius])[0],\n          angle = findArcAngle(sdata, circle),\n          sweep = sdata[5] * sdata[0] - sdata[4] * sdata[1] > 0 ? 1 : 0,\n          /**\n           * @type {PathDataItem}\n           */\n          arc = {\n            command: 'a',\n            args: [r, r, 0, 0, sweep, sdata[4], sdata[5]],\n            // @ts-ignore\n            coords: item.coords.slice(),\n            // @ts-ignore\n            base: item.base\n          },\n          /**\n           * @type {PathDataItem[]}\n           */\n          output = [arc],\n          // relative coordinates to adjust the found circle\n          /**\n           * @type {Point}\n           */\n          relCenter = [circle.center[0] - sdata[4], circle.center[1] - sdata[5]],\n          relCircle = {\n            center: relCenter,\n            radius: circle.radius\n          },\n          arcCurves = [item],\n          hasPrev = 0,\n          suffix = '',\n          nextLonghand;\n        if (prev.command == 'c' && isConvex(prev.args) && isArcPrev(prev.args, circle) || prev.command == 'a' && prev.sdata && isArcPrev(prev.sdata, circle)) {\n          arcCurves.unshift(prev);\n          // @ts-ignore\n          arc.base = prev.base;\n          // @ts-ignore\n          arc.args[5] = arc.coords[0] - arc.base[0];\n          // @ts-ignore\n          arc.args[6] = arc.coords[1] - arc.base[1];\n          var prevData = prev.command == 'a' ? prev.sdata : prev.args;\n          var prevAngle = findArcAngle(prevData, {\n            center: [prevData[4] + circle.center[0], prevData[5] + circle.center[1]],\n            radius: circle.radius\n          });\n          angle += prevAngle;\n          if (angle > Math.PI) arc.args[3] = 1;\n          hasPrev = 1;\n        }\n\n        // check if next curves are fitting the arc\n        for (var j = index; (next = path[++j]) && (next.command === 'c' || next.command === 's');) {\n          var nextData = next.args;\n          if (next.command == 's') {\n            nextLonghand = makeLonghand({\n              command: 's',\n              args: next.args.slice()\n            }, path[j - 1].args);\n            nextData = nextLonghand.args;\n            nextLonghand.args = nextData.slice(0, 2);\n            suffix = stringify([nextLonghand]);\n          }\n          if (isConvex(nextData) && isArc(nextData, relCircle)) {\n            angle += findArcAngle(nextData, relCircle);\n            if (angle - 2 * Math.PI > 1e-3) break; // more than 360°\n            if (angle > Math.PI) arc.args[3] = 1;\n            arcCurves.push(next);\n            if (2 * Math.PI - angle > 1e-3) {\n              // less than 360°\n              // @ts-ignore\n              arc.coords = next.coords;\n              // @ts-ignore\n              arc.args[5] = arc.coords[0] - arc.base[0];\n              // @ts-ignore\n              arc.args[6] = arc.coords[1] - arc.base[1];\n            } else {\n              // full circle, make a half-circle arc and add a second one\n              arc.args[5] = 2 * (relCircle.center[0] - nextData[4]);\n              arc.args[6] = 2 * (relCircle.center[1] - nextData[5]);\n              // @ts-ignore\n              arc.coords = [\n              // @ts-ignore\n              arc.base[0] + arc.args[5],\n              // @ts-ignore\n              arc.base[1] + arc.args[6]];\n              arc = {\n                command: 'a',\n                args: [r, r, 0, 0, sweep,\n                // @ts-ignore\n                next.coords[0] - arc.coords[0],\n                // @ts-ignore\n                next.coords[1] - arc.coords[1]],\n                // @ts-ignore\n                coords: next.coords,\n                // @ts-ignore\n                base: arc.coords\n              };\n              output.push(arc);\n              j++;\n              break;\n            }\n            relCenter[0] -= nextData[4];\n            relCenter[1] -= nextData[5];\n          } else break;\n        }\n        if ((stringify(output) + suffix).length < stringify(arcCurves).length) {\n          if (path[j] && path[j].command == 's') {\n            makeLonghand(path[j], path[j - 1].args);\n          }\n          if (hasPrev) {\n            var prevArc = output.shift();\n            // @ts-ignore\n            roundData(prevArc.args);\n            // @ts-ignore\n            relSubpoint[0] += prevArc.args[5] - prev.args[prev.args.length - 2];\n            // @ts-ignore\n            relSubpoint[1] += prevArc.args[6] - prev.args[prev.args.length - 1];\n            prev.command = 'a';\n            // @ts-ignore\n            prev.args = prevArc.args;\n            // @ts-ignore\n            item.base = prev.coords = prevArc.coords;\n          }\n          // @ts-ignore\n          arc = output.shift();\n          if (arcCurves.length == 1) {\n            // @ts-ignore\n            item.sdata = sdata.slice(); // preserve curve data for future checks\n          } else if (arcCurves.length - 1 - hasPrev > 0) {\n            // filter out consumed next items\n            path.splice(index + 1, arcCurves.length - 1 - hasPrev, ...output);\n          }\n          if (!arc) return false;\n          command = 'a';\n          data = arc.args;\n          // @ts-ignore\n          item.coords = arc.coords;\n        }\n      }\n\n      // Rounding relative coordinates, taking in account accumulating error\n      // to get closer to absolute coordinates. Sum of rounded value remains same:\n      // l .25 3 .25 2 .25 3 .25 2 -> l .3 3 .2 2 .3 3 .2 2\n      if (precision !== false) {\n        if (command === 'm' || command === 'l' || command === 't' || command === 'q' || command === 's' || command === 'c') {\n          for (var i = data.length; i--;) {\n            // @ts-ignore\n            data[i] += item.base[i % 2] - relSubpoint[i % 2];\n          }\n        } else if (command == 'h') {\n          // @ts-ignore\n          data[0] += item.base[0] - relSubpoint[0];\n        } else if (command == 'v') {\n          // @ts-ignore\n          data[0] += item.base[1] - relSubpoint[1];\n        } else if (command == 'a') {\n          // @ts-ignore\n          data[5] += item.base[0] - relSubpoint[0];\n          // @ts-ignore\n          data[6] += item.base[1] - relSubpoint[1];\n        }\n        roundData(data);\n        if (command == 'h') relSubpoint[0] += data[0];else if (command == 'v') relSubpoint[1] += data[0];else {\n          relSubpoint[0] += data[data.length - 2];\n          relSubpoint[1] += data[data.length - 1];\n        }\n        roundData(relSubpoint);\n        if (command === 'M' || command === 'm') {\n          pathBase[0] = relSubpoint[0];\n          pathBase[1] = relSubpoint[1];\n        }\n      }\n\n      // round arc radius more accurately\n      // eg m 0 0 a 1234.567 1234.567 0 0 1 10 0 -> m 0 0 a 1235 1235 0 0 1 10 0\n      const sagitta = command === 'a' ? calculateSagitta(data) : undefined;\n      if (params.smartArcRounding && sagitta !== undefined && precision) {\n        for (let precisionNew = precision; precisionNew >= 0; precisionNew--) {\n          const radius = toFixed(data[0], precisionNew);\n          const sagittaNew = /** @type {number} */\n          calculateSagitta([radius, radius, ...data.slice(2)]);\n          if (Math.abs(sagitta - sagittaNew) < error) {\n            data[0] = radius;\n            data[1] = radius;\n          } else {\n            break;\n          }\n        }\n      }\n\n      // convert straight curves into lines segments\n      if (params.straightCurves) {\n        if (command === 'c' && isCurveStraightLine(data) || command === 's' && isCurveStraightLine(sdata)) {\n          if (next && next.command == 's') makeLonghand(next, data); // fix up next curve\n          command = 'l';\n          data = data.slice(-2);\n        } else if (command === 'q' && isCurveStraightLine(data)) {\n          if (next && next.command == 't') makeLonghand(next, data); // fix up next curve\n          command = 'l';\n          data = data.slice(-2);\n        } else if (command === 't' && prev.command !== 'q' && prev.command !== 't') {\n          command = 'l';\n          data = data.slice(-2);\n        } else if (command === 'a' && (data[0] === 0 || data[1] === 0 || sagitta !== undefined && sagitta < error)) {\n          command = 'l';\n          data = data.slice(-2);\n        }\n      }\n\n      // degree-lower c to q when possible\n      // m 0 12 C 4 4 8 4 12 12 → M 0 12 Q 6 0 12 12\n      if (params.convertToQ && command == 'c') {\n        const x1 =\n        // @ts-ignore\n        0.75 * (item.base[0] + data[0]) - 0.25 * item.base[0];\n        const x2 =\n        // @ts-ignore\n        0.75 * (item.base[0] + data[2]) - 0.25 * (item.base[0] + data[4]);\n        if (Math.abs(x1 - x2) < error * 2) {\n          const y1 =\n          // @ts-ignore\n          0.75 * (item.base[1] + data[1]) - 0.25 * item.base[1];\n          const y2 =\n          // @ts-ignore\n          0.75 * (item.base[1] + data[3]) - 0.25 * (item.base[1] + data[5]);\n          if (Math.abs(y1 - y2) < error * 2) {\n            const newData = data.slice();\n            newData.splice(0, 4,\n            // @ts-ignore\n            x1 + x2 - item.base[0],\n            // @ts-ignore\n            y1 + y2 - item.base[1]);\n            roundData(newData);\n            const originalLength = cleanupOutData(data, params).length,\n              newLength = cleanupOutData(newData, params).length;\n            if (newLength < originalLength) {\n              command = 'q';\n              data = newData;\n              if (next && next.command == 's') makeLonghand(next, data); // fix up next curve\n            }\n          }\n        }\n      }\n\n      // horizontal and vertical line shorthands\n      // l 50 0 → h 50\n      // l 0 50 → v 50\n      if (params.lineShorthands && command === 'l') {\n        if (data[1] === 0) {\n          command = 'h';\n          data.pop();\n        } else if (data[0] === 0) {\n          command = 'v';\n          data.shift();\n        }\n      }\n\n      // collapse repeated commands\n      // h 20 h 30 -> h 50\n      if (params.collapseRepeated && hasMarkerMid === false && (command === 'm' || command === 'h' || command === 'v') && prev.command && command == prev.command.toLowerCase() && (command != 'h' && command != 'v' || prev.args[0] >= 0 == data[0] >= 0)) {\n        prev.args[0] += data[0];\n        if (command != 'h' && command != 'v') {\n          prev.args[1] += data[1];\n        }\n        // @ts-ignore\n        prev.coords = item.coords;\n        path[index] = prev;\n        return false;\n      }\n\n      // convert curves into smooth shorthands\n      if (params.curveSmoothShorthands && prev.command) {\n        // curveto\n        if (command === 'c') {\n          // c + c → c + s\n          if (prev.command === 'c' && Math.abs(data[0] - -(prev.args[2] - prev.args[4])) < error && Math.abs(data[1] - -(prev.args[3] - prev.args[5])) < error) {\n            command = 's';\n            data = data.slice(2);\n          }\n\n          // s + c → s + s\n          else if (prev.command === 's' && Math.abs(data[0] - -(prev.args[0] - prev.args[2])) < error && Math.abs(data[1] - -(prev.args[1] - prev.args[3])) < error) {\n            command = 's';\n            data = data.slice(2);\n          }\n\n          // [^cs] + c → [^cs] + s\n          else if (prev.command !== 'c' && prev.command !== 's' && Math.abs(data[0]) < error && Math.abs(data[1]) < error) {\n            command = 's';\n            data = data.slice(2);\n          }\n        }\n\n        // quadratic Bézier curveto\n        else if (command === 'q') {\n          // q + q → q + t\n          if (prev.command === 'q' && Math.abs(data[0] - (prev.args[2] - prev.args[0])) < error && Math.abs(data[1] - (prev.args[3] - prev.args[1])) < error) {\n            command = 't';\n            data = data.slice(2);\n          }\n\n          // t + q → t + t\n          else if (prev.command === 't') {\n            const predictedControlPoint = reflectPoint(\n            // @ts-ignore\n            qControlPoint,\n            // @ts-ignore\n            item.base);\n            const realControlPoint = [\n            // @ts-ignore\n            data[0] + item.base[0],\n            // @ts-ignore\n            data[1] + item.base[1]];\n            if (Math.abs(predictedControlPoint[0] - realControlPoint[0]) < error && Math.abs(predictedControlPoint[1] - realControlPoint[1]) < error) {\n              command = 't';\n              data = data.slice(2);\n            }\n          }\n        }\n      }\n\n      // remove useless non-first path segments\n      if (params.removeUseless && !maybeHasStrokeAndLinecap) {\n        // l 0,0 / h 0 / v 0 / q 0,0 0,0 / t 0,0 / c 0,0 0,0 0,0 / s 0,0 0,0\n        if ((command === 'l' || command === 'h' || command === 'v' || command === 'q' || command === 't' || command === 'c' || command === 's') && data.every(function (i) {\n          return i === 0;\n        })) {\n          path[index] = prev;\n          return false;\n        }\n\n        // a 25,25 -30 0,1 0,0\n        if (command === 'a' && data[5] === 0 && data[6] === 0) {\n          path[index] = prev;\n          return false;\n        }\n      }\n\n      // convert going home to z\n      // m 0 0 h 5 v 5 l -5 -5 -> m 0 0 h 5 v 5 z\n      if (params.convertToZ && (isSafeToUseZ || next?.command === 'Z' || next?.command === 'z') && (command === 'l' || command === 'h' || command === 'v')) {\n        if (\n        // @ts-ignore\n        Math.abs(pathBase[0] - item.coords[0]) < error &&\n        // @ts-ignore\n        Math.abs(pathBase[1] - item.coords[1]) < error) {\n          command = 'z';\n          data = [];\n        }\n      }\n      item.command = command;\n      item.args = data;\n    } else {\n      // z resets coordinates\n      relSubpoint[0] = pathBase[0];\n      relSubpoint[1] = pathBase[1];\n      if (prev.command === 'Z' || prev.command === 'z') return false;\n    }\n    if ((command === 'Z' || command === 'z') && params.removeUseless && isSafeToUseZ &&\n    // @ts-ignore\n    Math.abs(item.base[0] - item.coords[0]) < error / 10 &&\n    // @ts-ignore\n    Math.abs(item.base[1] - item.coords[1]) < error / 10) return false;\n    if (command === 'q') {\n      // @ts-ignore\n      prevQControlPoint = [data[0] + item.base[0], data[1] + item.base[1]];\n    } else if (command === 't') {\n      if (qControlPoint) {\n        // @ts-ignore\n        prevQControlPoint = reflectPoint(qControlPoint, item.base);\n      } else {\n        // @ts-ignore\n        prevQControlPoint = item.coords;\n      }\n    }\n    prev = item;\n    return true;\n  });\n  return path;\n}\n\n/**\n * Writes data in shortest form using absolute or relative coordinates.\n *\n * @type {(path: PathDataItem[], params: InternalParams) => PathDataItem[]}\n */\nfunction convertToMixed(path, params) {\n  var prev = path[0];\n  path = path.filter(function (item, index) {\n    if (index == 0) return true;\n    if (item.command === 'Z' || item.command === 'z') {\n      prev = item;\n      return true;\n    }\n    var command = item.command,\n      data = item.args,\n      adata = data.slice(),\n      rdata = data.slice();\n    if (command === 'm' || command === 'l' || command === 't' || command === 'q' || command === 's' || command === 'c') {\n      for (var i = adata.length; i--;) {\n        // @ts-ignore\n        adata[i] += item.base[i % 2];\n      }\n    } else if (command == 'h') {\n      // @ts-ignore\n      adata[0] += item.base[0];\n    } else if (command == 'v') {\n      // @ts-ignore\n      adata[0] += item.base[1];\n    } else if (command == 'a') {\n      // @ts-ignore\n      adata[5] += item.base[0];\n      // @ts-ignore\n      adata[6] += item.base[1];\n    }\n    roundData(adata);\n    roundData(rdata);\n    var absoluteDataStr = cleanupOutData(adata, params),\n      relativeDataStr = cleanupOutData(rdata, params);\n\n    // Convert to absolute coordinates if it's shorter or forceAbsolutePath is true.\n    // v-20 -> V0\n    // Don't convert if it fits following previous command.\n    // l20 30-10-50 instead of l20 30L20 30\n    if (params.forceAbsolutePath || absoluteDataStr.length < relativeDataStr.length && !(params.negativeExtraSpace && command == prev.command && prev.command.charCodeAt(0) > 96 && absoluteDataStr.length == relativeDataStr.length - 1 && (data[0] < 0 || Math.floor(data[0]) === 0 && !Number.isInteger(data[0]) && prev.args[prev.args.length - 1] % 1))) {\n      // @ts-ignore\n      item.command = command.toUpperCase();\n      item.args = adata;\n    }\n    prev = item;\n    return true;\n  });\n  return path;\n}\n\n/**\n * Checks if curve is convex. Control points of such a curve must form\n * a convex quadrilateral with diagonals crosspoint inside of it.\n *\n * @type {(data: number[]) => boolean}\n */\nfunction isConvex(data) {\n  var center = getIntersection([0, 0, data[2], data[3], data[0], data[1], data[4], data[5]]);\n  return center != null && data[2] < center[0] == center[0] < 0 && data[3] < center[1] == center[1] < 0 && data[4] < center[0] == center[0] < data[0] && data[5] < center[1] == center[1] < data[1];\n}\n\n/**\n * Computes lines equations by two points and returns their intersection point.\n *\n * @type {(coords: number[]) => undefined | Point}\n */\nfunction getIntersection(coords) {\n  // Prev line equation parameters.\n  var a1 = coords[1] - coords[3],\n    // y1 - y2\n    b1 = coords[2] - coords[0],\n    // x2 - x1\n    c1 = coords[0] * coords[3] - coords[2] * coords[1],\n    // x1 * y2 - x2 * y1\n    // Next line equation parameters\n    a2 = coords[5] - coords[7],\n    // y1 - y2\n    b2 = coords[6] - coords[4],\n    // x2 - x1\n    c2 = coords[4] * coords[7] - coords[5] * coords[6],\n    // x1 * y2 - x2 * y1\n    denom = a1 * b2 - a2 * b1;\n  if (!denom) return; // parallel lines haven't an intersection\n\n  /**\n   * @type {Point}\n   */\n  var cross = [(b1 * c2 - b2 * c1) / denom, (a1 * c2 - a2 * c1) / -denom];\n  if (!isNaN(cross[0]) && !isNaN(cross[1]) && isFinite(cross[0]) && isFinite(cross[1])) {\n    return cross;\n  }\n}\n\n/**\n * Decrease accuracy of floating-point numbers\n * in path data keeping a specified number of decimals.\n * Smart rounds values like 2.3491 to 2.35 instead of 2.349.\n * Doesn't apply \"smartness\" if the number precision fits already.\n *\n * @type {(data: number[]) => number[]}\n */\nfunction strongRound(data) {\n  const precisionNum = precision || 0;\n  for (let i = data.length; i-- > 0;) {\n    const fixed = toFixed(data[i], precisionNum);\n    if (fixed !== data[i]) {\n      const rounded = toFixed(data[i], precisionNum - 1);\n      data[i] = toFixed(Math.abs(rounded - data[i]), precisionNum + 1) >= error ? fixed : rounded;\n    }\n  }\n  return data;\n}\n\n/**\n * Simple rounding function if precision is 0.\n *\n * @type {(data: number[]) => number[]}\n */\nfunction round(data) {\n  for (var i = data.length; i-- > 0;) {\n    data[i] = Math.round(data[i]);\n  }\n  return data;\n}\n\n/**\n * Checks if a curve is a straight line by measuring distance\n * from middle points to the line formed by end points.\n *\n * @type {(data: number[]) => boolean}\n */\nfunction isCurveStraightLine(data) {\n  // Get line equation a·x + b·y + c = 0 coefficients a, b (c = 0) by start and end points.\n  var i = data.length - 2,\n    a = -data[i + 1],\n    // y1 − y2 (y1 = 0)\n    b = data[i],\n    // x2 − x1 (x1 = 0)\n    d = 1 / (a * a + b * b); // same part for all points\n\n  if (i <= 1 || !isFinite(d)) return false; // curve that ends at start point isn't the case\n\n  // Distance from point (x0, y0) to the line is sqrt((c − a·x0 − b·y0)² / (a² + b²))\n  while ((i -= 2) >= 0) {\n    if (Math.sqrt(Math.pow(a * data[i] + b * data[i + 1], 2) * d) > error) return false;\n  }\n  return true;\n}\n\n/**\n * Calculates the sagitta of an arc if possible.\n *\n * @type {(data: number[]) => number | undefined}\n * @see https://wikipedia.org/wiki/Sagitta_(geometry)#Formulas\n */\nfunction calculateSagitta(data) {\n  if (data[3] === 1) return undefined;\n  const [rx, ry] = data;\n  if (Math.abs(rx - ry) > error) return undefined;\n  const chord = Math.sqrt(data[5] ** 2 + data[6] ** 2);\n  if (chord > rx * 2) return undefined;\n  return rx - Math.sqrt(rx ** 2 - 0.25 * chord ** 2);\n}\n\n/**\n * Converts next curve from shorthand to full form using the current curve data.\n *\n * @type {(item: PathDataItem, data: number[]) => PathDataItem}\n */\nfunction makeLonghand(item, data) {\n  switch (item.command) {\n    case 's':\n      item.command = 'c';\n      break;\n    case 't':\n      item.command = 'q';\n      break;\n  }\n  item.args.unshift(data[data.length - 2] - data[data.length - 4], data[data.length - 1] - data[data.length - 3]);\n  return item;\n}\n\n/**\n * Returns distance between two points\n *\n * @type {(point1: Point, point2: Point) => number}\n */\nfunction getDistance(point1, point2) {\n  return Math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2);\n}\n\n/**\n * Reflects point across another point.\n *\n * @param {Point} controlPoint\n * @param {Point} base\n * @returns {Point}\n */\nfunction reflectPoint(controlPoint, base) {\n  return [2 * base[0] - controlPoint[0], 2 * base[1] - controlPoint[1]];\n}\n\n/**\n * Returns coordinates of the curve point corresponding to the certain t\n * a·(1 - t)³·p1 + b·(1 - t)²·t·p2 + c·(1 - t)·t²·p3 + d·t³·p4,\n * where pN are control points and p1 is zero due to relative coordinates.\n *\n * @type {(curve: number[], t: number) => Point}\n */\nfunction getCubicBezierPoint(curve, t) {\n  var sqrT = t * t,\n    cubT = sqrT * t,\n    mt = 1 - t,\n    sqrMt = mt * mt;\n  return [3 * sqrMt * t * curve[0] + 3 * mt * sqrT * curve[2] + cubT * curve[4], 3 * sqrMt * t * curve[1] + 3 * mt * sqrT * curve[3] + cubT * curve[5]];\n}\n\n/**\n * Finds circle by 3 points of the curve and checks if the curve fits the found circle.\n *\n * @type {(curve: number[]) => undefined | Circle}\n */\nfunction findCircle(curve) {\n  var midPoint = getCubicBezierPoint(curve, 1 / 2),\n    m1 = [midPoint[0] / 2, midPoint[1] / 2],\n    m2 = [(midPoint[0] + curve[4]) / 2, (midPoint[1] + curve[5]) / 2],\n    center = getIntersection([m1[0], m1[1], m1[0] + m1[1], m1[1] - m1[0], m2[0], m2[1], m2[0] + (m2[1] - midPoint[1]), m2[1] - (m2[0] - midPoint[0])]),\n    radius = center && getDistance([0, 0], center),\n    // @ts-ignore\n    tolerance = Math.min(arcThreshold * error, arcTolerance * radius / 100);\n  if (center &&\n  // @ts-ignore\n  radius < 1e15 && [1 / 4, 3 / 4].every(function (point) {\n    return Math.abs(\n    // @ts-ignore\n    getDistance(getCubicBezierPoint(curve, point), center) - radius) <= tolerance;\n  }))\n    // @ts-ignore\n    return {\n      center: center,\n      radius: radius\n    };\n}\n\n/**\n * Checks if a curve fits the given circle.\n *\n * @type {(curve: number[], circle: Circle) => boolean}\n */\nfunction isArc(curve, circle) {\n  var tolerance = Math.min(arcThreshold * error, arcTolerance * circle.radius / 100);\n  return [0, 1 / 4, 1 / 2, 3 / 4, 1].every(function (point) {\n    return Math.abs(getDistance(getCubicBezierPoint(curve, point), circle.center) - circle.radius) <= tolerance;\n  });\n}\n\n/**\n * Checks if a previous curve fits the given circle.\n *\n * @type {(curve: number[], circle: Circle) => boolean}\n */\nfunction isArcPrev(curve, circle) {\n  return isArc(curve, {\n    center: [circle.center[0] + curve[4], circle.center[1] + curve[5]],\n    radius: circle.radius\n  });\n}\n\n/**\n * Finds angle of a curve fitting the given arc.\n\n * @type {(curve: number[], relCircle: Circle) => number}\n */\nfunction findArcAngle(curve, relCircle) {\n  var x1 = -relCircle.center[0],\n    y1 = -relCircle.center[1],\n    x2 = curve[4] - relCircle.center[0],\n    y2 = curve[5] - relCircle.center[1];\n  return Math.acos((x1 * x2 + y1 * y2) / Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2)));\n}\n\n/**\n * Converts given path data to string.\n *\n * @type {(params: InternalParams, pathData: PathDataItem[]) => string}\n */\nfunction data2Path(params, pathData) {\n  return pathData.reduce(function (pathString, item) {\n    var strData = '';\n    if (item.args) {\n      strData = cleanupOutData(roundData(item.args.slice()), params);\n    }\n    return pathString + item.command + strData;\n  }, '');\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}