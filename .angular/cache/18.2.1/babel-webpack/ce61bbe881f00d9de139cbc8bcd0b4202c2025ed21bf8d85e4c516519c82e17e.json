{"ast":null,"code":"'use strict';\n\nconst adoptBuffer = require('./adopt-buffer.cjs');\nconst charCodeDefinitions = require('./char-code-definitions.cjs');\nconst N = 10;\nconst F = 12;\nconst R = 13;\nfunction computeLinesAndColumns(host) {\n  const source = host.source;\n  const sourceLength = source.length;\n  const startOffset = source.length > 0 ? charCodeDefinitions.isBOM(source.charCodeAt(0)) : 0;\n  const lines = adoptBuffer.adoptBuffer(host.lines, sourceLength);\n  const columns = adoptBuffer.adoptBuffer(host.columns, sourceLength);\n  let line = host.startLine;\n  let column = host.startColumn;\n  for (let i = startOffset; i < sourceLength; i++) {\n    const code = source.charCodeAt(i);\n    lines[i] = line;\n    columns[i] = column++;\n    if (code === N || code === R || code === F) {\n      if (code === R && i + 1 < sourceLength && source.charCodeAt(i + 1) === N) {\n        i++;\n        lines[i] = line;\n        columns[i] = column;\n      }\n      line++;\n      column = 1;\n    }\n  }\n  lines[sourceLength] = line;\n  columns[sourceLength] = column;\n  host.lines = lines;\n  host.columns = columns;\n  host.computed = true;\n}\nclass OffsetToLocation {\n  constructor() {\n    this.lines = null;\n    this.columns = null;\n    this.computed = false;\n  }\n  setSource(source, startOffset = 0, startLine = 1, startColumn = 1) {\n    this.source = source;\n    this.startOffset = startOffset;\n    this.startLine = startLine;\n    this.startColumn = startColumn;\n    this.computed = false;\n  }\n  getLocation(offset, filename) {\n    if (!this.computed) {\n      computeLinesAndColumns(this);\n    }\n    return {\n      source: filename,\n      offset: this.startOffset + offset,\n      line: this.lines[offset],\n      column: this.columns[offset]\n    };\n  }\n  getLocationRange(start, end, filename) {\n    if (!this.computed) {\n      computeLinesAndColumns(this);\n    }\n    return {\n      source: filename,\n      start: {\n        offset: this.startOffset + start,\n        line: this.lines[start],\n        column: this.columns[start]\n      },\n      end: {\n        offset: this.startOffset + end,\n        line: this.lines[end],\n        column: this.columns[end]\n      }\n    };\n  }\n}\nexports.OffsetToLocation = OffsetToLocation;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}