{"ast":null,"code":"'use strict';\n\nconst {\n  parseSvg\n} = require('./parser.js');\nconst {\n  stringifySvg\n} = require('./stringifier.js');\nconst {\n  builtin\n} = require('./builtin.js');\nconst {\n  invokePlugins\n} = require('./svgo/plugins.js');\nconst {\n  encodeSVGDatauri\n} = require('./svgo/tools.js');\nconst pluginsMap = {};\nfor (const plugin of builtin) {\n  pluginsMap[plugin.name] = plugin;\n}\nconst resolvePluginConfig = plugin => {\n  if (typeof plugin === 'string') {\n    // resolve builtin plugin specified as string\n    const builtinPlugin = pluginsMap[plugin];\n    if (builtinPlugin == null) {\n      throw Error(`Unknown builtin plugin \"${plugin}\" specified.`);\n    }\n    return {\n      name: plugin,\n      params: {},\n      fn: builtinPlugin.fn\n    };\n  }\n  if (typeof plugin === 'object' && plugin != null) {\n    if (plugin.name == null) {\n      throw Error(`Plugin name should be specified`);\n    }\n    // use custom plugin implementation\n    let fn = plugin.fn;\n    if (fn == null) {\n      // resolve builtin plugin implementation\n      const builtinPlugin = pluginsMap[plugin.name];\n      if (builtinPlugin == null) {\n        throw Error(`Unknown builtin plugin \"${plugin.name}\" specified.`);\n      }\n      fn = builtinPlugin.fn;\n    }\n    return {\n      name: plugin.name,\n      params: plugin.params,\n      fn\n    };\n  }\n  return null;\n};\nconst optimize = (input, config) => {\n  if (config == null) {\n    config = {};\n  }\n  if (typeof config !== 'object') {\n    throw Error('Config should be an object');\n  }\n  const maxPassCount = config.multipass ? 10 : 1;\n  let prevResultSize = Number.POSITIVE_INFINITY;\n  let output = '';\n  const info = {};\n  if (config.path != null) {\n    info.path = config.path;\n  }\n  for (let i = 0; i < maxPassCount; i += 1) {\n    info.multipassCount = i;\n    const ast = parseSvg(input, config.path);\n    const plugins = config.plugins || ['preset-default'];\n    if (!Array.isArray(plugins)) {\n      throw Error('malformed config, `plugins` property must be an array.\\nSee more info here: https://github.com/svg/svgo#configuration');\n    }\n    const resolvedPlugins = plugins.filter(plugin => plugin != null).map(resolvePluginConfig);\n    if (resolvedPlugins.length < plugins.length) {\n      console.warn('Warning: plugins list includes null or undefined elements, these will be ignored.');\n    }\n    const globalOverrides = {};\n    if (config.floatPrecision != null) {\n      globalOverrides.floatPrecision = config.floatPrecision;\n    }\n    invokePlugins(ast, info, resolvedPlugins, null, globalOverrides);\n    output = stringifySvg(ast, config.js2svg);\n    if (output.length < prevResultSize) {\n      input = output;\n      prevResultSize = output.length;\n    } else {\n      break;\n    }\n  }\n  if (config.datauri) {\n    output = encodeSVGDatauri(output, config.datauri);\n  }\n  return {\n    data: output\n  };\n};\nexports.optimize = optimize;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}