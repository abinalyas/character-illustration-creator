{"ast":null,"code":"'use strict';\n\nconst cssTree = require('css-tree');\nconst {\n  hasOwnProperty\n} = Object.prototype;\nfunction addRuleToMap(map, item, list, single) {\n  const node = item.data;\n  const name = cssTree.keyword(node.name).basename;\n  const id = node.name.toLowerCase() + '/' + (node.prelude ? node.prelude.id : null);\n  if (!hasOwnProperty.call(map, name)) {\n    map[name] = Object.create(null);\n  }\n  if (single) {\n    delete map[name][id];\n  }\n  if (!hasOwnProperty.call(map[name], id)) {\n    map[name][id] = new cssTree.List();\n  }\n  map[name][id].append(list.remove(item));\n}\nfunction relocateAtrules(ast, options) {\n  const collected = Object.create(null);\n  let topInjectPoint = null;\n  ast.children.forEach(function (node, item, list) {\n    if (node.type === 'Atrule') {\n      const name = cssTree.keyword(node.name).basename;\n      switch (name) {\n        case 'keyframes':\n          addRuleToMap(collected, item, list, true);\n          return;\n        case 'media':\n          if (options.forceMediaMerge) {\n            addRuleToMap(collected, item, list, false);\n            return;\n          }\n          break;\n      }\n      if (topInjectPoint === null && name !== 'charset' && name !== 'import') {\n        topInjectPoint = item;\n      }\n    } else {\n      if (topInjectPoint === null) {\n        topInjectPoint = item;\n      }\n    }\n  });\n  for (const atrule in collected) {\n    for (const id in collected[atrule]) {\n      ast.children.insertList(collected[atrule][id], atrule === 'media' ? null : topInjectPoint);\n    }\n  }\n}\nfunction isMediaRule(node) {\n  return node.type === 'Atrule' && node.name === 'media';\n}\nfunction processAtrule(node, item, list) {\n  if (!isMediaRule(node)) {\n    return;\n  }\n  const prev = item.prev && item.prev.data;\n  if (!prev || !isMediaRule(prev)) {\n    return;\n  }\n\n  // merge @media with same query\n  if (node.prelude && prev.prelude && node.prelude.id === prev.prelude.id) {\n    prev.block.children.appendList(node.block.children);\n    list.remove(item);\n\n    // TODO: use it when we can refer to several points in source\n    // prev.loc = {\n    //     primary: prev.loc,\n    //     merged: node.loc\n    // };\n  }\n}\nfunction rejoinAtrule(ast, options) {\n  relocateAtrules(ast, options);\n  cssTree.walk(ast, {\n    visit: 'Atrule',\n    reverse: true,\n    enter: processAtrule\n  });\n}\nmodule.exports = rejoinAtrule;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}