{"ast":null,"code":"'use strict';\n\nexports.name = 'removeAttrs';\nexports.description = 'removes specified attributes';\nconst DEFAULT_SEPARATOR = ':';\nconst ENOATTRS = `Warning: The plugin \"removeAttrs\" requires the \"attrs\" parameter.\nIt should have a pattern to remove, otherwise the plugin is a noop.\nConfig example:\n\nplugins: [\n  {\n    name: \"removeAttrs\",\n    params: {\n      attrs: \"(fill|stroke)\"\n    }\n  }\n]\n`;\n\n/**\n * Remove attributes\n *\n * @example elemSeparator\n *   format: string\n *\n * @example preserveCurrentColor\n *   format: boolean\n *\n * @example attrs:\n *\n *   format: [ element* : attribute* : value* ]\n *\n *   element   : regexp (wrapped into ^...$), single * or omitted > all elements (must be present when value is used)\n *   attribute : regexp (wrapped into ^...$)\n *   value     : regexp (wrapped into ^...$), single * or omitted > all values\n *\n *   examples:\n *\n *     > basic: remove fill attribute\n *     ---\n *     removeAttrs:\n *       attrs: 'fill'\n *\n *     > remove fill attribute on path element\n *     ---\n *       attrs: 'path:fill'\n *\n *     > remove fill attribute on path element where value is none\n *     ---\n *       attrs: 'path:fill:none'\n *\n *\n *     > remove all fill and stroke attribute\n *     ---\n *       attrs:\n *         - 'fill'\n *         - 'stroke'\n *\n *     [is same as]\n *\n *       attrs: '(fill|stroke)'\n *\n *     [is same as]\n *\n *       attrs: '*:(fill|stroke)'\n *\n *     [is same as]\n *\n *       attrs: '.*:(fill|stroke)'\n *\n *     [is same as]\n *\n *       attrs: '.*:(fill|stroke):.*'\n *\n *\n *     > remove all stroke related attributes\n *     ----\n *     attrs: 'stroke.*'\n *\n *\n * @author Benny Schudel\n *\n * @type {import('./plugins-types').Plugin<'removeAttrs'>}\n */\nexports.fn = (root, params) => {\n  if (typeof params.attrs == 'undefined') {\n    console.warn(ENOATTRS);\n    return null;\n  }\n  const elemSeparator = typeof params.elemSeparator == 'string' ? params.elemSeparator : DEFAULT_SEPARATOR;\n  const preserveCurrentColor = typeof params.preserveCurrentColor == 'boolean' ? params.preserveCurrentColor : false;\n  const attrs = Array.isArray(params.attrs) ? params.attrs : [params.attrs];\n  return {\n    element: {\n      enter: node => {\n        for (let pattern of attrs) {\n          // if no element separators (:), assume it's attribute name, and apply to all elements *regardless of value*\n          if (!pattern.includes(elemSeparator)) {\n            pattern = ['.*', pattern, '.*'].join(elemSeparator);\n            // if only 1 separator, assume it's element and attribute name, and apply regardless of attribute value\n          } else if (pattern.split(elemSeparator).length < 3) {\n            pattern = [pattern, '.*'].join(elemSeparator);\n          }\n\n          // create regexps for element, attribute name, and attribute value\n          const list = pattern.split(elemSeparator).map(value => {\n            // adjust single * to match anything\n            if (value === '*') {\n              value = '.*';\n            }\n            return new RegExp(['^', value, '$'].join(''), 'i');\n          });\n\n          // matches element\n          if (list[0].test(node.name)) {\n            // loop attributes\n            for (const [name, value] of Object.entries(node.attributes)) {\n              const isFillCurrentColor = preserveCurrentColor && name == 'fill' && value == 'currentColor';\n              const isStrokeCurrentColor = preserveCurrentColor && name == 'stroke' && value == 'currentColor';\n              if (!isFillCurrentColor && !isStrokeCurrentColor &&\n              // matches attribute name\n              list[1].test(name) &&\n              // matches attribute value\n              list[2].test(value)) {\n                delete node.attributes[name];\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}