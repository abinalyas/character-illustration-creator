{"ast":null,"code":"'use strict';\n\nconst types = require('../../tokenizer/types.cjs');\nconst charCodeDefinitions = require('../../tokenizer/char-code-definitions.cjs');\nconst SOLIDUS = 0x002F; // U+002F SOLIDUS (/)\nconst FULLSTOP = 0x002E; // U+002E FULL STOP (.)\n\n// Terms of <ratio> should be a positive numbers (not zero or negative)\n// (see https://drafts.csswg.org/mediaqueries-3/#values)\n// However, -o-min-device-pixel-ratio takes fractional values as a ratio's term\n// and this is using by various sites. Therefore we relax checking on parse\n// to test a term is unsigned number without an exponent part.\n// Additional checking may be applied on lexer validation.\nfunction consumeNumber() {\n  this.skipSC();\n  const value = this.consume(types.Number);\n  for (let i = 0; i < value.length; i++) {\n    const code = value.charCodeAt(i);\n    if (!charCodeDefinitions.isDigit(code) && code !== FULLSTOP) {\n      this.error('Unsigned number is expected', this.tokenStart - value.length + i);\n    }\n  }\n  if (Number(value) === 0) {\n    this.error('Zero number is not allowed', this.tokenStart - value.length);\n  }\n  return value;\n}\nconst name = 'Ratio';\nconst structure = {\n  left: String,\n  right: String\n};\n\n// <positive-integer> S* '/' S* <positive-integer>\nfunction parse() {\n  const start = this.tokenStart;\n  const left = consumeNumber.call(this);\n  let right;\n  this.skipSC();\n  this.eatDelim(SOLIDUS);\n  right = consumeNumber.call(this);\n  return {\n    type: 'Ratio',\n    loc: this.getLocation(start, this.tokenStart),\n    left,\n    right\n  };\n}\nfunction generate(node) {\n  this.token(types.Number, node.left);\n  this.token(types.Delim, '/');\n  this.token(types.Number, node.right);\n}\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}