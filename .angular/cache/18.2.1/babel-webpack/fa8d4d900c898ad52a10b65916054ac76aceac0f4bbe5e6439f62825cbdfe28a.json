{"ast":null,"code":"'use strict';\n\nconst index = require('../tokenizer/index.cjs');\nconst create = require('../parser/create.cjs');\nconst create$2 = require('../generator/create.cjs');\nconst create$3 = require('../convertor/create.cjs');\nconst create$1 = require('../walker/create.cjs');\nconst Lexer = require('../lexer/Lexer.cjs');\nconst mix = require('./config/mix.cjs');\nfunction createSyntax(config) {\n  const parse = create.createParser(config);\n  const walk = create$1.createWalker(config);\n  const generate = create$2.createGenerator(config);\n  const {\n    fromPlainObject,\n    toPlainObject\n  } = create$3.createConvertor(walk);\n  const syntax = {\n    lexer: null,\n    createLexer: config => new Lexer.Lexer(config, syntax, syntax.lexer.structure),\n    tokenize: index.tokenize,\n    parse,\n    generate,\n    walk,\n    find: walk.find,\n    findLast: walk.findLast,\n    findAll: walk.findAll,\n    fromPlainObject,\n    toPlainObject,\n    fork(extension) {\n      const base = mix({}, config); // copy of config\n\n      return createSyntax(typeof extension === 'function' ? extension(base, Object.assign) : mix(base, extension));\n    }\n  };\n  syntax.lexer = new Lexer.Lexer({\n    generic: true,\n    units: config.units,\n    types: config.types,\n    atrules: config.atrules,\n    properties: config.properties,\n    node: config.node\n  }, syntax);\n  return syntax;\n}\nconst createSyntax$1 = config => createSyntax(mix({}, config));\nmodule.exports = createSyntax$1;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}