{"ast":null,"code":"'use strict';\n\n/**\n * @typedef {import('../lib/types').PathDataItem} PathDataItem\n */\nconst {\n  visitSkip,\n  detachNodeFromParent\n} = require('../lib/xast.js');\nconst {\n  parsePathData\n} = require('../lib/path.js');\nconst {\n  intersects\n} = require('./_path.js');\nexports.name = 'removeOffCanvasPaths';\nexports.description = 'removes elements that are drawn outside of the viewbox (disabled by default)';\n\n/**\n * Remove elements that are drawn outside of the viewbox.\n *\n * @author JoshyPHP\n *\n * @type {import('./plugins-types').Plugin<'removeOffCanvasPaths'>}\n */\nexports.fn = () => {\n  /**\n   * @type {?{\n   *   top: number,\n   *   right: number,\n   *   bottom: number,\n   *   left: number,\n   *   width: number,\n   *   height: number\n   * }}\n   */\n  let viewBoxData = null;\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          let viewBox = '';\n          // find viewbox\n          if (node.attributes.viewBox != null) {\n            // remove commas and plus signs, normalize and trim whitespace\n            viewBox = node.attributes.viewBox;\n          } else if (node.attributes.height != null && node.attributes.width != null) {\n            viewBox = `0 0 ${node.attributes.width} ${node.attributes.height}`;\n          }\n\n          // parse viewbox\n          // remove commas and plus signs, normalize and trim whitespace\n          viewBox = viewBox.replace(/[,+]|px/g, ' ').replace(/\\s+/g, ' ').replace(/^\\s*|\\s*$/g, '');\n          // ensure that the dimensions are 4 values separated by space\n          const m = /^(-?\\d*\\.?\\d+) (-?\\d*\\.?\\d+) (\\d*\\.?\\d+) (\\d*\\.?\\d+)$/.exec(viewBox);\n          if (m == null) {\n            return;\n          }\n          const left = Number.parseFloat(m[1]);\n          const top = Number.parseFloat(m[2]);\n          const width = Number.parseFloat(m[3]);\n          const height = Number.parseFloat(m[4]);\n\n          // store the viewBox boundaries\n          viewBoxData = {\n            left,\n            top,\n            right: left + width,\n            bottom: top + height,\n            width,\n            height\n          };\n        }\n\n        // consider that any item with a transform attribute is visible\n        if (node.attributes.transform != null) {\n          return visitSkip;\n        }\n        if (node.name === 'path' && node.attributes.d != null && viewBoxData != null) {\n          const pathData = parsePathData(node.attributes.d);\n\n          // consider that a M command within the viewBox is visible\n          let visible = false;\n          for (const pathDataItem of pathData) {\n            if (pathDataItem.command === 'M') {\n              const [x, y] = pathDataItem.args;\n              if (x >= viewBoxData.left && x <= viewBoxData.right && y >= viewBoxData.top && y <= viewBoxData.bottom) {\n                visible = true;\n              }\n            }\n          }\n          if (visible) {\n            return;\n          }\n          if (pathData.length === 2) {\n            // close the path too short for intersects()\n            pathData.push({\n              command: 'z',\n              args: []\n            });\n          }\n          const {\n            left,\n            top,\n            width,\n            height\n          } = viewBoxData;\n          /**\n           * @type {PathDataItem[]}\n           */\n          const viewBoxPathData = [{\n            command: 'M',\n            args: [left, top]\n          }, {\n            command: 'h',\n            args: [width]\n          }, {\n            command: 'v',\n            args: [height]\n          }, {\n            command: 'H',\n            args: [left]\n          }, {\n            command: 'z',\n            args: []\n          }];\n          if (intersects(viewBoxPathData, pathData) === false) {\n            detachNodeFromParent(node, parentNode);\n          }\n        }\n      }\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}