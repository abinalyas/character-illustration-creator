{"ast":null,"code":"'use strict';\n\nconst {\n  pathElems,\n  referencesProps\n} = require('./_collections.js');\nconst {\n  includesUrlReference\n} = require('../lib/svgo/tools.js');\nexports.name = 'moveGroupAttrsToElems';\nexports.description = 'moves some group attributes to the content elements';\nconst pathElemsWithGroupsAndText = [...pathElems, 'g', 'text'];\n\n/**\n * Move group attrs to the content elements.\n *\n * @example\n * <g transform=\"scale(2)\">\n *     <path transform=\"rotate(45)\" d=\"M0,0 L10,20\"/>\n *     <path transform=\"translate(10, 20)\" d=\"M0,10 L20,30\"/>\n * </g>\n *                          â¬‡\n * <g>\n *     <path transform=\"scale(2) rotate(45)\" d=\"M0,0 L10,20\"/>\n *     <path transform=\"scale(2) translate(10, 20)\" d=\"M0,10 L20,30\"/>\n * </g>\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'moveGroupAttrsToElems'>}\n */\nexports.fn = () => {\n  return {\n    element: {\n      enter: node => {\n        // move group transform attr to content's pathElems\n        if (node.name === 'g' && node.children.length !== 0 && node.attributes.transform != null && Object.entries(node.attributes).some(([name, value]) => referencesProps.has(name) && includesUrlReference(value)) === false && node.children.every(child => child.type === 'element' && pathElemsWithGroupsAndText.includes(child.name) && child.attributes.id == null)) {\n          for (const child of node.children) {\n            const value = node.attributes.transform;\n            if (child.type === 'element') {\n              if (child.attributes.transform != null) {\n                child.attributes.transform = `${value} ${child.attributes.transform}`;\n              } else {\n                child.attributes.transform = value;\n              }\n            }\n          }\n          delete node.attributes.transform;\n        }\n      }\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}