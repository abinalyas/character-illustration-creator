{"ast":null,"code":"'use strict';\n\nconst cssTree = require('css-tree');\nconst utils = require('./utils.cjs');\nfunction processRule(node, item, list) {\n  const selectors = node.prelude.children;\n  const declarations = node.block.children;\n  list.prevUntil(item.prev, function (prev) {\n    // skip non-ruleset node if safe\n    if (prev.type !== 'Rule') {\n      return utils.unsafeToSkipNode.call(selectors, prev);\n    }\n    const prevSelectors = prev.prelude.children;\n    const prevDeclarations = prev.block.children;\n\n    // try to join rulesets with equal pseudo signature\n    if (node.pseudoSignature === prev.pseudoSignature) {\n      // try to join by selectors\n      if (utils.isEqualSelectors(prevSelectors, selectors)) {\n        prevDeclarations.appendList(declarations);\n        list.remove(item);\n        return true;\n      }\n\n      // try to join by declarations\n      if (utils.isEqualDeclarations(declarations, prevDeclarations)) {\n        utils.addSelectors(prevSelectors, selectors);\n        list.remove(item);\n        return true;\n      }\n    }\n\n    // go to prev ruleset if has no selector similarities\n    return utils.hasSimilarSelectors(selectors, prevSelectors);\n  });\n}\n\n// NOTE: direction should be left to right, since rulesets merge to left\n// ruleset. When direction right to left unmerged rulesets may prevent lookup\n// TODO: remove initial merge\nfunction initialMergeRule(ast) {\n  cssTree.walk(ast, {\n    visit: 'Rule',\n    enter: processRule\n  });\n}\nmodule.exports = initialMergeRule;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}