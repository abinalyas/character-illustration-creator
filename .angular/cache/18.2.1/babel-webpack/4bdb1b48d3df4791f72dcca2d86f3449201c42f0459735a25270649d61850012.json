{"ast":null,"code":"'use strict';\n\nconst cssTree = require('css-tree');\nconst createDeclarationIndexer = require('./createDeclarationIndexer.cjs');\nconst processSelector = require('./processSelector.cjs');\nfunction prepare(ast, options) {\n  const markDeclaration = createDeclarationIndexer();\n  cssTree.walk(ast, {\n    visit: 'Rule',\n    enter(node) {\n      node.block.children.forEach(markDeclaration);\n      processSelector(node, options.usage);\n    }\n  });\n  cssTree.walk(ast, {\n    visit: 'Atrule',\n    enter(node) {\n      if (node.prelude) {\n        node.prelude.id = null; // pre-init property to avoid multiple hidden class for generate\n        node.prelude.id = cssTree.generate(node.prelude);\n      }\n\n      // compare keyframe selectors by its values\n      // NOTE: still no clarification about problems with keyframes selector grouping (issue #197)\n      if (cssTree.keyword(node.name).basename === 'keyframes') {\n        node.block.avoidRulesMerge = true; /* probably we don't need to prevent those merges for @keyframes\n                                              TODO: need to be checked */\n        node.block.children.forEach(function (rule) {\n          rule.prelude.children.forEach(function (simpleselector) {\n            simpleselector.compareMarker = simpleselector.id;\n          });\n        });\n      }\n    }\n  });\n  return {\n    declaration: markDeclaration\n  };\n}\nmodule.exports = prepare;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}