{"ast":null,"code":"'use strict';\n\nconst types = require('../../tokenizer/types.cjs');\nconst NUMBERSIGN = 0x0023; // U+0023 NUMBER SIGN (#)\nconst ASTERISK = 0x002A; // U+002A ASTERISK (*)\nconst PLUSSIGN = 0x002B; // U+002B PLUS SIGN (+)\nconst HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\nconst SOLIDUS = 0x002F; // U+002F SOLIDUS (/)\nconst U = 0x0075; // U+0075 LATIN SMALL LETTER U (u)\n\nfunction defaultRecognizer(context) {\n  switch (this.tokenType) {\n    case types.Hash:\n      return this.Hash();\n    case types.Comma:\n      return this.Operator();\n    case types.LeftParenthesis:\n      return this.Parentheses(this.readSequence, context.recognizer);\n    case types.LeftSquareBracket:\n      return this.Brackets(this.readSequence, context.recognizer);\n    case types.String:\n      return this.String();\n    case types.Dimension:\n      return this.Dimension();\n    case types.Percentage:\n      return this.Percentage();\n    case types.Number:\n      return this.Number();\n    case types.Function:\n      return this.cmpStr(this.tokenStart, this.tokenEnd, 'url(') ? this.Url() : this.Function(this.readSequence, context.recognizer);\n    case types.Url:\n      return this.Url();\n    case types.Ident:\n      // check for unicode range, it should start with u+ or U+\n      if (this.cmpChar(this.tokenStart, U) && this.cmpChar(this.tokenStart + 1, PLUSSIGN)) {\n        return this.UnicodeRange();\n      } else {\n        return this.Identifier();\n      }\n    case types.Delim:\n      {\n        const code = this.charCodeAt(this.tokenStart);\n        if (code === SOLIDUS || code === ASTERISK || code === PLUSSIGN || code === HYPHENMINUS) {\n          return this.Operator(); // TODO: replace with Delim\n        }\n\n        // TODO: produce a node with Delim node type\n\n        if (code === NUMBERSIGN) {\n          this.error('Hex or identifier is expected', this.tokenStart + 1);\n        }\n        break;\n      }\n  }\n}\nmodule.exports = defaultRecognizer;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}