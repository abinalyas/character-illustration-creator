{"ast":null,"code":"'use strict';\n\nconst types = require('../../tokenizer/types.cjs');\nfunction consumeRaw(startToken) {\n  return this.Raw(startToken, this.consumeUntilLeftCurlyBracket, true);\n}\nfunction consumePrelude() {\n  const prelude = this.SelectorList();\n  if (prelude.type !== 'Raw' && this.eof === false && this.tokenType !== types.LeftCurlyBracket) {\n    this.error();\n  }\n  return prelude;\n}\nconst name = 'Rule';\nconst walkContext = 'rule';\nconst structure = {\n  prelude: ['SelectorList', 'Raw'],\n  block: ['Block']\n};\nfunction parse() {\n  const startToken = this.tokenIndex;\n  const startOffset = this.tokenStart;\n  let prelude;\n  let block;\n  if (this.parseRulePrelude) {\n    prelude = this.parseWithFallback(consumePrelude, consumeRaw);\n  } else {\n    prelude = consumeRaw.call(this, startToken);\n  }\n  block = this.Block(true);\n  return {\n    type: 'Rule',\n    loc: this.getLocation(startOffset, this.tokenStart),\n    prelude,\n    block\n  };\n}\nfunction generate(node) {\n  this.node(node.prelude);\n  this.node(node.block);\n}\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\nexports.walkContext = walkContext;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}