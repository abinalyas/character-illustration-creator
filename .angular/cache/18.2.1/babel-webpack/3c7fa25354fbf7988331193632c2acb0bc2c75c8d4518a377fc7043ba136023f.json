{"ast":null,"code":"'use strict';\n\nconst index = require('../tokenizer/index.cjs');\nconst sourceMap = require('./sourceMap.cjs');\nconst tokenBefore = require('./token-before.cjs');\nconst types = require('../tokenizer/types.cjs');\nconst REVERSESOLIDUS = 0x005c; // U+005C REVERSE SOLIDUS (\\)\n\nfunction processChildren(node, delimeter) {\n  if (typeof delimeter === 'function') {\n    let prev = null;\n    node.children.forEach(node => {\n      if (prev !== null) {\n        delimeter.call(this, prev);\n      }\n      this.node(node);\n      prev = node;\n    });\n    return;\n  }\n  node.children.forEach(this.node, this);\n}\nfunction processChunk(chunk) {\n  index.tokenize(chunk, (type, start, end) => {\n    this.token(type, chunk.slice(start, end));\n  });\n}\nfunction createGenerator(config) {\n  const types$1 = new Map();\n  for (let name in config.node) {\n    const item = config.node[name];\n    const fn = item.generate || item;\n    if (typeof fn === 'function') {\n      types$1.set(name, item.generate || item);\n    }\n  }\n  return function (node, options) {\n    let buffer = '';\n    let prevCode = 0;\n    let handlers = {\n      node(node) {\n        if (types$1.has(node.type)) {\n          types$1.get(node.type).call(publicApi, node);\n        } else {\n          throw new Error('Unknown node type: ' + node.type);\n        }\n      },\n      tokenBefore: tokenBefore.safe,\n      token(type, value) {\n        prevCode = this.tokenBefore(prevCode, type, value);\n        this.emit(value, type, false);\n        if (type === types.Delim && value.charCodeAt(0) === REVERSESOLIDUS) {\n          this.emit('\\n', types.WhiteSpace, true);\n        }\n      },\n      emit(value) {\n        buffer += value;\n      },\n      result() {\n        return buffer;\n      }\n    };\n    if (options) {\n      if (typeof options.decorator === 'function') {\n        handlers = options.decorator(handlers);\n      }\n      if (options.sourceMap) {\n        handlers = sourceMap.generateSourceMap(handlers);\n      }\n      if (options.mode in tokenBefore) {\n        handlers.tokenBefore = tokenBefore[options.mode];\n      }\n    }\n    const publicApi = {\n      node: node => handlers.node(node),\n      children: processChildren,\n      token: (type, value) => handlers.token(type, value),\n      tokenize: processChunk\n    };\n    handlers.node(node);\n    return handlers.result();\n  };\n}\nexports.createGenerator = createGenerator;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}