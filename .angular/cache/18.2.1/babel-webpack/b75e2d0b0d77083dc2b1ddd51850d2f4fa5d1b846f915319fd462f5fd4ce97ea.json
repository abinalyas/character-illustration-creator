{"ast":null,"code":"'use strict';\n\n/**\n * @typedef {import('../lib/types').XastElement} XastElement\n */\nconst {\n  detachNodeFromParent\n} = require('../lib/xast.js');\nconst {\n  elemsGroups\n} = require('./_collections.js');\nexports.name = 'removeUselessDefs';\nexports.description = 'removes elements in <defs> without id';\n\n/**\n * Removes content of defs and properties that aren't rendered directly without ids.\n *\n * @author Lev Solntsev\n *\n * @type {import('./plugins-types').Plugin<'removeUselessDefs'>}\n */\nexports.fn = () => {\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        if (node.name === 'defs') {\n          /**\n           * @type {XastElement[]}\n           */\n          const usefulNodes = [];\n          collectUsefulNodes(node, usefulNodes);\n          if (usefulNodes.length === 0) {\n            detachNodeFromParent(node, parentNode);\n          }\n          // TODO remove legacy parentNode in v4\n          for (const usefulNode of usefulNodes) {\n            Object.defineProperty(usefulNode, 'parentNode', {\n              writable: true,\n              value: node\n            });\n          }\n          node.children = usefulNodes;\n        } else if (elemsGroups.nonRendering.has(node.name) && node.attributes.id == null) {\n          detachNodeFromParent(node, parentNode);\n        }\n      }\n    }\n  };\n};\n\n/**\n * @type {(node: XastElement, usefulNodes: XastElement[]) => void}\n */\nconst collectUsefulNodes = (node, usefulNodes) => {\n  for (const child of node.children) {\n    if (child.type === 'element') {\n      if (child.attributes.id != null || child.name === 'style') {\n        usefulNodes.push(child);\n      } else {\n        collectUsefulNodes(child, usefulNodes);\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}