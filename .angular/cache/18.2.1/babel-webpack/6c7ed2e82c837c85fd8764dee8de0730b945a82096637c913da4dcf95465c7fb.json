{"ast":null,"code":"'use strict';\n\nconst cssTree = require('css-tree');\nconst utils = require('./utils.cjs');\nfunction cleanAtrule(node, item, list) {\n  if (node.block) {\n    // otherwise removed at-rule don't prevent @import for removal\n    if (this.stylesheet !== null) {\n      this.stylesheet.firstAtrulesAllowed = false;\n    }\n    if (utils.hasNoChildren(node.block)) {\n      list.remove(item);\n      return;\n    }\n  }\n  switch (node.name) {\n    case 'charset':\n      if (utils.hasNoChildren(node.prelude)) {\n        list.remove(item);\n        return;\n      }\n\n      // if there is any rule before @charset -> remove it\n      if (item.prev) {\n        list.remove(item);\n        return;\n      }\n      break;\n    case 'import':\n      if (this.stylesheet === null || !this.stylesheet.firstAtrulesAllowed) {\n        list.remove(item);\n        return;\n      }\n\n      // if there are some rules that not an @import or @charset before @import\n      // remove it\n      list.prevUntil(item.prev, function (rule) {\n        if (rule.type === 'Atrule') {\n          if (rule.name === 'import' || rule.name === 'charset') {\n            return;\n          }\n        }\n        this.root.firstAtrulesAllowed = false;\n        list.remove(item);\n        return true;\n      }, this);\n      break;\n    default:\n      {\n        const name = cssTree.keyword(node.name).basename;\n        if (name === 'keyframes' || name === 'media' || name === 'supports') {\n          // drop at-rule with no prelude\n          if (utils.hasNoChildren(node.prelude) || utils.hasNoChildren(node.block)) {\n            list.remove(item);\n          }\n        }\n      }\n  }\n}\nmodule.exports = cleanAtrule;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}