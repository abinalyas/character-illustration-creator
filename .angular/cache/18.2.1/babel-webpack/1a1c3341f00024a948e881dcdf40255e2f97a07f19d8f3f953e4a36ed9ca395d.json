{"ast":null,"code":"'use strict';\n\nconst {\n  visit\n} = require('../xast.js');\n\n/**\n * Plugins engine.\n *\n * @module plugins\n *\n * @param {Object} ast input ast\n * @param {Object} info extra information\n * @param {Array} plugins plugins object from config\n * @return {Object} output ast\n */\nconst invokePlugins = (ast, info, plugins, overrides, globalOverrides) => {\n  for (const plugin of plugins) {\n    const override = overrides?.[plugin.name];\n    if (override === false) {\n      continue;\n    }\n    const params = {\n      ...plugin.params,\n      ...globalOverrides,\n      ...override\n    };\n    const visitor = plugin.fn(ast, params, info);\n    if (visitor != null) {\n      visit(ast, visitor);\n    }\n  }\n};\nexports.invokePlugins = invokePlugins;\nconst createPreset = ({\n  name,\n  plugins\n}) => {\n  return {\n    name,\n    fn: (ast, params, info) => {\n      const {\n        floatPrecision,\n        overrides\n      } = params;\n      const globalOverrides = {};\n      if (floatPrecision != null) {\n        globalOverrides.floatPrecision = floatPrecision;\n      }\n      if (overrides) {\n        const pluginNames = plugins.map(({\n          name\n        }) => name);\n        for (const pluginName of Object.keys(overrides)) {\n          if (!pluginNames.includes(pluginName)) {\n            console.warn(`You are trying to configure ${pluginName} which is not part of ${name}.\\n` + `Try to put it before or after, for example\\n\\n` + `plugins: [\\n` + `  {\\n` + `    name: '${name}',\\n` + `  },\\n` + `  '${pluginName}'\\n` + `]\\n`);\n          }\n        }\n      }\n      invokePlugins(ast, info, plugins, overrides, globalOverrides);\n    }\n  };\n};\nexports.createPreset = createPreset;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}