{"ast":null,"code":"'use strict';\n\nconst cssTree = require('css-tree');\nconst utils = require('./utils.cjs');\nconst {\n  hasOwnProperty\n} = Object.prototype;\nconst skipUsageFilteringAtrule = new Set(['keyframes']);\nfunction cleanUnused(selectorList, usageData) {\n  selectorList.children.forEach((selector, item, list) => {\n    let shouldRemove = false;\n    cssTree.walk(selector, function (node) {\n      // ignore nodes in nested selectors\n      if (this.selector === null || this.selector === selectorList) {\n        switch (node.type) {\n          case 'SelectorList':\n            // TODO: remove toLowerCase when pseudo selectors will be normalized\n            // ignore selectors inside :not()\n            if (this.function === null || this.function.name.toLowerCase() !== 'not') {\n              if (cleanUnused(node, usageData)) {\n                shouldRemove = true;\n              }\n            }\n            break;\n          case 'ClassSelector':\n            if (usageData.whitelist !== null && usageData.whitelist.classes !== null && !hasOwnProperty.call(usageData.whitelist.classes, node.name)) {\n              shouldRemove = true;\n            }\n            if (usageData.blacklist !== null && usageData.blacklist.classes !== null && hasOwnProperty.call(usageData.blacklist.classes, node.name)) {\n              shouldRemove = true;\n            }\n            break;\n          case 'IdSelector':\n            if (usageData.whitelist !== null && usageData.whitelist.ids !== null && !hasOwnProperty.call(usageData.whitelist.ids, node.name)) {\n              shouldRemove = true;\n            }\n            if (usageData.blacklist !== null && usageData.blacklist.ids !== null && hasOwnProperty.call(usageData.blacklist.ids, node.name)) {\n              shouldRemove = true;\n            }\n            break;\n          case 'TypeSelector':\n            // TODO: remove toLowerCase when type selectors will be normalized\n            // ignore universal selectors\n            if (node.name.charAt(node.name.length - 1) !== '*') {\n              if (usageData.whitelist !== null && usageData.whitelist.tags !== null && !hasOwnProperty.call(usageData.whitelist.tags, node.name.toLowerCase())) {\n                shouldRemove = true;\n              }\n              if (usageData.blacklist !== null && usageData.blacklist.tags !== null && hasOwnProperty.call(usageData.blacklist.tags, node.name.toLowerCase())) {\n                shouldRemove = true;\n              }\n            }\n            break;\n        }\n      }\n    });\n    if (shouldRemove) {\n      list.remove(item);\n    }\n  });\n  return selectorList.children.isEmpty;\n}\nfunction cleanRule(node, item, list, options) {\n  if (utils.hasNoChildren(node.prelude) || utils.hasNoChildren(node.block)) {\n    list.remove(item);\n    return;\n  }\n\n  // avoid usage filtering for some at-rules\n  if (this.atrule && skipUsageFilteringAtrule.has(cssTree.keyword(this.atrule.name).basename)) {\n    return;\n  }\n  const {\n    usage\n  } = options;\n  if (usage && (usage.whitelist !== null || usage.blacklist !== null)) {\n    cleanUnused(node.prelude, usage);\n    if (utils.hasNoChildren(node.prelude)) {\n      list.remove(item);\n      return;\n    }\n  }\n}\nmodule.exports = cleanRule;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}