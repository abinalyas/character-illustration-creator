{"ast":null,"code":"'use strict';\n\nconst types = require('../../tokenizer/types.cjs');\nconst name = 'MediaQuery';\nconst structure = {\n  children: [['Identifier', 'MediaFeature', 'WhiteSpace']]\n};\nfunction parse() {\n  const children = this.createList();\n  let child = null;\n  this.skipSC();\n  scan: while (!this.eof) {\n    switch (this.tokenType) {\n      case types.Comment:\n      case types.WhiteSpace:\n        this.next();\n        continue;\n      case types.Ident:\n        child = this.Identifier();\n        break;\n      case types.LeftParenthesis:\n        child = this.MediaFeature();\n        break;\n      default:\n        break scan;\n    }\n    children.push(child);\n  }\n  if (child === null) {\n    this.error('Identifier or parenthesis is expected');\n  }\n  return {\n    type: 'MediaQuery',\n    loc: this.getLocationFromList(children),\n    children\n  };\n}\nfunction generate(node) {\n  this.children(node);\n}\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}