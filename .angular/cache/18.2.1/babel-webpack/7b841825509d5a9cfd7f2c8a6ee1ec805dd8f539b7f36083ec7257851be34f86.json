{"ast":null,"code":"'use strict';\n\nconst genericConst = require('./generic-const.cjs');\nconst genericAnPlusB = require('./generic-an-plus-b.cjs');\nconst genericUrange = require('./generic-urange.cjs');\nconst types = require('../tokenizer/types.cjs');\nconst charCodeDefinitions = require('../tokenizer/char-code-definitions.cjs');\nconst utils = require('../tokenizer/utils.cjs');\nconst calcFunctionNames = ['calc(', '-moz-calc(', '-webkit-calc('];\nconst balancePair = new Map([[types.Function, types.RightParenthesis], [types.LeftParenthesis, types.RightParenthesis], [types.LeftSquareBracket, types.RightSquareBracket], [types.LeftCurlyBracket, types.RightCurlyBracket]]);\n\n// units\nconst LENGTH = [\n// absolute length units https://www.w3.org/TR/css-values-3/#lengths\n'cm', 'mm', 'q', 'in', 'pt', 'pc', 'px',\n// font-relative length units https://drafts.csswg.org/css-values-4/#font-relative-lengths\n'em', 'rem', 'ex', 'rex', 'cap', 'rcap', 'ch', 'rch', 'ic', 'ric', 'lh', 'rlh',\n// viewport-percentage lengths https://drafts.csswg.org/css-values-4/#viewport-relative-lengths\n'vw', 'svw', 'lvw', 'dvw', 'vh', 'svh', 'lvh', 'dvh', 'vi', 'svi', 'lvi', 'dvi', 'vb', 'svb', 'lvb', 'dvb', 'vmin', 'svmin', 'lvmin', 'dvmin', 'vmax', 'svmax', 'lvmax', 'dvmax',\n// container relative lengths https://drafts.csswg.org/css-contain-3/#container-lengths\n'cqw', 'cqh', 'cqi', 'cqb', 'cqmin', 'cqmax'];\nconst ANGLE = ['deg', 'grad', 'rad', 'turn']; // https://www.w3.org/TR/css-values-3/#angles\nconst TIME = ['s', 'ms']; // https://www.w3.org/TR/css-values-3/#time\nconst FREQUENCY = ['hz', 'khz']; // https://www.w3.org/TR/css-values-3/#frequency\nconst RESOLUTION = ['dpi', 'dpcm', 'dppx', 'x']; // https://www.w3.org/TR/css-values-3/#resolution\nconst FLEX = ['fr']; // https://drafts.csswg.org/css-grid/#fr-unit\nconst DECIBEL = ['db']; // https://www.w3.org/TR/css3-speech/#mixing-props-voice-volume\nconst SEMITONES = ['st']; // https://www.w3.org/TR/css3-speech/#voice-props-voice-pitch\n\n// safe char code getter\nfunction charCodeAt(str, index) {\n  return index < str.length ? str.charCodeAt(index) : 0;\n}\nfunction eqStr(actual, expected) {\n  return utils.cmpStr(actual, 0, actual.length, expected);\n}\nfunction eqStrAny(actual, expected) {\n  for (let i = 0; i < expected.length; i++) {\n    if (eqStr(actual, expected[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// IE postfix hack, i.e. 123\\0 or 123px\\9\nfunction isPostfixIeHack(str, offset) {\n  if (offset !== str.length - 2) {\n    return false;\n  }\n  return charCodeAt(str, offset) === 0x005C &&\n  // U+005C REVERSE SOLIDUS (\\)\n  charCodeDefinitions.isDigit(charCodeAt(str, offset + 1));\n}\nfunction outOfRange(opts, value, numEnd) {\n  if (opts && opts.type === 'Range') {\n    const num = Number(numEnd !== undefined && numEnd !== value.length ? value.substr(0, numEnd) : value);\n    if (isNaN(num)) {\n      return true;\n    }\n\n    // FIXME: when opts.min is a string it's a dimension, skip a range validation\n    // for now since it requires a type covertation which is not implmented yet\n    if (opts.min !== null && num < opts.min && typeof opts.min !== 'string') {\n      return true;\n    }\n\n    // FIXME: when opts.max is a string it's a dimension, skip a range validation\n    // for now since it requires a type covertation which is not implmented yet\n    if (opts.max !== null && num > opts.max && typeof opts.max !== 'string') {\n      return true;\n    }\n  }\n  return false;\n}\nfunction consumeFunction(token, getNextToken) {\n  let balanceCloseType = 0;\n  let balanceStash = [];\n  let length = 0;\n\n  // balanced token consuming\n  scan: do {\n    switch (token.type) {\n      case types.RightCurlyBracket:\n      case types.RightParenthesis:\n      case types.RightSquareBracket:\n        if (token.type !== balanceCloseType) {\n          break scan;\n        }\n        balanceCloseType = balanceStash.pop();\n        if (balanceStash.length === 0) {\n          length++;\n          break scan;\n        }\n        break;\n      case types.Function:\n      case types.LeftParenthesis:\n      case types.LeftSquareBracket:\n      case types.LeftCurlyBracket:\n        balanceStash.push(balanceCloseType);\n        balanceCloseType = balancePair.get(token.type);\n        break;\n    }\n    length++;\n  } while (token = getNextToken(length));\n  return length;\n}\n\n// TODO: implement\n// can be used wherever <length>, <frequency>, <angle>, <time>, <percentage>, <number>, or <integer> values are allowed\n// https://drafts.csswg.org/css-values/#calc-notation\nfunction calc(next) {\n  return function (token, getNextToken, opts) {\n    if (token === null) {\n      return 0;\n    }\n    if (token.type === types.Function && eqStrAny(token.value, calcFunctionNames)) {\n      return consumeFunction(token, getNextToken);\n    }\n    return next(token, getNextToken, opts);\n  };\n}\nfunction tokenType(expectedTokenType) {\n  return function (token) {\n    if (token === null || token.type !== expectedTokenType) {\n      return 0;\n    }\n    return 1;\n  };\n}\n\n// =========================\n// Complex types\n//\n\n// https://drafts.csswg.org/css-values-4/#custom-idents\n// 4.2. Author-defined Identifiers: the <custom-ident> type\n// Some properties accept arbitrary author-defined identifiers as a component value.\n// This generic data type is denoted by <custom-ident>, and represents any valid CSS identifier\n// that would not be misinterpreted as a pre-defined keyword in that property’s value definition.\n//\n// See also: https://developer.mozilla.org/en-US/docs/Web/CSS/custom-ident\nfunction customIdent(token) {\n  if (token === null || token.type !== types.Ident) {\n    return 0;\n  }\n  const name = token.value.toLowerCase();\n\n  // The CSS-wide keywords are not valid <custom-ident>s\n  if (eqStrAny(name, genericConst.cssWideKeywords)) {\n    return 0;\n  }\n\n  // The default keyword is reserved and is also not a valid <custom-ident>\n  if (eqStr(name, 'default')) {\n    return 0;\n  }\n\n  // TODO: ignore property specific keywords (as described https://developer.mozilla.org/en-US/docs/Web/CSS/custom-ident)\n  // Specifications using <custom-ident> must specify clearly what other keywords\n  // are excluded from <custom-ident>, if any—for example by saying that any pre-defined keywords\n  // in that property’s value definition are excluded. Excluded keywords are excluded\n  // in all ASCII case permutations.\n\n  return 1;\n}\n\n// https://drafts.csswg.org/css-variables/#typedef-custom-property-name\n// A custom property is any property whose name starts with two dashes (U+002D HYPHEN-MINUS), like --foo.\n// The <custom-property-name> production corresponds to this: it’s defined as any valid identifier\n// that starts with two dashes, except -- itself, which is reserved for future use by CSS.\n// NOTE: Current implementation treat `--` as a valid name since most (all?) major browsers treat it as valid.\nfunction customPropertyName(token) {\n  // ... defined as any valid identifier\n  if (token === null || token.type !== types.Ident) {\n    return 0;\n  }\n\n  // ... that starts with two dashes (U+002D HYPHEN-MINUS)\n  if (charCodeAt(token.value, 0) !== 0x002D || charCodeAt(token.value, 1) !== 0x002D) {\n    return 0;\n  }\n  return 1;\n}\n\n// https://drafts.csswg.org/css-color-4/#hex-notation\n// The syntax of a <hex-color> is a <hash-token> token whose value consists of 3, 4, 6, or 8 hexadecimal digits.\n// In other words, a hex color is written as a hash character, \"#\", followed by some number of digits 0-9 or\n// letters a-f (the case of the letters doesn’t matter - #00ff00 is identical to #00FF00).\nfunction hexColor(token) {\n  if (token === null || token.type !== types.Hash) {\n    return 0;\n  }\n  const length = token.value.length;\n\n  // valid values (length): #rgb (4), #rgba (5), #rrggbb (7), #rrggbbaa (9)\n  if (length !== 4 && length !== 5 && length !== 7 && length !== 9) {\n    return 0;\n  }\n  for (let i = 1; i < length; i++) {\n    if (!charCodeDefinitions.isHexDigit(charCodeAt(token.value, i))) {\n      return 0;\n    }\n  }\n  return 1;\n}\nfunction idSelector(token) {\n  if (token === null || token.type !== types.Hash) {\n    return 0;\n  }\n  if (!charCodeDefinitions.isIdentifierStart(charCodeAt(token.value, 1), charCodeAt(token.value, 2), charCodeAt(token.value, 3))) {\n    return 0;\n  }\n  return 1;\n}\n\n// https://drafts.csswg.org/css-syntax/#any-value\n// It represents the entirety of what a valid declaration can have as its value.\nfunction declarationValue(token, getNextToken) {\n  if (!token) {\n    return 0;\n  }\n  let balanceCloseType = 0;\n  let balanceStash = [];\n  let length = 0;\n\n  // The <declaration-value> production matches any sequence of one or more tokens,\n  // so long as the sequence does not contain ...\n  scan: do {\n    switch (token.type) {\n      // ... <bad-string-token>, <bad-url-token>,\n      case types.BadString:\n      case types.BadUrl:\n        break scan;\n\n      // ... unmatched <)-token>, <]-token>, or <}-token>,\n      case types.RightCurlyBracket:\n      case types.RightParenthesis:\n      case types.RightSquareBracket:\n        if (token.type !== balanceCloseType) {\n          break scan;\n        }\n        balanceCloseType = balanceStash.pop();\n        break;\n\n      // ... or top-level <semicolon-token> tokens\n      case types.Semicolon:\n        if (balanceCloseType === 0) {\n          break scan;\n        }\n        break;\n\n      // ... or <delim-token> tokens with a value of \"!\"\n      case types.Delim:\n        if (balanceCloseType === 0 && token.value === '!') {\n          break scan;\n        }\n        break;\n      case types.Function:\n      case types.LeftParenthesis:\n      case types.LeftSquareBracket:\n      case types.LeftCurlyBracket:\n        balanceStash.push(balanceCloseType);\n        balanceCloseType = balancePair.get(token.type);\n        break;\n    }\n    length++;\n  } while (token = getNextToken(length));\n  return length;\n}\n\n// https://drafts.csswg.org/css-syntax/#any-value\n// The <any-value> production is identical to <declaration-value>, but also\n// allows top-level <semicolon-token> tokens and <delim-token> tokens\n// with a value of \"!\". It represents the entirety of what valid CSS can be in any context.\nfunction anyValue(token, getNextToken) {\n  if (!token) {\n    return 0;\n  }\n  let balanceCloseType = 0;\n  let balanceStash = [];\n  let length = 0;\n\n  // The <any-value> production matches any sequence of one or more tokens,\n  // so long as the sequence ...\n  scan: do {\n    switch (token.type) {\n      // ... does not contain <bad-string-token>, <bad-url-token>,\n      case types.BadString:\n      case types.BadUrl:\n        break scan;\n\n      // ... unmatched <)-token>, <]-token>, or <}-token>,\n      case types.RightCurlyBracket:\n      case types.RightParenthesis:\n      case types.RightSquareBracket:\n        if (token.type !== balanceCloseType) {\n          break scan;\n        }\n        balanceCloseType = balanceStash.pop();\n        break;\n      case types.Function:\n      case types.LeftParenthesis:\n      case types.LeftSquareBracket:\n      case types.LeftCurlyBracket:\n        balanceStash.push(balanceCloseType);\n        balanceCloseType = balancePair.get(token.type);\n        break;\n    }\n    length++;\n  } while (token = getNextToken(length));\n  return length;\n}\n\n// =========================\n// Dimensions\n//\n\nfunction dimension(type) {\n  if (type) {\n    type = new Set(type);\n  }\n  return function (token, getNextToken, opts) {\n    if (token === null || token.type !== types.Dimension) {\n      return 0;\n    }\n    const numberEnd = utils.consumeNumber(token.value, 0);\n\n    // check unit\n    if (type !== null) {\n      // check for IE postfix hack, i.e. 123px\\0 or 123px\\9\n      const reverseSolidusOffset = token.value.indexOf('\\\\', numberEnd);\n      const unit = reverseSolidusOffset === -1 || !isPostfixIeHack(token.value, reverseSolidusOffset) ? token.value.substr(numberEnd) : token.value.substring(numberEnd, reverseSolidusOffset);\n      if (type.has(unit.toLowerCase()) === false) {\n        return 0;\n      }\n    }\n\n    // check range if specified\n    if (outOfRange(opts, token.value, numberEnd)) {\n      return 0;\n    }\n    return 1;\n  };\n}\n\n// =========================\n// Percentage\n//\n\n// §5.5. Percentages: the <percentage> type\n// https://drafts.csswg.org/css-values-4/#percentages\nfunction percentage(token, getNextToken, opts) {\n  // ... corresponds to the <percentage-token> production\n  if (token === null || token.type !== types.Percentage) {\n    return 0;\n  }\n\n  // check range if specified\n  if (outOfRange(opts, token.value, token.value.length - 1)) {\n    return 0;\n  }\n  return 1;\n}\n\n// =========================\n// Numeric\n//\n\n// https://drafts.csswg.org/css-values-4/#numbers\n// The value <zero> represents a literal number with the value 0. Expressions that merely\n// evaluate to a <number> with the value 0 (for example, calc(0)) do not match <zero>;\n// only literal <number-token>s do.\nfunction zero(next) {\n  if (typeof next !== 'function') {\n    next = function () {\n      return 0;\n    };\n  }\n  return function (token, getNextToken, opts) {\n    if (token !== null && token.type === types.Number) {\n      if (Number(token.value) === 0) {\n        return 1;\n      }\n    }\n    return next(token, getNextToken, opts);\n  };\n}\n\n// § 5.3. Real Numbers: the <number> type\n// https://drafts.csswg.org/css-values-4/#numbers\n// Number values are denoted by <number>, and represent real numbers, possibly with a fractional component.\n// ... It corresponds to the <number-token> production\nfunction number(token, getNextToken, opts) {\n  if (token === null) {\n    return 0;\n  }\n  const numberEnd = utils.consumeNumber(token.value, 0);\n  const isNumber = numberEnd === token.value.length;\n  if (!isNumber && !isPostfixIeHack(token.value, numberEnd)) {\n    return 0;\n  }\n\n  // check range if specified\n  if (outOfRange(opts, token.value, numberEnd)) {\n    return 0;\n  }\n  return 1;\n}\n\n// §5.2. Integers: the <integer> type\n// https://drafts.csswg.org/css-values-4/#integers\nfunction integer(token, getNextToken, opts) {\n  // ... corresponds to a subset of the <number-token> production\n  if (token === null || token.type !== types.Number) {\n    return 0;\n  }\n\n  // The first digit of an integer may be immediately preceded by `-` or `+` to indicate the integer’s sign.\n  let i = charCodeAt(token.value, 0) === 0x002B ||\n  // U+002B PLUS SIGN (+)\n  charCodeAt(token.value, 0) === 0x002D ? 1 : 0; // U+002D HYPHEN-MINUS (-)\n\n  // When written literally, an integer is one or more decimal digits 0 through 9 ...\n  for (; i < token.value.length; i++) {\n    if (!charCodeDefinitions.isDigit(charCodeAt(token.value, i))) {\n      return 0;\n    }\n  }\n\n  // check range if specified\n  if (outOfRange(opts, token.value, i)) {\n    return 0;\n  }\n  return 1;\n}\nconst genericSyntaxes = {\n  // token types\n  'ident-token': tokenType(types.Ident),\n  'function-token': tokenType(types.Function),\n  'at-keyword-token': tokenType(types.AtKeyword),\n  'hash-token': tokenType(types.Hash),\n  'string-token': tokenType(types.String),\n  'bad-string-token': tokenType(types.BadString),\n  'url-token': tokenType(types.Url),\n  'bad-url-token': tokenType(types.BadUrl),\n  'delim-token': tokenType(types.Delim),\n  'number-token': tokenType(types.Number),\n  'percentage-token': tokenType(types.Percentage),\n  'dimension-token': tokenType(types.Dimension),\n  'whitespace-token': tokenType(types.WhiteSpace),\n  'CDO-token': tokenType(types.CDO),\n  'CDC-token': tokenType(types.CDC),\n  'colon-token': tokenType(types.Colon),\n  'semicolon-token': tokenType(types.Semicolon),\n  'comma-token': tokenType(types.Comma),\n  '[-token': tokenType(types.LeftSquareBracket),\n  ']-token': tokenType(types.RightSquareBracket),\n  '(-token': tokenType(types.LeftParenthesis),\n  ')-token': tokenType(types.RightParenthesis),\n  '{-token': tokenType(types.LeftCurlyBracket),\n  '}-token': tokenType(types.RightCurlyBracket),\n  // token type aliases\n  'string': tokenType(types.String),\n  'ident': tokenType(types.Ident),\n  // complex types\n  'custom-ident': customIdent,\n  'custom-property-name': customPropertyName,\n  'hex-color': hexColor,\n  'id-selector': idSelector,\n  // element( <id-selector> )\n  'an-plus-b': genericAnPlusB,\n  'urange': genericUrange,\n  'declaration-value': declarationValue,\n  'any-value': anyValue,\n  // dimensions\n  'dimension': calc(dimension(null)),\n  'angle': calc(dimension(ANGLE)),\n  'decibel': calc(dimension(DECIBEL)),\n  'frequency': calc(dimension(FREQUENCY)),\n  'flex': calc(dimension(FLEX)),\n  'length': calc(zero(dimension(LENGTH))),\n  'resolution': calc(dimension(RESOLUTION)),\n  'semitones': calc(dimension(SEMITONES)),\n  'time': calc(dimension(TIME)),\n  // percentage\n  'percentage': calc(percentage),\n  // numeric\n  'zero': zero(),\n  'number': calc(number),\n  'integer': calc(integer)\n};\nmodule.exports = genericSyntaxes;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}