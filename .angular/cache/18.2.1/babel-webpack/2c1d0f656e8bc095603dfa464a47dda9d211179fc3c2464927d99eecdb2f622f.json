{"ast":null,"code":"'use strict';\n\nconst types = require('../../tokenizer/types.cjs');\nfunction getOffsetExcludeWS() {\n  if (this.tokenIndex > 0) {\n    if (this.lookupType(-1) === types.WhiteSpace) {\n      return this.tokenIndex > 1 ? this.getTokenStart(this.tokenIndex - 1) : this.firstCharOffset;\n    }\n  }\n  return this.tokenStart;\n}\nconst name = 'Raw';\nconst structure = {\n  value: String\n};\nfunction parse(startToken, consumeUntil, excludeWhiteSpace) {\n  const startOffset = this.getTokenStart(startToken);\n  let endOffset;\n  this.skipUntilBalanced(startToken, consumeUntil || this.consumeUntilBalanceEnd);\n  if (excludeWhiteSpace && this.tokenStart > startOffset) {\n    endOffset = getOffsetExcludeWS.call(this);\n  } else {\n    endOffset = this.tokenStart;\n  }\n  return {\n    type: 'Raw',\n    loc: this.getLocation(startOffset, endOffset),\n    value: this.substring(startOffset, endOffset)\n  };\n}\nfunction generate(node) {\n  this.tokenize(node.value);\n}\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}