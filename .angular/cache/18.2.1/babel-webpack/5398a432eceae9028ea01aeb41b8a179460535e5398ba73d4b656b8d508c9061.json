{"ast":null,"code":"'use strict';\n\nconst {\n  removeLeadingZero\n} = require('../lib/svgo/tools');\nexports.name = 'cleanupNumericValues';\nexports.description = 'rounds numeric values to the fixed precision, removes default ‘px’ units';\nconst regNumericValues = /^([-+]?\\d*\\.?\\d+([eE][-+]?\\d+)?)(px|pt|pc|mm|cm|m|in|ft|em|ex|%)?$/;\nconst absoluteLengths = {\n  // relative to px\n  cm: 96 / 2.54,\n  mm: 96 / 25.4,\n  in: 96,\n  pt: 4 / 3,\n  pc: 16,\n  px: 1\n};\n\n/**\n * Round numeric values to the fixed precision,\n * remove default 'px' units.\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'cleanupNumericValues'>}\n */\nexports.fn = (_root, params) => {\n  const {\n    floatPrecision = 3,\n    leadingZero = true,\n    defaultPx = true,\n    convertToPx = true\n  } = params;\n  return {\n    element: {\n      enter: node => {\n        if (node.attributes.viewBox != null) {\n          const nums = node.attributes.viewBox.split(/\\s,?\\s*|,\\s*/g);\n          node.attributes.viewBox = nums.map(value => {\n            const num = Number(value);\n            return Number.isNaN(num) ? value : Number(num.toFixed(floatPrecision));\n          }).join(' ');\n        }\n        for (const [name, value] of Object.entries(node.attributes)) {\n          // The `version` attribute is a text string and cannot be rounded\n          if (name === 'version') {\n            continue;\n          }\n          const match = value.match(regNumericValues);\n\n          // if attribute value matches regNumericValues\n          if (match) {\n            // round it to the fixed precision\n            let num = Number(Number(match[1]).toFixed(floatPrecision));\n            /**\n             * @type {any}\n             */\n            let matchedUnit = match[3] || '';\n            /**\n             * @type{'' | keyof typeof absoluteLengths}\n             */\n            let units = matchedUnit;\n\n            // convert absolute values to pixels\n            if (convertToPx && units !== '' && units in absoluteLengths) {\n              const pxNum = Number((absoluteLengths[units] * Number(match[1])).toFixed(floatPrecision));\n              if (pxNum.toString().length < match[0].length) {\n                num = pxNum;\n                units = 'px';\n              }\n            }\n\n            // and remove leading zero\n            let str;\n            if (leadingZero) {\n              str = removeLeadingZero(num);\n            } else {\n              str = num.toString();\n            }\n\n            // remove default 'px' units\n            if (defaultPx && units === 'px') {\n              units = '';\n            }\n            node.attributes[name] = str + units;\n          }\n        }\n      }\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}