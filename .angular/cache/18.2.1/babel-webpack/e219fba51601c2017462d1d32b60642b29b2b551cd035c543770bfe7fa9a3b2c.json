{"ast":null,"code":"'use strict';\n\nconst types = require('../../tokenizer/types.cjs');\nconst name = 'MediaFeature';\nconst structure = {\n  name: String,\n  value: ['Identifier', 'Number', 'Dimension', 'Ratio', null]\n};\nfunction parse() {\n  const start = this.tokenStart;\n  let name;\n  let value = null;\n  this.eat(types.LeftParenthesis);\n  this.skipSC();\n  name = this.consume(types.Ident);\n  this.skipSC();\n  if (this.tokenType !== types.RightParenthesis) {\n    this.eat(types.Colon);\n    this.skipSC();\n    switch (this.tokenType) {\n      case types.Number:\n        if (this.lookupNonWSType(1) === types.Delim) {\n          value = this.Ratio();\n        } else {\n          value = this.Number();\n        }\n        break;\n      case types.Dimension:\n        value = this.Dimension();\n        break;\n      case types.Ident:\n        value = this.Identifier();\n        break;\n      default:\n        this.error('Number, dimension, ratio or identifier is expected');\n    }\n    this.skipSC();\n  }\n  this.eat(types.RightParenthesis);\n  return {\n    type: 'MediaFeature',\n    loc: this.getLocation(start, this.tokenStart),\n    name,\n    value\n  };\n}\nfunction generate(node) {\n  this.token(types.LeftParenthesis, '(');\n  this.token(types.Ident, node.name);\n  if (node.value !== null) {\n    this.token(types.Colon, ':');\n    this.node(node.value);\n  }\n  this.token(types.RightParenthesis, ')');\n}\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}