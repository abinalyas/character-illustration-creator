{"ast":null,"code":"'use strict';\n\nconst names = require('../../utils/names.cjs');\nconst types = require('../../tokenizer/types.cjs');\nconst EXCLAMATIONMARK = 0x0021; // U+0021 EXCLAMATION MARK (!)\nconst NUMBERSIGN = 0x0023; // U+0023 NUMBER SIGN (#)\nconst DOLLARSIGN = 0x0024; // U+0024 DOLLAR SIGN ($)\nconst AMPERSAND = 0x0026; // U+0026 AMPERSAND (&)\nconst ASTERISK = 0x002A; // U+002A ASTERISK (*)\nconst PLUSSIGN = 0x002B; // U+002B PLUS SIGN (+)\nconst SOLIDUS = 0x002F; // U+002F SOLIDUS (/)\n\nfunction consumeValueRaw(startToken) {\n  return this.Raw(startToken, this.consumeUntilExclamationMarkOrSemicolon, true);\n}\nfunction consumeCustomPropertyRaw(startToken) {\n  return this.Raw(startToken, this.consumeUntilExclamationMarkOrSemicolon, false);\n}\nfunction consumeValue() {\n  const startValueToken = this.tokenIndex;\n  const value = this.Value();\n  if (value.type !== 'Raw' && this.eof === false && this.tokenType !== types.Semicolon && this.isDelim(EXCLAMATIONMARK) === false && this.isBalanceEdge(startValueToken) === false) {\n    this.error();\n  }\n  return value;\n}\nconst name = 'Declaration';\nconst walkContext = 'declaration';\nconst structure = {\n  important: [Boolean, String],\n  property: String,\n  value: ['Value', 'Raw']\n};\nfunction parse() {\n  const start = this.tokenStart;\n  const startToken = this.tokenIndex;\n  const property = readProperty.call(this);\n  const customProperty = names.isCustomProperty(property);\n  const parseValue = customProperty ? this.parseCustomProperty : this.parseValue;\n  const consumeRaw = customProperty ? consumeCustomPropertyRaw : consumeValueRaw;\n  let important = false;\n  let value;\n  this.skipSC();\n  this.eat(types.Colon);\n  const valueStart = this.tokenIndex;\n  if (!customProperty) {\n    this.skipSC();\n  }\n  if (parseValue) {\n    value = this.parseWithFallback(consumeValue, consumeRaw);\n  } else {\n    value = consumeRaw.call(this, this.tokenIndex);\n  }\n  if (customProperty && value.type === 'Value' && value.children.isEmpty) {\n    for (let offset = valueStart - this.tokenIndex; offset <= 0; offset++) {\n      if (this.lookupType(offset) === types.WhiteSpace) {\n        value.children.appendData({\n          type: 'WhiteSpace',\n          loc: null,\n          value: ' '\n        });\n        break;\n      }\n    }\n  }\n  if (this.isDelim(EXCLAMATIONMARK)) {\n    important = getImportant.call(this);\n    this.skipSC();\n  }\n\n  // Do not include semicolon to range per spec\n  // https://drafts.csswg.org/css-syntax/#declaration-diagram\n\n  if (this.eof === false && this.tokenType !== types.Semicolon && this.isBalanceEdge(startToken) === false) {\n    this.error();\n  }\n  return {\n    type: 'Declaration',\n    loc: this.getLocation(start, this.tokenStart),\n    important,\n    property,\n    value\n  };\n}\nfunction generate(node) {\n  this.token(types.Ident, node.property);\n  this.token(types.Colon, ':');\n  this.node(node.value);\n  if (node.important) {\n    this.token(types.Delim, '!');\n    this.token(types.Ident, node.important === true ? 'important' : node.important);\n  }\n}\nfunction readProperty() {\n  const start = this.tokenStart;\n\n  // hacks\n  if (this.tokenType === types.Delim) {\n    switch (this.charCodeAt(this.tokenStart)) {\n      case ASTERISK:\n      case DOLLARSIGN:\n      case PLUSSIGN:\n      case NUMBERSIGN:\n      case AMPERSAND:\n        this.next();\n        break;\n\n      // TODO: not sure we should support this hack\n      case SOLIDUS:\n        this.next();\n        if (this.isDelim(SOLIDUS)) {\n          this.next();\n        }\n        break;\n    }\n  }\n  if (this.tokenType === types.Hash) {\n    this.eat(types.Hash);\n  } else {\n    this.eat(types.Ident);\n  }\n  return this.substrToCursor(start);\n}\n\n// ! ws* important\nfunction getImportant() {\n  this.eat(types.Delim);\n  this.skipSC();\n  const important = this.consume(types.Ident);\n\n  // store original value in case it differ from `important`\n  // for better original source restoring and hacks like `!ie` support\n  return important === 'important' ? true : important;\n}\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\nexports.walkContext = walkContext;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}