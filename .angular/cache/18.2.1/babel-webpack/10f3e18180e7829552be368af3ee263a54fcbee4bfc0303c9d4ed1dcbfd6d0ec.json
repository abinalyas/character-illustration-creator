{"ast":null,"code":"'use strict';\n\nconst csstree = require('css-tree');\nconst {\n  visit\n} = require('../lib/xast.js');\nexports.name = 'cleanupEnableBackground';\nexports.description = 'remove or cleanup enable-background attribute when possible';\nconst regEnableBackground = /^new\\s0\\s0\\s([-+]?\\d*\\.?\\d+([eE][-+]?\\d+)?)\\s([-+]?\\d*\\.?\\d+([eE][-+]?\\d+)?)$/;\n\n/**\n * Remove or cleanup enable-background attr which coincides with a width/height box.\n *\n * @see https://www.w3.org/TR/SVG11/filters.html#EnableBackgroundProperty\n * @example\n * <svg width=\"100\" height=\"50\" enable-background=\"new 0 0 100 50\">\n *             â¬‡\n * <svg width=\"100\" height=\"50\">\n * @author Kir Belevich\n * @type {import('./plugins-types').Plugin<'cleanupEnableBackground'>}\n */\nexports.fn = root => {\n  let hasFilter = false;\n  visit(root, {\n    element: {\n      enter: node => {\n        if (node.name === 'filter') {\n          hasFilter = true;\n        }\n      }\n    }\n  });\n  return {\n    element: {\n      enter: node => {\n        /** @type {?csstree.CssNode} */\n        let newStyle = null;\n        /** @type {?csstree.ListItem<csstree.CssNode>} */\n        let enableBackgroundDeclaration = null;\n        if (node.attributes.style != null) {\n          newStyle = csstree.parse(node.attributes.style, {\n            context: 'declarationList'\n          });\n          if (newStyle.type === 'DeclarationList') {\n            /** @type {csstree.ListItem<csstree.CssNode>[]} */\n            const enableBackgroundDeclarations = [];\n            csstree.walk(newStyle, (node, nodeItem) => {\n              if (node.type === 'Declaration' && node.property === 'enable-background') {\n                enableBackgroundDeclarations.push(nodeItem);\n                enableBackgroundDeclaration = nodeItem;\n              }\n            });\n            for (let i = 0; i < enableBackgroundDeclarations.length - 1; i++) {\n              newStyle.children.remove(enableBackgroundDeclarations[i]);\n            }\n          }\n        }\n        if (!hasFilter) {\n          delete node.attributes['enable-background'];\n          if (newStyle?.type === 'DeclarationList') {\n            if (enableBackgroundDeclaration) {\n              newStyle.children.remove(enableBackgroundDeclaration);\n            }\n            if (newStyle.children.isEmpty) {\n              delete node.attributes.style;\n            } else {\n              node.attributes.style = csstree.generate(newStyle);\n            }\n          }\n          return;\n        }\n        const hasDimensions = node.attributes.width != null && node.attributes.height != null;\n        if ((node.name === 'svg' || node.name === 'mask' || node.name === 'pattern') && hasDimensions) {\n          const attrValue = node.attributes['enable-background'];\n          const attrCleaned = cleanupValue(attrValue, node.name, node.attributes.width, node.attributes.height);\n          if (attrCleaned) {\n            node.attributes['enable-background'] = attrCleaned;\n          } else {\n            delete node.attributes['enable-background'];\n          }\n          if (newStyle?.type === 'DeclarationList' && enableBackgroundDeclaration) {\n            const styleValue = csstree.generate(\n            // @ts-ignore\n            enableBackgroundDeclaration.data.value);\n            const styleCleaned = cleanupValue(styleValue, node.name, node.attributes.width, node.attributes.height);\n            if (styleCleaned) {\n              // @ts-ignore\n              enableBackgroundDeclaration.data.value = {\n                type: 'Raw',\n                value: styleCleaned\n              };\n            } else {\n              newStyle.children.remove(enableBackgroundDeclaration);\n            }\n          }\n        }\n        if (newStyle?.type === 'DeclarationList') {\n          if (newStyle.children.isEmpty) {\n            delete node.attributes.style;\n          } else {\n            node.attributes.style = csstree.generate(newStyle);\n          }\n        }\n      }\n    }\n  };\n};\n\n/**\n * @param {string} value Value of a enable-background attribute or style declaration.\n * @param {string} nodeName Name of the node the value was assigned to.\n * @param {string} width Width of the node the value was assigned to.\n * @param {string} height Height of the node the value was assigned to.\n * @returns {string | undefined} Cleaned up value, or undefined if it's redundant.\n */\nconst cleanupValue = (value, nodeName, width, height) => {\n  const match = regEnableBackground.exec(value);\n  if (match != null && width === match[1] && height === match[3]) {\n    return nodeName === 'svg' ? undefined : 'new';\n  }\n  return value;\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}