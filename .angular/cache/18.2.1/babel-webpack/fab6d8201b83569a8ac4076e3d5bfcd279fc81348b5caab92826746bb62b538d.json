{"ast":null,"code":"'use strict';\n\nexports.name = 'removeUnusedNS';\nexports.description = 'removes unused namespaces declaration';\n\n/**\n * Remove unused namespaces declaration from svg element\n * which are not used in elements or attributes\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'removeUnusedNS'>}\n */\nexports.fn = () => {\n  /**\n   * @type {Set<string>}\n   */\n  const unusedNamespaces = new Set();\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        // collect all namespaces from svg element\n        // (such as xmlns:xlink=\"http://www.w3.org/1999/xlink\")\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          for (const name of Object.keys(node.attributes)) {\n            if (name.startsWith('xmlns:')) {\n              const local = name.slice('xmlns:'.length);\n              unusedNamespaces.add(local);\n            }\n          }\n        }\n        if (unusedNamespaces.size !== 0) {\n          // preserve namespace used in nested elements names\n          if (node.name.includes(':')) {\n            const [ns] = node.name.split(':');\n            if (unusedNamespaces.has(ns)) {\n              unusedNamespaces.delete(ns);\n            }\n          }\n          // preserve namespace used in nested elements attributes\n          for (const name of Object.keys(node.attributes)) {\n            if (name.includes(':')) {\n              const [ns] = name.split(':');\n              unusedNamespaces.delete(ns);\n            }\n          }\n        }\n      },\n      exit: (node, parentNode) => {\n        // remove unused namespace attributes from svg element\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          for (const name of unusedNamespaces) {\n            delete node.attributes[`xmlns:${name}`];\n          }\n        }\n      }\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}