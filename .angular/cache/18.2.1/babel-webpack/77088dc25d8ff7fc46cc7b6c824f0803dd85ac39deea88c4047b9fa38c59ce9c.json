{"ast":null,"code":"'use strict';\n\nfunction getTrace(node) {\n  function shouldPutToTrace(syntax) {\n    if (syntax === null) {\n      return false;\n    }\n    return syntax.type === 'Type' || syntax.type === 'Property' || syntax.type === 'Keyword';\n  }\n  function hasMatch(matchNode) {\n    if (Array.isArray(matchNode.match)) {\n      // use for-loop for better perfomance\n      for (let i = 0; i < matchNode.match.length; i++) {\n        if (hasMatch(matchNode.match[i])) {\n          if (shouldPutToTrace(matchNode.syntax)) {\n            result.unshift(matchNode.syntax);\n          }\n          return true;\n        }\n      }\n    } else if (matchNode.node === node) {\n      result = shouldPutToTrace(matchNode.syntax) ? [matchNode.syntax] : [];\n      return true;\n    }\n    return false;\n  }\n  let result = null;\n  if (this.matched !== null) {\n    hasMatch(this.matched);\n  }\n  return result;\n}\nfunction isType(node, type) {\n  return testNode(this, node, match => match.type === 'Type' && match.name === type);\n}\nfunction isProperty(node, property) {\n  return testNode(this, node, match => match.type === 'Property' && match.name === property);\n}\nfunction isKeyword(node) {\n  return testNode(this, node, match => match.type === 'Keyword');\n}\nfunction testNode(match, node, fn) {\n  const trace = getTrace.call(match, node);\n  if (trace === null) {\n    return false;\n  }\n  return trace.some(fn);\n}\nexports.getTrace = getTrace;\nexports.isKeyword = isKeyword;\nexports.isProperty = isProperty;\nexports.isType = isType;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}