{"ast":null,"code":"'use strict';\n\nconst cssTree = require('css-tree');\nconst compress = require('./compress.cjs');\nconst specificity = require('./restructure/prepare/specificity.cjs');\nfunction encodeString(value) {\n  const stringApostrophe = cssTree.string.encode(value, true);\n  const stringQuote = cssTree.string.encode(value);\n  return stringApostrophe.length < stringQuote.length ? stringApostrophe : stringQuote;\n}\nconst {\n  lexer,\n  tokenize,\n  parse,\n  generate,\n  walk,\n  find,\n  findLast,\n  findAll,\n  fromPlainObject,\n  toPlainObject\n} = cssTree.fork({\n  node: {\n    String: {\n      generate(node) {\n        this.token(cssTree.tokenTypes.String, encodeString(node.value));\n      }\n    },\n    Url: {\n      generate(node) {\n        const encodedUrl = cssTree.url.encode(node.value);\n        const string = encodeString(node.value);\n        this.token(cssTree.tokenTypes.Url, encodedUrl.length <= string.length + 5 /* \"url()\".length */ ? encodedUrl : 'url(' + string + ')');\n      }\n    }\n  }\n});\nexports.compress = compress;\nexports.specificity = specificity;\nexports.find = find;\nexports.findAll = findAll;\nexports.findLast = findLast;\nexports.fromPlainObject = fromPlainObject;\nexports.generate = generate;\nexports.lexer = lexer;\nexports.parse = parse;\nexports.toPlainObject = toPlainObject;\nexports.tokenize = tokenize;\nexports.walk = walk;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}