{"ast":null,"code":"'use strict';\n\nconst types = require('../../tokenizer/types.cjs');\nconst AMPERSAND = 0x0026; // U+0026 AMPERSAND (&)\n\nfunction consumeRaw(startToken) {\n  return this.Raw(startToken, this.consumeUntilSemicolonIncluded, true);\n}\nconst name = 'DeclarationList';\nconst structure = {\n  children: [['Declaration', 'Atrule', 'Rule']]\n};\nfunction parse() {\n  const children = this.createList();\n  while (!this.eof) {\n    switch (this.tokenType) {\n      case types.WhiteSpace:\n      case types.Comment:\n      case types.Semicolon:\n        this.next();\n        break;\n      case types.AtKeyword:\n        children.push(this.parseWithFallback(this.Atrule.bind(this, true), consumeRaw));\n        break;\n      default:\n        if (this.isDelim(AMPERSAND)) {\n          children.push(this.parseWithFallback(this.Rule, consumeRaw));\n        } else {\n          children.push(this.parseWithFallback(this.Declaration, consumeRaw));\n        }\n    }\n  }\n  return {\n    type: 'DeclarationList',\n    loc: this.getLocationFromList(children),\n    children\n  };\n}\nfunction generate(node) {\n  this.children(node, prev => {\n    if (prev.type === 'Declaration') {\n      this.token(types.Semicolon, ';');\n    }\n  });\n}\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}