{"ast":null,"code":"'use strict';\n\nconst types = require('../../tokenizer/types.cjs');\n\n// var( <ident> , <value>? )\nfunction varFn() {\n  const children = this.createList();\n  this.skipSC();\n\n  // NOTE: Don't check more than a first argument is an ident, rest checks are for lexer\n  children.push(this.Identifier());\n  this.skipSC();\n  if (this.tokenType === types.Comma) {\n    children.push(this.Operator());\n    const startIndex = this.tokenIndex;\n    const value = this.parseCustomProperty ? this.Value(null) : this.Raw(this.tokenIndex, this.consumeUntilExclamationMarkOrSemicolon, false);\n    if (value.type === 'Value' && value.children.isEmpty) {\n      for (let offset = startIndex - this.tokenIndex; offset <= 0; offset++) {\n        if (this.lookupType(offset) === types.WhiteSpace) {\n          value.children.appendData({\n            type: 'WhiteSpace',\n            loc: null,\n            value: ' '\n          });\n          break;\n        }\n      }\n    }\n    children.push(value);\n  }\n  return children;\n}\nmodule.exports = varFn;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}