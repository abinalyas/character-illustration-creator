{"ast":null,"code":"'use strict';\n\nconst types = require('../../tokenizer/types.cjs');\nfunction consumeRaw(startToken) {\n  return this.Raw(startToken, this.consumeUntilLeftCurlyBracketOrSemicolon, true);\n}\nfunction isDeclarationBlockAtrule() {\n  for (let offset = 1, type; type = this.lookupType(offset); offset++) {\n    if (type === types.RightCurlyBracket) {\n      return true;\n    }\n    if (type === types.LeftCurlyBracket || type === types.AtKeyword) {\n      return false;\n    }\n  }\n  return false;\n}\nconst name = 'Atrule';\nconst walkContext = 'atrule';\nconst structure = {\n  name: String,\n  prelude: ['AtrulePrelude', 'Raw', null],\n  block: ['Block', null]\n};\nfunction parse(isDeclaration = false) {\n  const start = this.tokenStart;\n  let name;\n  let nameLowerCase;\n  let prelude = null;\n  let block = null;\n  this.eat(types.AtKeyword);\n  name = this.substrToCursor(start + 1);\n  nameLowerCase = name.toLowerCase();\n  this.skipSC();\n\n  // parse prelude\n  if (this.eof === false && this.tokenType !== types.LeftCurlyBracket && this.tokenType !== types.Semicolon) {\n    if (this.parseAtrulePrelude) {\n      prelude = this.parseWithFallback(this.AtrulePrelude.bind(this, name, isDeclaration), consumeRaw);\n    } else {\n      prelude = consumeRaw.call(this, this.tokenIndex);\n    }\n    this.skipSC();\n  }\n  switch (this.tokenType) {\n    case types.Semicolon:\n      this.next();\n      break;\n    case types.LeftCurlyBracket:\n      if (hasOwnProperty.call(this.atrule, nameLowerCase) && typeof this.atrule[nameLowerCase].block === 'function') {\n        block = this.atrule[nameLowerCase].block.call(this, isDeclaration);\n      } else {\n        // TODO: should consume block content as Raw?\n        block = this.Block(isDeclarationBlockAtrule.call(this));\n      }\n      break;\n  }\n  return {\n    type: 'Atrule',\n    loc: this.getLocation(start, this.tokenStart),\n    name,\n    prelude,\n    block\n  };\n}\nfunction generate(node) {\n  this.token(types.AtKeyword, '@' + node.name);\n  if (node.prelude !== null) {\n    this.node(node.prelude);\n  }\n  if (node.block) {\n    this.node(node.block);\n  } else {\n    this.token(types.Semicolon, ';');\n  }\n}\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\nexports.walkContext = walkContext;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}