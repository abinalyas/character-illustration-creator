{"ast":null,"code":"'use strict';\n\nconst version = require('./version.cjs');\nconst syntax = require('./syntax.cjs');\nconst utils = require('./utils.cjs');\nconst {\n  parse,\n  generate,\n  compress\n} = syntax;\nfunction debugOutput(name, options, startTime, data) {\n  if (options.debug) {\n    console.error(`## ${name} done in %d ms\\n`, Date.now() - startTime);\n  }\n  return data;\n}\nfunction createDefaultLogger(level) {\n  let lastDebug;\n  return function logger(title, ast) {\n    let line = title;\n    if (ast) {\n      line = `[${((Date.now() - lastDebug) / 1000).toFixed(3)}s] ${line}`;\n    }\n    if (level > 1 && ast) {\n      let css = generate(ast);\n\n      // when level 2, limit css to 256 symbols\n      if (level === 2 && css.length > 256) {\n        css = css.substr(0, 256) + '...';\n      }\n      line += `\\n  ${css}\\n`;\n    }\n    console.error(line);\n    lastDebug = Date.now();\n  };\n}\nfunction buildCompressOptions(options) {\n  options = {\n    ...options\n  };\n  if (typeof options.logger !== 'function' && options.debug) {\n    options.logger = createDefaultLogger(options.debug);\n  }\n  return options;\n}\nfunction runHandler(ast, options, handlers) {\n  if (!Array.isArray(handlers)) {\n    handlers = [handlers];\n  }\n  handlers.forEach(fn => fn(ast, options));\n}\nfunction minify(context, source, options) {\n  options = options || {};\n  const filename = options.filename || '<unknown>';\n  let result;\n\n  // parse\n  const ast = debugOutput('parsing', options, Date.now(), parse(source, {\n    context,\n    filename,\n    positions: Boolean(options.sourceMap)\n  }));\n\n  // before compress handlers\n  if (options.beforeCompress) {\n    debugOutput('beforeCompress', options, Date.now(), runHandler(ast, options, options.beforeCompress));\n  }\n\n  // compress\n  const compressResult = debugOutput('compress', options, Date.now(), compress(ast, buildCompressOptions(options)));\n\n  // after compress handlers\n  if (options.afterCompress) {\n    debugOutput('afterCompress', options, Date.now(), runHandler(compressResult, options, options.afterCompress));\n  }\n\n  // generate\n  if (options.sourceMap) {\n    result = debugOutput('generate(sourceMap: true)', options, Date.now(), (() => {\n      const tmp = generate(compressResult.ast, {\n        sourceMap: true\n      });\n      tmp.map._file = filename; // since other tools can relay on file in source map transform chain\n      tmp.map.setSourceContent(filename, source);\n      return tmp;\n    })());\n  } else {\n    result = debugOutput('generate', options, Date.now(), {\n      css: generate(compressResult.ast),\n      map: null\n    });\n  }\n  return result;\n}\nfunction minifyStylesheet(source, options) {\n  return minify('stylesheet', source, options);\n}\nfunction minifyBlock(source, options) {\n  return minify('declarationList', source, options);\n}\nexports.version = version.version;\nexports.syntax = syntax;\nexports.utils = utils;\nexports.minify = minifyStylesheet;\nexports.minifyBlock = minifyBlock;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}