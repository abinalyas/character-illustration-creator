{"ast":null,"code":"'use strict';\n\nconst types = require('../../tokenizer/types.cjs');\nconst PLUSSIGN = 0x002B; // U+002B PLUS SIGN (+)\nconst SOLIDUS = 0x002F; // U+002F SOLIDUS (/)\nconst GREATERTHANSIGN = 0x003E; // U+003E GREATER-THAN SIGN (>)\nconst TILDE = 0x007E; // U+007E TILDE (~)\n\nconst name = 'Combinator';\nconst structure = {\n  name: String\n};\n\n// + | > | ~ | /deep/\nfunction parse() {\n  const start = this.tokenStart;\n  let name;\n  switch (this.tokenType) {\n    case types.WhiteSpace:\n      name = ' ';\n      break;\n    case types.Delim:\n      switch (this.charCodeAt(this.tokenStart)) {\n        case GREATERTHANSIGN:\n        case PLUSSIGN:\n        case TILDE:\n          this.next();\n          break;\n        case SOLIDUS:\n          this.next();\n          this.eatIdent('deep');\n          this.eatDelim(SOLIDUS);\n          break;\n        default:\n          this.error('Combinator is expected');\n      }\n      name = this.substrToCursor(start);\n      break;\n  }\n  return {\n    type: 'Combinator',\n    loc: this.getLocation(start, this.tokenStart),\n    name\n  };\n}\nfunction generate(node) {\n  this.tokenize(node.name);\n}\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}