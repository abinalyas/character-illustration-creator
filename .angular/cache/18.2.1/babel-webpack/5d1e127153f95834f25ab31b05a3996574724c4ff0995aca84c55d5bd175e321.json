{"ast":null,"code":"'use strict';\n\n/**\n * @typedef {import('../lib/types').XastChild} XastChild\n * @typedef {import('../lib/types').XastElement} XastElement\n * @typedef {import('../lib/types').XastParent} XastParent\n */\nconst {\n  cleanupOutData,\n  toFixed\n} = require('../lib/svgo/tools.js');\nconst {\n  transform2js,\n  transformsMultiply,\n  matrixToTransform\n} = require('./_transforms.js');\nexports.name = 'convertTransform';\nexports.description = 'collapses multiple transformations and optimizes it';\n\n/**\n * Convert matrices to the short aliases,\n * convert long translate, scale or rotate transform notations to the shorts ones,\n * convert transforms to the matrices and multiply them all into one,\n * remove useless transforms.\n *\n * @see https://www.w3.org/TR/SVG11/coords.html#TransformMatrixDefined\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'convertTransform'>}\n */\nexports.fn = (_root, params) => {\n  const {\n    convertToShorts = true,\n    // degPrecision = 3, // transformPrecision (or matrix precision) - 2 by default\n    degPrecision,\n    floatPrecision = 3,\n    transformPrecision = 5,\n    matrixToTransform = true,\n    shortTranslate = true,\n    shortScale = true,\n    shortRotate = true,\n    removeUseless = true,\n    collapseIntoOne = true,\n    leadingZero = true,\n    negativeExtraSpace = false\n  } = params;\n  const newParams = {\n    convertToShorts,\n    degPrecision,\n    floatPrecision,\n    transformPrecision,\n    matrixToTransform,\n    shortTranslate,\n    shortScale,\n    shortRotate,\n    removeUseless,\n    collapseIntoOne,\n    leadingZero,\n    negativeExtraSpace\n  };\n  return {\n    element: {\n      enter: node => {\n        if (node.attributes.transform != null) {\n          convertTransform(node, 'transform', newParams);\n        }\n        if (node.attributes.gradientTransform != null) {\n          convertTransform(node, 'gradientTransform', newParams);\n        }\n        if (node.attributes.patternTransform != null) {\n          convertTransform(node, 'patternTransform', newParams);\n        }\n      }\n    }\n  };\n};\n\n/**\n * @typedef {{\n *   convertToShorts: boolean,\n *   degPrecision?: number,\n *   floatPrecision: number,\n *   transformPrecision: number,\n *   matrixToTransform: boolean,\n *   shortTranslate: boolean,\n *   shortScale: boolean,\n *   shortRotate: boolean,\n *   removeUseless: boolean,\n *   collapseIntoOne: boolean,\n *   leadingZero: boolean,\n *   negativeExtraSpace: boolean,\n * }} TransformParams\n */\n\n/**\n * @typedef {{ name: string, data: number[] }} TransformItem\n */\n\n/**\n * @param {XastElement} item\n * @param {string} attrName\n * @param {TransformParams} params\n */\nconst convertTransform = (item, attrName, params) => {\n  let data = transform2js(item.attributes[attrName]);\n  params = definePrecision(data, params);\n  if (params.collapseIntoOne && data.length > 1) {\n    data = [transformsMultiply(data)];\n  }\n  if (params.convertToShorts) {\n    data = convertToShorts(data, params);\n  } else {\n    data.forEach(item => roundTransform(item, params));\n  }\n  if (params.removeUseless) {\n    data = removeUseless(data);\n  }\n  if (data.length) {\n    item.attributes[attrName] = js2transform(data, params);\n  } else {\n    delete item.attributes[attrName];\n  }\n};\n\n/**\n * Defines precision to work with certain parts.\n * transformPrecision - for scale and four first matrix parameters (needs a better precision due to multiplying),\n * floatPrecision - for translate including two last matrix and rotate parameters,\n * degPrecision - for rotate and skew. By default it's equal to (roughly)\n * transformPrecision - 2 or floatPrecision whichever is lower. Can be set in params.\n *\n * @type {(data: TransformItem[], params: TransformParams) => TransformParams}\n *\n * clone params so it don't affect other elements transformations.\n */\nconst definePrecision = (data, {\n  ...newParams\n}) => {\n  const matrixData = [];\n  for (const item of data) {\n    if (item.name == 'matrix') {\n      matrixData.push(...item.data.slice(0, 4));\n    }\n  }\n  let numberOfDigits = newParams.transformPrecision;\n  // Limit transform precision with matrix one. Calculating with larger precision doesn't add any value.\n  if (matrixData.length) {\n    newParams.transformPrecision = Math.min(newParams.transformPrecision, Math.max.apply(Math, matrixData.map(floatDigits)) || newParams.transformPrecision);\n    numberOfDigits = Math.max.apply(Math, matrixData.map(n => n.toString().replace(/\\D+/g, '').length // Number of digits in a number. 123.45 → 5\n    ));\n  }\n  // No sense in angle precision more then number of significant digits in matrix.\n  if (newParams.degPrecision == null) {\n    newParams.degPrecision = Math.max(0, Math.min(newParams.floatPrecision, numberOfDigits - 2));\n  }\n  return newParams;\n};\n\n/**\n * @type {(data: number[], params: TransformParams) => number[]}\n */\nconst degRound = (data, params) => {\n  if (params.degPrecision != null && params.degPrecision >= 1 && params.floatPrecision < 20) {\n    return smartRound(params.degPrecision, data);\n  } else {\n    return round(data);\n  }\n};\n/**\n * @type {(data: number[], params: TransformParams) => number[]}\n */\nconst floatRound = (data, params) => {\n  if (params.floatPrecision >= 1 && params.floatPrecision < 20) {\n    return smartRound(params.floatPrecision, data);\n  } else {\n    return round(data);\n  }\n};\n\n/**\n * @type {(data: number[], params: TransformParams) => number[]}\n */\nconst transformRound = (data, params) => {\n  if (params.transformPrecision >= 1 && params.floatPrecision < 20) {\n    return smartRound(params.transformPrecision, data);\n  } else {\n    return round(data);\n  }\n};\n\n/**\n * Returns number of digits after the point. 0.125 → 3\n *\n * @type {(n: number) => number}\n */\nconst floatDigits = n => {\n  const str = n.toString();\n  return str.slice(str.indexOf('.')).length - 1;\n};\n\n/**\n * Convert transforms to the shorthand alternatives.\n *\n * @param {TransformItem[]} transforms\n * @param {TransformParams} params\n * @returns {TransformItem[]}\n */\nconst convertToShorts = (transforms, params) => {\n  for (var i = 0; i < transforms.length; i++) {\n    let transform = transforms[i];\n\n    // convert matrix to the short aliases\n    if (params.matrixToTransform && transform.name === 'matrix') {\n      var decomposed = matrixToTransform(transform, params);\n      if (js2transform(decomposed, params).length <= js2transform([transform], params).length) {\n        transforms.splice(i, 1, ...decomposed);\n      }\n      transform = transforms[i];\n    }\n\n    // fixed-point numbers\n    // 12.754997 → 12.755\n    roundTransform(transform, params);\n\n    // convert long translate transform notation to the shorts one\n    // translate(10 0) → translate(10)\n    if (params.shortTranslate && transform.name === 'translate' && transform.data.length === 2 && !transform.data[1]) {\n      transform.data.pop();\n    }\n\n    // convert long scale transform notation to the shorts one\n    // scale(2 2) → scale(2)\n    if (params.shortScale && transform.name === 'scale' && transform.data.length === 2 && transform.data[0] === transform.data[1]) {\n      transform.data.pop();\n    }\n\n    // convert long rotate transform notation to the short one\n    // translate(cx cy) rotate(a) translate(-cx -cy) → rotate(a cx cy)\n    if (params.shortRotate && transforms[i - 2]?.name === 'translate' && transforms[i - 1].name === 'rotate' && transforms[i].name === 'translate' && transforms[i - 2].data[0] === -transforms[i].data[0] && transforms[i - 2].data[1] === -transforms[i].data[1]) {\n      transforms.splice(i - 2, 3, {\n        name: 'rotate',\n        data: [transforms[i - 1].data[0], transforms[i - 2].data[0], transforms[i - 2].data[1]]\n      });\n\n      // splice compensation\n      i -= 2;\n    }\n  }\n  return transforms;\n};\n\n/**\n * Remove useless transforms.\n *\n * @type {(transforms: TransformItem[]) => TransformItem[]}\n */\nconst removeUseless = transforms => {\n  return transforms.filter(transform => {\n    // translate(0), rotate(0[, cx, cy]), skewX(0), skewY(0)\n    if (['translate', 'rotate', 'skewX', 'skewY'].indexOf(transform.name) > -1 && (transform.data.length == 1 || transform.name == 'rotate') && !transform.data[0] ||\n    // translate(0, 0)\n    transform.name == 'translate' && !transform.data[0] && !transform.data[1] ||\n    // scale(1)\n    transform.name == 'scale' && transform.data[0] == 1 && (transform.data.length < 2 || transform.data[1] == 1) ||\n    // matrix(1 0 0 1 0 0)\n    transform.name == 'matrix' && transform.data[0] == 1 && transform.data[3] == 1 && !(transform.data[1] || transform.data[2] || transform.data[4] || transform.data[5])) {\n      return false;\n    }\n    return true;\n  });\n};\n\n/**\n * Convert transforms JS representation to string.\n *\n * @param {TransformItem[]} transformJS\n * @param {TransformParams} params\n * @returns {string}\n */\nconst js2transform = (transformJS, params) => {\n  const transformString = transformJS.map(transform => {\n    roundTransform(transform, params);\n    return `${transform.name}(${cleanupOutData(transform.data, params)})`;\n  }).join('');\n  return transformString;\n};\n\n/**\n * @type {(transform: TransformItem, params: TransformParams) => TransformItem}\n */\nconst roundTransform = (transform, params) => {\n  switch (transform.name) {\n    case 'translate':\n      transform.data = floatRound(transform.data, params);\n      break;\n    case 'rotate':\n      transform.data = [...degRound(transform.data.slice(0, 1), params), ...floatRound(transform.data.slice(1), params)];\n      break;\n    case 'skewX':\n    case 'skewY':\n      transform.data = degRound(transform.data, params);\n      break;\n    case 'scale':\n      transform.data = transformRound(transform.data, params);\n      break;\n    case 'matrix':\n      transform.data = [...transformRound(transform.data.slice(0, 4), params), ...floatRound(transform.data.slice(4), params)];\n      break;\n  }\n  return transform;\n};\n\n/**\n * Rounds numbers in array.\n *\n * @type {(data: number[]) => number[]}\n */\nconst round = data => {\n  return data.map(Math.round);\n};\n\n/**\n * Decrease accuracy of floating-point numbers\n * in transforms keeping a specified number of decimals.\n * Smart rounds values like 2.349 to 2.35.\n *\n * @param {number} precision\n * @param {number[]} data\n * @returns {number[]}\n */\nconst smartRound = (precision, data) => {\n  for (var i = data.length, tolerance = +Math.pow(0.1, precision).toFixed(precision); i--;) {\n    if (toFixed(data[i], precision) !== data[i]) {\n      var rounded = +data[i].toFixed(precision - 1);\n      data[i] = +Math.abs(rounded - data[i]).toFixed(precision + 1) >= tolerance ? +data[i].toFixed(precision) : rounded;\n    }\n  }\n  return data;\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}