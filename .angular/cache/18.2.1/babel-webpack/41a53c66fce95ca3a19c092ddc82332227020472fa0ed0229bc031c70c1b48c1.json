{"ast":null,"code":"'use strict';\n\nconst SyntaxError = require('./SyntaxError.cjs');\nconst TAB = 9;\nconst N = 10;\nconst F = 12;\nconst R = 13;\nconst SPACE = 32;\nclass Tokenizer {\n  constructor(str) {\n    this.str = str;\n    this.pos = 0;\n  }\n  charCodeAt(pos) {\n    return pos < this.str.length ? this.str.charCodeAt(pos) : 0;\n  }\n  charCode() {\n    return this.charCodeAt(this.pos);\n  }\n  nextCharCode() {\n    return this.charCodeAt(this.pos + 1);\n  }\n  nextNonWsCode(pos) {\n    return this.charCodeAt(this.findWsEnd(pos));\n  }\n  findWsEnd(pos) {\n    for (; pos < this.str.length; pos++) {\n      const code = this.str.charCodeAt(pos);\n      if (code !== R && code !== N && code !== F && code !== SPACE && code !== TAB) {\n        break;\n      }\n    }\n    return pos;\n  }\n  substringToPos(end) {\n    return this.str.substring(this.pos, this.pos = end);\n  }\n  eat(code) {\n    if (this.charCode() !== code) {\n      this.error('Expect `' + String.fromCharCode(code) + '`');\n    }\n    this.pos++;\n  }\n  peek() {\n    return this.pos < this.str.length ? this.str.charAt(this.pos++) : '';\n  }\n  error(message) {\n    throw new SyntaxError.SyntaxError(message, this.str, this.pos);\n  }\n}\nexports.Tokenizer = Tokenizer;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}