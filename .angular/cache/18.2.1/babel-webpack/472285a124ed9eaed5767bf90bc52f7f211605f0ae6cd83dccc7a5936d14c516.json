{"ast":null,"code":"'use strict';\n\nconst charCodeDefinitions = require('../tokenizer/char-code-definitions.cjs');\nconst types = require('../tokenizer/types.cjs');\nconst utils = require('../tokenizer/utils.cjs');\nconst PLUSSIGN = 0x002B; // U+002B PLUS SIGN (+)\nconst HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\nconst N = 0x006E; // U+006E LATIN SMALL LETTER N (n)\nconst DISALLOW_SIGN = true;\nconst ALLOW_SIGN = false;\nfunction isDelim(token, code) {\n  return token !== null && token.type === types.Delim && token.value.charCodeAt(0) === code;\n}\nfunction skipSC(token, offset, getNextToken) {\n  while (token !== null && (token.type === types.WhiteSpace || token.type === types.Comment)) {\n    token = getNextToken(++offset);\n  }\n  return offset;\n}\nfunction checkInteger(token, valueOffset, disallowSign, offset) {\n  if (!token) {\n    return 0;\n  }\n  const code = token.value.charCodeAt(valueOffset);\n  if (code === PLUSSIGN || code === HYPHENMINUS) {\n    if (disallowSign) {\n      // Number sign is not allowed\n      return 0;\n    }\n    valueOffset++;\n  }\n  for (; valueOffset < token.value.length; valueOffset++) {\n    if (!charCodeDefinitions.isDigit(token.value.charCodeAt(valueOffset))) {\n      // Integer is expected\n      return 0;\n    }\n  }\n  return offset + 1;\n}\n\n// ... <signed-integer>\n// ... ['+' | '-'] <signless-integer>\nfunction consumeB(token, offset_, getNextToken) {\n  let sign = false;\n  let offset = skipSC(token, offset_, getNextToken);\n  token = getNextToken(offset);\n  if (token === null) {\n    return offset_;\n  }\n  if (token.type !== types.Number) {\n    if (isDelim(token, PLUSSIGN) || isDelim(token, HYPHENMINUS)) {\n      sign = true;\n      offset = skipSC(getNextToken(++offset), offset, getNextToken);\n      token = getNextToken(offset);\n      if (token === null || token.type !== types.Number) {\n        return 0;\n      }\n    } else {\n      return offset_;\n    }\n  }\n  if (!sign) {\n    const code = token.value.charCodeAt(0);\n    if (code !== PLUSSIGN && code !== HYPHENMINUS) {\n      // Number sign is expected\n      return 0;\n    }\n  }\n  return checkInteger(token, sign ? 0 : 1, sign, offset);\n}\n\n// An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb\nfunction anPlusB(token, getNextToken) {\n  /* eslint-disable brace-style*/\n  let offset = 0;\n  if (!token) {\n    return 0;\n  }\n\n  // <integer>\n  if (token.type === types.Number) {\n    return checkInteger(token, 0, ALLOW_SIGN, offset); // b\n  }\n\n  // -n\n  // -n <signed-integer>\n  // -n ['+' | '-'] <signless-integer>\n  // -n- <signless-integer>\n  // <dashndashdigit-ident>\n  else if (token.type === types.Ident && token.value.charCodeAt(0) === HYPHENMINUS) {\n    // expect 1st char is N\n    if (!utils.cmpChar(token.value, 1, N)) {\n      return 0;\n    }\n    switch (token.value.length) {\n      // -n\n      // -n <signed-integer>\n      // -n ['+' | '-'] <signless-integer>\n      case 2:\n        return consumeB(getNextToken(++offset), offset, getNextToken);\n\n      // -n- <signless-integer>\n      case 3:\n        if (token.value.charCodeAt(2) !== HYPHENMINUS) {\n          return 0;\n        }\n        offset = skipSC(getNextToken(++offset), offset, getNextToken);\n        token = getNextToken(offset);\n        return checkInteger(token, 0, DISALLOW_SIGN, offset);\n\n      // <dashndashdigit-ident>\n      default:\n        if (token.value.charCodeAt(2) !== HYPHENMINUS) {\n          return 0;\n        }\n        return checkInteger(token, 3, DISALLOW_SIGN, offset);\n    }\n  }\n\n  // '+'? n\n  // '+'? n <signed-integer>\n  // '+'? n ['+' | '-'] <signless-integer>\n  // '+'? n- <signless-integer>\n  // '+'? <ndashdigit-ident>\n  else if (token.type === types.Ident || isDelim(token, PLUSSIGN) && getNextToken(offset + 1).type === types.Ident) {\n    // just ignore a plus\n    if (token.type !== types.Ident) {\n      token = getNextToken(++offset);\n    }\n    if (token === null || !utils.cmpChar(token.value, 0, N)) {\n      return 0;\n    }\n    switch (token.value.length) {\n      // '+'? n\n      // '+'? n <signed-integer>\n      // '+'? n ['+' | '-'] <signless-integer>\n      case 1:\n        return consumeB(getNextToken(++offset), offset, getNextToken);\n\n      // '+'? n- <signless-integer>\n      case 2:\n        if (token.value.charCodeAt(1) !== HYPHENMINUS) {\n          return 0;\n        }\n        offset = skipSC(getNextToken(++offset), offset, getNextToken);\n        token = getNextToken(offset);\n        return checkInteger(token, 0, DISALLOW_SIGN, offset);\n\n      // '+'? <ndashdigit-ident>\n      default:\n        if (token.value.charCodeAt(1) !== HYPHENMINUS) {\n          return 0;\n        }\n        return checkInteger(token, 2, DISALLOW_SIGN, offset);\n    }\n  }\n\n  // <ndashdigit-dimension>\n  // <ndash-dimension> <signless-integer>\n  // <n-dimension>\n  // <n-dimension> <signed-integer>\n  // <n-dimension> ['+' | '-'] <signless-integer>\n  else if (token.type === types.Dimension) {\n    let code = token.value.charCodeAt(0);\n    let sign = code === PLUSSIGN || code === HYPHENMINUS ? 1 : 0;\n    let i = sign;\n    for (; i < token.value.length; i++) {\n      if (!charCodeDefinitions.isDigit(token.value.charCodeAt(i))) {\n        break;\n      }\n    }\n    if (i === sign) {\n      // Integer is expected\n      return 0;\n    }\n    if (!utils.cmpChar(token.value, i, N)) {\n      return 0;\n    }\n\n    // <n-dimension>\n    // <n-dimension> <signed-integer>\n    // <n-dimension> ['+' | '-'] <signless-integer>\n    if (i + 1 === token.value.length) {\n      return consumeB(getNextToken(++offset), offset, getNextToken);\n    } else {\n      if (token.value.charCodeAt(i + 1) !== HYPHENMINUS) {\n        return 0;\n      }\n\n      // <ndash-dimension> <signless-integer>\n      if (i + 2 === token.value.length) {\n        offset = skipSC(getNextToken(++offset), offset, getNextToken);\n        token = getNextToken(offset);\n        return checkInteger(token, 0, DISALLOW_SIGN, offset);\n      }\n      // <ndashdigit-dimension>\n      else {\n        return checkInteger(token, i + 2, DISALLOW_SIGN, offset);\n      }\n    }\n  }\n  return 0;\n}\nmodule.exports = anPlusB;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}