{"ast":null,"code":"'use strict';\n\nconst types = require('../../tokenizer/types.cjs');\nfunction consumeRaw() {\n  return this.createSingleNodeList(this.Raw(this.tokenIndex, null, false));\n}\nfunction parentheses() {\n  this.skipSC();\n  if (this.tokenType === types.Ident && this.lookupNonWSType(1) === types.Colon) {\n    return this.createSingleNodeList(this.Declaration());\n  }\n  return readSequence.call(this);\n}\nfunction readSequence() {\n  const children = this.createList();\n  let child;\n  this.skipSC();\n  scan: while (!this.eof) {\n    switch (this.tokenType) {\n      case types.Comment:\n      case types.WhiteSpace:\n        this.next();\n        continue;\n      case types.Function:\n        child = this.Function(consumeRaw, this.scope.AtrulePrelude);\n        break;\n      case types.Ident:\n        child = this.Identifier();\n        break;\n      case types.LeftParenthesis:\n        child = this.Parentheses(parentheses, this.scope.AtrulePrelude);\n        break;\n      default:\n        break scan;\n    }\n    children.push(child);\n  }\n  return children;\n}\nconst supports = {\n  parse: {\n    prelude() {\n      const children = readSequence.call(this);\n      if (this.getFirstListNode(children) === null) {\n        this.error('Condition is expected');\n      }\n      return children;\n    },\n    block() {\n      return this.Block(false);\n    }\n  }\n};\nmodule.exports = supports;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}