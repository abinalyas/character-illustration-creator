{"ast":null,"code":"'use strict';\n\nconst types = require('../../tokenizer/types.cjs');\nconst EXCLAMATIONMARK = 0x0021; // U+0021 EXCLAMATION MARK (!)\n\nfunction consumeRaw(startToken) {\n  return this.Raw(startToken, null, false);\n}\nconst name = 'StyleSheet';\nconst walkContext = 'stylesheet';\nconst structure = {\n  children: [['Comment', 'CDO', 'CDC', 'Atrule', 'Rule', 'Raw']]\n};\nfunction parse() {\n  const start = this.tokenStart;\n  const children = this.createList();\n  let child;\n  while (!this.eof) {\n    switch (this.tokenType) {\n      case types.WhiteSpace:\n        this.next();\n        continue;\n      case types.Comment:\n        // ignore comments except exclamation comments (i.e. /*! .. */) on top level\n        if (this.charCodeAt(this.tokenStart + 2) !== EXCLAMATIONMARK) {\n          this.next();\n          continue;\n        }\n        child = this.Comment();\n        break;\n      case types.CDO:\n        // <!--\n        child = this.CDO();\n        break;\n      case types.CDC:\n        // -->\n        child = this.CDC();\n        break;\n\n      // CSS Syntax Module Level 3\n      // ยง2.2 Error handling\n      // At the \"top level\" of a stylesheet, an <at-keyword-token> starts an at-rule.\n      case types.AtKeyword:\n        child = this.parseWithFallback(this.Atrule, consumeRaw);\n        break;\n\n      // Anything else starts a qualified rule ...\n      default:\n        child = this.parseWithFallback(this.Rule, consumeRaw);\n    }\n    children.push(child);\n  }\n  return {\n    type: 'StyleSheet',\n    loc: this.getLocation(start, this.tokenStart),\n    children\n  };\n}\nfunction generate(node) {\n  this.children(node);\n}\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\nexports.walkContext = walkContext;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}