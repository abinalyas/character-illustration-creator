{"ast":null,"code":"'use strict';\n\n/**\n * @typedef {import('../lib/types').XastElement} XastElement\n * @typedef {import('../lib/types').XastChild} XastChild\n */\nconst {\n  visitSkip,\n  detachNodeFromParent\n} = require('../lib/xast.js');\nexports.name = 'mergeStyles';\nexports.description = 'merge multiple style elements into one';\n\n/**\n * Merge multiple style elements into one.\n *\n * @author strarsis <strarsis@gmail.com>\n *\n * @type {import('./plugins-types').Plugin<'mergeStyles'>}\n */\nexports.fn = () => {\n  /**\n   * @type {?XastElement}\n   */\n  let firstStyleElement = null;\n  let collectedStyles = '';\n  /**\n   * @type {'text' | 'cdata'}\n   */\n  let styleContentType = 'text';\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        // skip <foreignObject> content\n        if (node.name === 'foreignObject') {\n          return visitSkip;\n        }\n\n        // collect style elements\n        if (node.name !== 'style') {\n          return;\n        }\n\n        // skip <style> with invalid type attribute\n        if (node.attributes.type != null && node.attributes.type !== '' && node.attributes.type !== 'text/css') {\n          return;\n        }\n\n        // extract style element content\n        let css = '';\n        for (const child of node.children) {\n          if (child.type === 'text') {\n            css += child.value;\n          }\n          if (child.type === 'cdata') {\n            styleContentType = 'cdata';\n            css += child.value;\n          }\n        }\n\n        // remove empty style elements\n        if (css.trim().length === 0) {\n          detachNodeFromParent(node, parentNode);\n          return;\n        }\n\n        // collect css and wrap with media query if present in attribute\n        if (node.attributes.media == null) {\n          collectedStyles += css;\n        } else {\n          collectedStyles += `@media ${node.attributes.media}{${css}}`;\n          delete node.attributes.media;\n        }\n\n        // combine collected styles in the first style element\n        if (firstStyleElement == null) {\n          firstStyleElement = node;\n        } else {\n          detachNodeFromParent(node, parentNode);\n          /**\n           * @type {XastChild}\n           */\n          const child = {\n            type: styleContentType,\n            value: collectedStyles\n          };\n          // TODO remove legacy parentNode in v4\n          Object.defineProperty(child, 'parentNode', {\n            writable: true,\n            value: firstStyleElement\n          });\n          firstStyleElement.children = [child];\n        }\n      }\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}