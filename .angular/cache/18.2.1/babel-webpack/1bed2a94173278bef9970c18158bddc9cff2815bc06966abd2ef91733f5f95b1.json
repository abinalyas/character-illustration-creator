{"ast":null,"code":"'use strict';\n\nconst cssTree = require('css-tree');\nconst specificity = require('./specificity.cjs');\nconst nonFreezePseudoElements = new Set(['first-letter', 'first-line', 'after', 'before']);\nconst nonFreezePseudoClasses = new Set(['link', 'visited', 'hover', 'active', 'first-letter', 'first-line', 'after', 'before']);\nfunction processSelector(node, usageData) {\n  const pseudos = new Set();\n  node.prelude.children.forEach(function (simpleSelector) {\n    let tagName = '*';\n    let scope = 0;\n    simpleSelector.children.forEach(function (node) {\n      switch (node.type) {\n        case 'ClassSelector':\n          if (usageData && usageData.scopes) {\n            const classScope = usageData.scopes[node.name] || 0;\n            if (scope !== 0 && classScope !== scope) {\n              throw new Error('Selector can\\'t has classes from different scopes: ' + cssTree.generate(simpleSelector));\n            }\n            scope = classScope;\n          }\n          break;\n        case 'PseudoClassSelector':\n          {\n            const name = node.name.toLowerCase();\n            if (!nonFreezePseudoClasses.has(name)) {\n              pseudos.add(`:${name}`);\n            }\n            break;\n          }\n        case 'PseudoElementSelector':\n          {\n            const name = node.name.toLowerCase();\n            if (!nonFreezePseudoElements.has(name)) {\n              pseudos.add(`::${name}`);\n            }\n            break;\n          }\n        case 'TypeSelector':\n          tagName = node.name.toLowerCase();\n          break;\n        case 'AttributeSelector':\n          if (node.flags) {\n            pseudos.add(`[${node.flags.toLowerCase()}]`);\n          }\n          break;\n        case 'Combinator':\n          tagName = '*';\n          break;\n      }\n    });\n    simpleSelector.compareMarker = specificity(simpleSelector).toString();\n    simpleSelector.id = null; // pre-init property to avoid multiple hidden class\n    simpleSelector.id = cssTree.generate(simpleSelector);\n    if (scope) {\n      simpleSelector.compareMarker += ':' + scope;\n    }\n    if (tagName !== '*') {\n      simpleSelector.compareMarker += ',' + tagName;\n    }\n  });\n\n  // add property to all rule nodes to avoid multiple hidden class\n  node.pseudoSignature = pseudos.size > 0 ? [...pseudos].sort().join(',') : false;\n}\nmodule.exports = processSelector;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}