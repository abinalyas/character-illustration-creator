{"ast":null,"code":"'use strict';\n\nconst keywords = new Map();\nconst properties = new Map();\nconst HYPHENMINUS = 45; // '-'.charCodeAt()\n\nconst keyword = getKeywordDescriptor;\nconst property = getPropertyDescriptor;\nconst vendorPrefix = getVendorPrefix;\nfunction isCustomProperty(str, offset) {\n  offset = offset || 0;\n  return str.length - offset >= 2 && str.charCodeAt(offset) === HYPHENMINUS && str.charCodeAt(offset + 1) === HYPHENMINUS;\n}\nfunction getVendorPrefix(str, offset) {\n  offset = offset || 0;\n\n  // verdor prefix should be at least 3 chars length\n  if (str.length - offset >= 3) {\n    // vendor prefix starts with hyper minus following non-hyper minus\n    if (str.charCodeAt(offset) === HYPHENMINUS && str.charCodeAt(offset + 1) !== HYPHENMINUS) {\n      // vendor prefix should contain a hyper minus at the ending\n      const secondDashIndex = str.indexOf('-', offset + 2);\n      if (secondDashIndex !== -1) {\n        return str.substring(offset, secondDashIndex + 1);\n      }\n    }\n  }\n  return '';\n}\nfunction getKeywordDescriptor(keyword) {\n  if (keywords.has(keyword)) {\n    return keywords.get(keyword);\n  }\n  const name = keyword.toLowerCase();\n  let descriptor = keywords.get(name);\n  if (descriptor === undefined) {\n    const custom = isCustomProperty(name, 0);\n    const vendor = !custom ? getVendorPrefix(name, 0) : '';\n    descriptor = Object.freeze({\n      basename: name.substr(vendor.length),\n      name,\n      prefix: vendor,\n      vendor,\n      custom\n    });\n  }\n  keywords.set(keyword, descriptor);\n  return descriptor;\n}\nfunction getPropertyDescriptor(property) {\n  if (properties.has(property)) {\n    return properties.get(property);\n  }\n  let name = property;\n  let hack = property[0];\n  if (hack === '/') {\n    hack = property[1] === '/' ? '//' : '/';\n  } else if (hack !== '_' && hack !== '*' && hack !== '$' && hack !== '#' && hack !== '+' && hack !== '&') {\n    hack = '';\n  }\n  const custom = isCustomProperty(name, hack.length);\n\n  // re-use result when possible (the same as for lower case)\n  if (!custom) {\n    name = name.toLowerCase();\n    if (properties.has(name)) {\n      const descriptor = properties.get(name);\n      properties.set(property, descriptor);\n      return descriptor;\n    }\n  }\n  const vendor = !custom ? getVendorPrefix(name, hack.length) : '';\n  const prefix = name.substr(0, hack.length + vendor.length);\n  const descriptor = Object.freeze({\n    basename: name.substr(prefix.length),\n    name: name.substr(hack.length),\n    hack,\n    vendor,\n    prefix,\n    custom\n  });\n  properties.set(property, descriptor);\n  return descriptor;\n}\nexports.isCustomProperty = isCustomProperty;\nexports.keyword = keyword;\nexports.property = property;\nexports.vendorPrefix = vendorPrefix;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}